// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: place_delay_model.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "matrix.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(986d7ee3169e3ec5);
CAPNP_DECLARE_SCHEMA(a8ed63bd0635f7ae);
CAPNP_DECLARE_SCHEMA(a9bf55fc3a2eb196);
CAPNP_DECLARE_SCHEMA(f178d810c9248e13);

}  // namespace schemas
}  // namespace capnp


struct VprFloatEntry {
  VprFloatEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(986d7ee3169e3ec5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VprDeltaDelayModel {
  VprDeltaDelayModel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8ed63bd0635f7ae, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VprOverrideEntry {
  VprOverrideEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9bf55fc3a2eb196, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VprOverrideDelayModel {
  VprOverrideDelayModel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f178d810c9248e13, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class VprFloatEntry::Reader {
public:
  typedef VprFloatEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VprFloatEntry::Builder {
public:
  typedef VprFloatEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getValue();
  inline void setValue(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VprFloatEntry::Pipeline {
public:
  typedef VprFloatEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VprDeltaDelayModel::Reader {
public:
  typedef VprDeltaDelayModel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDelays() const;
  inline  ::Matrix< ::VprFloatEntry>::Reader getDelays() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VprDeltaDelayModel::Builder {
public:
  typedef VprDeltaDelayModel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDelays();
  inline  ::Matrix< ::VprFloatEntry>::Builder getDelays();
  inline void setDelays( ::Matrix< ::VprFloatEntry>::Reader value);
  inline  ::Matrix< ::VprFloatEntry>::Builder initDelays();
  inline void adoptDelays(::capnp::Orphan< ::Matrix< ::VprFloatEntry>>&& value);
  inline ::capnp::Orphan< ::Matrix< ::VprFloatEntry>> disownDelays();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VprDeltaDelayModel::Pipeline {
public:
  typedef VprDeltaDelayModel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Matrix< ::VprFloatEntry>::Pipeline getDelays();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VprOverrideEntry::Reader {
public:
  typedef VprOverrideEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getFromType() const;

  inline  ::int16_t getToType() const;

  inline  ::int16_t getFromClass() const;

  inline  ::int16_t getToClass() const;

  inline  ::int16_t getDeltaX() const;

  inline  ::int16_t getDeltaY() const;

  inline float getDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VprOverrideEntry::Builder {
public:
  typedef VprOverrideEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getFromType();
  inline void setFromType( ::int16_t value);

  inline  ::int16_t getToType();
  inline void setToType( ::int16_t value);

  inline  ::int16_t getFromClass();
  inline void setFromClass( ::int16_t value);

  inline  ::int16_t getToClass();
  inline void setToClass( ::int16_t value);

  inline  ::int16_t getDeltaX();
  inline void setDeltaX( ::int16_t value);

  inline  ::int16_t getDeltaY();
  inline void setDeltaY( ::int16_t value);

  inline float getDelay();
  inline void setDelay(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VprOverrideEntry::Pipeline {
public:
  typedef VprOverrideEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VprOverrideDelayModel::Reader {
public:
  typedef VprOverrideDelayModel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDelays() const;
  inline  ::Matrix< ::VprFloatEntry>::Reader getDelays() const;

  inline bool hasDelayOverrides() const;
  inline  ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Reader getDelayOverrides() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VprOverrideDelayModel::Builder {
public:
  typedef VprOverrideDelayModel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDelays();
  inline  ::Matrix< ::VprFloatEntry>::Builder getDelays();
  inline void setDelays( ::Matrix< ::VprFloatEntry>::Reader value);
  inline  ::Matrix< ::VprFloatEntry>::Builder initDelays();
  inline void adoptDelays(::capnp::Orphan< ::Matrix< ::VprFloatEntry>>&& value);
  inline ::capnp::Orphan< ::Matrix< ::VprFloatEntry>> disownDelays();

  inline bool hasDelayOverrides();
  inline  ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Builder getDelayOverrides();
  inline void setDelayOverrides( ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Builder initDelayOverrides(unsigned int size);
  inline void adoptDelayOverrides(::capnp::Orphan< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>> disownDelayOverrides();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VprOverrideDelayModel::Pipeline {
public:
  typedef VprOverrideDelayModel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Matrix< ::VprFloatEntry>::Pipeline getDelays();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float VprFloatEntry::Reader::getValue() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VprFloatEntry::Builder::getValue() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VprFloatEntry::Builder::setValue(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VprDeltaDelayModel::Reader::hasDelays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VprDeltaDelayModel::Builder::hasDelays() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Matrix< ::VprFloatEntry>::Reader VprDeltaDelayModel::Reader::getDelays() const {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Matrix< ::VprFloatEntry>::Builder VprDeltaDelayModel::Builder::getDelays() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Matrix< ::VprFloatEntry>::Pipeline VprDeltaDelayModel::Pipeline::getDelays() {
  return  ::Matrix< ::VprFloatEntry>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VprDeltaDelayModel::Builder::setDelays( ::Matrix< ::VprFloatEntry>::Reader value) {
  ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Matrix< ::VprFloatEntry>::Builder VprDeltaDelayModel::Builder::initDelays() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VprDeltaDelayModel::Builder::adoptDelays(
    ::capnp::Orphan< ::Matrix< ::VprFloatEntry>>&& value) {
  ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Matrix< ::VprFloatEntry>> VprDeltaDelayModel::Builder::disownDelays() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t VprOverrideEntry::Reader::getFromType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t VprOverrideEntry::Builder::getFromType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setFromType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t VprOverrideEntry::Reader::getToType() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t VprOverrideEntry::Builder::getToType() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setToType( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t VprOverrideEntry::Reader::getFromClass() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t VprOverrideEntry::Builder::getFromClass() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setFromClass( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t VprOverrideEntry::Reader::getToClass() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int16_t VprOverrideEntry::Builder::getToClass() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setToClass( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t VprOverrideEntry::Reader::getDeltaX() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t VprOverrideEntry::Builder::getDeltaX() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setDeltaX( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t VprOverrideEntry::Reader::getDeltaY() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int16_t VprOverrideEntry::Builder::getDeltaY() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setDeltaY( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float VprOverrideEntry::Reader::getDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float VprOverrideEntry::Builder::getDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void VprOverrideEntry::Builder::setDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool VprOverrideDelayModel::Reader::hasDelays() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VprOverrideDelayModel::Builder::hasDelays() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Matrix< ::VprFloatEntry>::Reader VprOverrideDelayModel::Reader::getDelays() const {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Matrix< ::VprFloatEntry>::Builder VprOverrideDelayModel::Builder::getDelays() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Matrix< ::VprFloatEntry>::Pipeline VprOverrideDelayModel::Pipeline::getDelays() {
  return  ::Matrix< ::VprFloatEntry>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VprOverrideDelayModel::Builder::setDelays( ::Matrix< ::VprFloatEntry>::Reader value) {
  ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Matrix< ::VprFloatEntry>::Builder VprOverrideDelayModel::Builder::initDelays() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VprOverrideDelayModel::Builder::adoptDelays(
    ::capnp::Orphan< ::Matrix< ::VprFloatEntry>>&& value) {
  ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Matrix< ::VprFloatEntry>> VprOverrideDelayModel::Builder::disownDelays() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprFloatEntry>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool VprOverrideDelayModel::Reader::hasDelayOverrides() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool VprOverrideDelayModel::Builder::hasDelayOverrides() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Reader VprOverrideDelayModel::Reader::getDelayOverrides() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Builder VprOverrideDelayModel::Builder::getDelayOverrides() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void VprOverrideDelayModel::Builder::setDelayOverrides( ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>::Builder VprOverrideDelayModel::Builder::initDelayOverrides(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void VprOverrideDelayModel::Builder::adoptDelayOverrides(
    ::capnp::Orphan< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>> VprOverrideDelayModel::Builder::disownDelayOverrides() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::VprOverrideEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

