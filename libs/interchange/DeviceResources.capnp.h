// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: DeviceResources.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "LogicalNetlist.capnp.h"
#include "References.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ba4bfb957945c405);
CAPNP_DECLARE_SCHEMA(fdcd6fd7c67e53f1);
CAPNP_DECLARE_SCHEMA(b8d7b4e9185c7735);
CAPNP_DECLARE_SCHEMA(e8b8f98170aab35c);
CAPNP_DECLARE_SCHEMA(99f437f74d975d45);
CAPNP_DECLARE_SCHEMA(8d14cf795384ca4b);
CAPNP_DECLARE_SCHEMA(ad951a871b67c8bd);
CAPNP_DECLARE_SCHEMA(c628455c50530f40);
CAPNP_DECLARE_SCHEMA(9bbb1fc47d97e0b3);
CAPNP_DECLARE_SCHEMA(e3f5925f38774d73);
CAPNP_DECLARE_SCHEMA(dffd65117e9f8280);
CAPNP_DECLARE_SCHEMA(b5f5737ef498dfd3);
CAPNP_DECLARE_SCHEMA(e2d8f70cc95c539d);
CAPNP_DECLARE_SCHEMA(9e4dab2b9833c9a7);
CAPNP_DECLARE_SCHEMA(844f2256240b4117);
CAPNP_DECLARE_SCHEMA(8503877b362e7759);
CAPNP_DECLARE_SCHEMA(e0e8bff66f5abb7f);
CAPNP_DECLARE_SCHEMA(cd9725848fcbc71d);
CAPNP_DECLARE_SCHEMA(ffa75a3a3e5ace96);
CAPNP_DECLARE_SCHEMA(e154fd548a6576da);
CAPNP_DECLARE_SCHEMA(a244a17dc0cf8ddb);
CAPNP_DECLARE_SCHEMA(a0b99767cf62f5f6);
CAPNP_DECLARE_SCHEMA(fb4181e1b198f811);
CAPNP_DECLARE_SCHEMA(c9a368a127fcf3ec);
CAPNP_DECLARE_SCHEMA(ad1f4608184d46ab);
CAPNP_DECLARE_SCHEMA(e6f9d664271c5211);
enum class BELCategory_e6f9d664271c5211: uint16_t {
  LOGIC,
  ROUTING,
  SITE_PORT,
};
CAPNP_DECLARE_ENUM(BELCategory, e6f9d664271c5211);
CAPNP_DECLARE_SCHEMA(9aae005de55c7a4c);
CAPNP_DECLARE_SCHEMA(ee66c701622b12e9);
CAPNP_DECLARE_SCHEMA(eeb1841569aa0587);
CAPNP_DECLARE_SCHEMA(d40b4e68bcd8d145);
CAPNP_DECLARE_SCHEMA(9645b0b16679d151);
CAPNP_DECLARE_SCHEMA(a8a9bd7e9cc1a3a4);
CAPNP_DECLARE_SCHEMA(c39a1b68d7a0549d);
CAPNP_DECLARE_SCHEMA(e648ee49c7422b35);
CAPNP_DECLARE_SCHEMA(cd56c6bc7ed80775);
enum class WireCategory_cd56c6bc7ed80775: uint16_t {
  GENERAL,
  SPECIAL,
  GLOBAL,
};
CAPNP_DECLARE_ENUM(WireCategory, cd56c6bc7ed80775);
CAPNP_DECLARE_SCHEMA(86b4e1068d8abada);
CAPNP_DECLARE_SCHEMA(ec1a6256b93f23b2);
CAPNP_DECLARE_SCHEMA(e5685b353ea35cdc);
CAPNP_DECLARE_SCHEMA(d8861e69646073e0);
CAPNP_DECLARE_SCHEMA(8a02641a41287131);
CAPNP_DECLARE_SCHEMA(92bff2862c077906);
CAPNP_DECLARE_SCHEMA(b528a4e2e79d0464);
CAPNP_DECLARE_SCHEMA(b09d1c80eebea3cd);
CAPNP_DECLARE_SCHEMA(a8c60449af8ad096);
CAPNP_DECLARE_SCHEMA(a41b33a422768adb);
CAPNP_DECLARE_SCHEMA(938d70a292310732);
CAPNP_DECLARE_SCHEMA(cba8e0da63fbe025);
CAPNP_DECLARE_SCHEMA(9136b5d44c8a3445);
CAPNP_DECLARE_SCHEMA(c6b97af047c5d120);
CAPNP_DECLARE_SCHEMA(abb5f1656e4ba5cc);
CAPNP_DECLARE_SCHEMA(fca960714a85d74c);
CAPNP_DECLARE_SCHEMA(e6303441bc30e80d);
CAPNP_DECLARE_SCHEMA(de99aebdbcf60fff);
CAPNP_DECLARE_SCHEMA(c8bd7533ae1db2ff);
CAPNP_DECLARE_SCHEMA(c3fe4bca819dadd3);
enum class ConstantType_c3fe4bca819dadd3: uint16_t {
  NO_PREFERENCE,
  GND,
  VCC,
};
CAPNP_DECLARE_ENUM(ConstantType, c3fe4bca819dadd3);
CAPNP_DECLARE_SCHEMA(fa44cf7e3e1f7efc);
CAPNP_DECLARE_SCHEMA(ff33d859ad536739);
CAPNP_DECLARE_SCHEMA(d5387ebf3583de10);
CAPNP_DECLARE_SCHEMA(d1d288a7a4b43755);
CAPNP_DECLARE_SCHEMA(901a42e38a6bf91d);
enum class CellPinValue_901a42e38a6bf91d: uint16_t {
  FLOAT,
  GND,
  VCC,
};
CAPNP_DECLARE_ENUM(CellPinValue, 901a42e38a6bf91d);
CAPNP_DECLARE_SCHEMA(eee3857a1d631d24);
CAPNP_DECLARE_SCHEMA(933d2f79f195b31e);
CAPNP_DECLARE_SCHEMA(baabe42da161ec1c);
CAPNP_DECLARE_SCHEMA(e581c0d2fb651175);
CAPNP_DECLARE_SCHEMA(883e08341dca3990);
CAPNP_DECLARE_SCHEMA(cd81e36d06dde41d);
CAPNP_DECLARE_SCHEMA(f0d175f76ec0c4bd);
CAPNP_DECLARE_SCHEMA(f56e21c778d6b2b0);
CAPNP_DECLARE_SCHEMA(b478411cbbbb4d5c);
CAPNP_DECLARE_SCHEMA(e8b83930f5358d4f);
enum class ClockEdge_e8b83930f5358d4f: uint16_t {
  RISE,
  FALL,
};
CAPNP_DECLARE_ENUM(ClockEdge, e8b83930f5358d4f);
CAPNP_DECLARE_SCHEMA(cd7266c85c4962a1);
enum class PinsDelayType_cd7266c85c4962a1: uint16_t {
  COMB,
  SETUP,
  HOLD,
  CLK2Q,
};
CAPNP_DECLARE_ENUM(PinsDelayType, cd7266c85c4962a1);
CAPNP_DECLARE_SCHEMA(a1f2b40cd83e61da);
CAPNP_DECLARE_SCHEMA(fd2ba5c82a218126);
CAPNP_DECLARE_SCHEMA(ee019313d1ec4831);
CAPNP_DECLARE_SCHEMA(88aa4e0c2f6e028c);
CAPNP_DECLARE_SCHEMA(fb1ec6427c3b7926);
CAPNP_DECLARE_SCHEMA(c99f38ba31009943);
CAPNP_DECLARE_SCHEMA(9fa352f590c02b1a);
CAPNP_DECLARE_SCHEMA(af660749366d59d5);
CAPNP_DECLARE_SCHEMA(cb979d178994e708);
CAPNP_DECLARE_SCHEMA(e21901f504bc717e);
CAPNP_DECLARE_SCHEMA(ac2b62c93af1c8e8);
CAPNP_DECLARE_SCHEMA(ad0f7fe5de02e081);
CAPNP_DECLARE_SCHEMA(f90b60714406d6f9);
CAPNP_DECLARE_SCHEMA(cd5b634e7fddea73);
CAPNP_DECLARE_SCHEMA(a05b1872487659c6);
CAPNP_DECLARE_SCHEMA(eae03458512bf6e2);
CAPNP_DECLARE_SCHEMA(f6cba9543dd42a03);
CAPNP_DECLARE_SCHEMA(9a65108b52c6eaed);
CAPNP_DECLARE_SCHEMA(aa2f42f1fd8c6f56);
CAPNP_DECLARE_SCHEMA(87c9d7c3d0639c8b);
CAPNP_DECLARE_SCHEMA(b49e2f9bb7f59da2);
CAPNP_DECLARE_SCHEMA(c3f069fe23e67786);
CAPNP_DECLARE_SCHEMA(a8b3223f180dcbd3);
CAPNP_DECLARE_SCHEMA(c5e869e4a0bcd128);
CAPNP_DECLARE_SCHEMA(85f9eb7b03512d61);
CAPNP_DECLARE_SCHEMA(bd0000eca69e6144);
CAPNP_DECLARE_SCHEMA(eba6c5d39899d844);
enum class ParameterFormat_eba6c5d39899d844: uint16_t {
  STRING,
  BOOLEAN,
  INTEGER,
  FLOATING_POINT,
  VERILOG_BINARY,
  VERILOG_HEX,
  C_BINARY,
  C_HEX,
};
CAPNP_DECLARE_ENUM(ParameterFormat, eba6c5d39899d844);
CAPNP_DECLARE_SCHEMA(a1a1aa36fb2caefa);
CAPNP_DECLARE_SCHEMA(a9e0311b631b2f4d);
CAPNP_DECLARE_SCHEMA(bf84c64902b1b278);

}  // namespace schemas
}  // namespace capnp

namespace DeviceResources {

struct HashSet {
  HashSet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba4bfb957945c405, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StringRef {
  StringRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8d7b4e9185c7735, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SiteTypeRef {
  SiteTypeRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(99f437f74d975d45, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BELPinRef {
  BELPinRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad951a871b67c8bd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WireRef {
  WireRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9bbb1fc47d97e0b3, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WireTypeRef {
  WireTypeRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dffd65117e9f8280, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TileTypeRef {
  TileTypeRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2d8f70cc95c539d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PIPTimingRef {
  PIPTimingRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(844f2256240b4117, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NodeTimingRef {
  NodeTimingRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0e8bff66f5abb7f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device {
  Device() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SiteType;
  struct ParentPins;
  struct SiteTypeInTileType;
  struct TileType;
  struct BELInverter;
  struct BEL;
  typedef ::capnp::schemas::BELCategory_e6f9d664271c5211 BELCategory;

  struct Site;
  struct Tile;
  struct BELPin;
  struct SiteWire;
  struct SitePIP;
  struct SitePin;
  struct Wire;
  typedef ::capnp::schemas::WireCategory_cd56c6bc7ed80775 WireCategory;

  struct WireType;
  struct Node;
  struct PIP;
  struct PseudoCell;
  struct WireConstantSources;
  struct ParameterMapEntry;
  struct ParameterMapRule;
  struct PrimToMacroExpansion;
  struct CellBelMapping;
  struct CellBelPinEntry;
  struct SiteTypeBelEntry;
  struct CommonCellBelPinMaps;
  struct ParameterSiteTypeBelEntry;
  struct ParameterCellBelPinMaps;
  struct Package;
  typedef ::capnp::schemas::ConstantType_c3fe4bca819dadd3 ConstantType;

  struct Constants;
  struct CellPinInversionParameter;
  struct CellPinInversion;
  struct CellInversion;
  struct PinsDelay;
  struct PinDelay;
  typedef ::capnp::schemas::ClockEdge_e8b83930f5358d4f ClockEdge;

  typedef ::capnp::schemas::PinsDelayType_cd7266c85c4962a1 PinsDelayType;

  struct NodeTiming;
  struct PIPTiming;
  struct CornerModel;
  struct CornerModelValues;
  struct Constraints;
  struct LutDefinitions;
  typedef ::capnp::schemas::ParameterFormat_eba6c5d39899d844 ParameterFormat;

  struct ParameterDefinition;
  struct CellParameterDefinition;
  struct ParameterDefinitions;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ffa75a3a3e5ace96, 0, 19)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SiteType {
  SiteType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e154fd548a6576da, 1, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParentPins {
  ParentPins() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a244a17dc0cf8ddb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SiteTypeInTileType {
  SiteTypeInTileType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0b99767cf62f5f6, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::TileType {
  TileType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb4181e1b198f811, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::BELInverter {
  BELInverter() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c9a368a127fcf3ec, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::BEL {
  BEL() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NON_INVERTING,
    INVERTING,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad1f4608184d46ab, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Site {
  Site() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aae005de55c7a4c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Tile {
  Tile() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee66c701622b12e9, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::BELPin {
  BELPin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eeb1841569aa0587, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SiteWire {
  SiteWire() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d40b4e68bcd8d145, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SitePIP {
  SitePIP() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9645b0b16679d151, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SitePin {
  SitePin() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Model;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8a9bd7e9cc1a3a4, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SitePin::Model {
  Model() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    RESISTANCE,
    CAPACITANCE,
    NO_MODEL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c39a1b68d7a0549d, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Wire {
  Wire() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e648ee49c7422b35, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::WireType {
  WireType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86b4e1068d8abada, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Node {
  Node() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec1a6256b93f23b2, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::PIP {
  PIP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CONVENTIONAL,
    PSEUDO_CELLS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e5685b353ea35cdc, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::PseudoCell {
  PseudoCell() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8861e69646073e0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::WireConstantSources {
  WireConstantSources() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a02641a41287131, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParameterMapEntry {
  ParameterMapEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92bff2862c077906, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParameterMapRule {
  ParameterMapRule() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    COPY_VALUE,
    BIT_SLICE,
    TABLE_LOOKUP,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b528a4e2e79d0464, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::PrimToMacroExpansion {
  PrimToMacroExpansion() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ALWAYS,
    PARAMETERS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b09d1c80eebea3cd, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CellBelMapping {
  CellBelMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8c60449af8ad096, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CellBelPinEntry {
  CellBelPinEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a41b33a422768adb, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::SiteTypeBelEntry {
  SiteTypeBelEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(938d70a292310732, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CommonCellBelPinMaps {
  CommonCellBelPinMaps() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cba8e0da63fbe025, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParameterSiteTypeBelEntry {
  ParameterSiteTypeBelEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9136b5d44c8a3445, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParameterCellBelPinMaps {
  ParameterCellBelPinMaps() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6b97af047c5d120, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Package {
  Package() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PackagePin;
  struct Grade;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(abb5f1656e4ba5cc, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Package::PackagePin {
  PackagePin() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Site;
  struct Bel;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fca960714a85d74c, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Package::PackagePin::Site {
  Site() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_SITE,
    SITE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e6303441bc30e80d, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Package::PackagePin::Bel {
  Bel() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_BEL,
    BEL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de99aebdbcf60fff, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Package::Grade {
  Grade() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8bd7533ae1db2ff, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants {
  Constants() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SitePinConstantExceptions;
  struct SiteConstantSource;
  struct NodeConstantSource;
  typedef ::capnp::schemas::CellPinValue_901a42e38a6bf91d CellPinValue;

  struct DefaultCellConnection;
  struct DefaultCellConnections;
  struct GndNetName;
  struct VccNetName;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa44cf7e3e1f7efc, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::SitePinConstantExceptions {
  SitePinConstantExceptions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff33d859ad536739, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::SiteConstantSource {
  SiteConstantSource() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5387ebf3583de10, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::NodeConstantSource {
  NodeConstantSource() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1d288a7a4b43755, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::DefaultCellConnection {
  DefaultCellConnection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eee3857a1d631d24, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::DefaultCellConnections {
  DefaultCellConnections() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(933d2f79f195b31e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::GndNetName {
  GndNetName() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ANY_NAME,
    NAME,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(baabe42da161ec1c, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constants::VccNetName {
  VccNetName() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ANY_NAME,
    NAME,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e581c0d2fb651175, 4, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CellPinInversionParameter {
  CellPinInversionParameter() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INV_ONLY,
    PARAMETER,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(883e08341dca3990, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CellPinInversion {
  CellPinInversion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd81e36d06dde41d, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CellInversion {
  CellInversion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0d175f76ec0c4bd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::PinsDelay {
  PinsDelay() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f56e21c778d6b2b0, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::PinDelay {
  PinDelay() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_CLOCK,
    CLOCK_EDGE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b478411cbbbb4d5c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::NodeTiming {
  NodeTiming() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1f2b40cd83e61da, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::PIPTiming {
  PIPTiming() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd2ba5c82a218126, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModel {
  CornerModel() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Slow;
  struct Fast;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee019313d1ec4831, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModel::Slow {
  Slow() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_SLOW,
    SLOW,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88aa4e0c2f6e028c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModel::Fast {
  Fast() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_FAST,
    FAST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb1ec6427c3b7926, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModelValues {
  CornerModelValues() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Min;
  struct Typ;
  struct Max;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c99f38ba31009943, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModelValues::Min {
  Min() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_MIN,
    MIN,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9fa352f590c02b1a, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModelValues::Typ {
  Typ() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_TYP,
    TYP,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af660749366d59d5, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CornerModelValues::Max {
  Max() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_MAX,
    MAX,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb979d178994e708, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints {
  Constraints() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct State;
  struct Tag;
  struct RoutedTagPin;
  struct RoutedTag;
  struct RoutedTagPort;
  struct TagPair;
  struct TagStates;
  struct BELLocation;
  struct ConstraintLocation;
  struct CellConstraint;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e21901f504bc717e, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::State {
  State() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac2b62c93af1c8e8, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::Tag {
  Tag() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    SITE_TYPES,
    TILE_TYPES,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad0f7fe5de02e081, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::RoutedTagPin {
  RoutedTagPin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f90b60714406d6f9, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::RoutedTag {
  RoutedTag() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd5b634e7fddea73, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::RoutedTagPort {
  RoutedTagPort() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a05b1872487659c6, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::TagPair {
  TagPair() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TAG,
    ROUTED_TAG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eae03458512bf6e2, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::TagStates {
  TagStates() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TAG,
    ROUTED_TAG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6cba9543dd42a03, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::BELLocation {
  BELLocation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ANY_BEL,
    NAME,
    BELS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a65108b52c6eaed, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::ConstraintLocation {
  ConstraintLocation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    IMPLIES,
    REQUIRES,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa2f42f1fd8c6f56, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::Constraints::CellConstraint {
  CellConstraint() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CELL,
    CELLS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87c9d7c3d0639c8b, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::LutDefinitions {
  LutDefinitions() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct LutCell;
  struct LutBel;
  struct LutElement;
  struct LutElements;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b49e2f9bb7f59da2, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::LutDefinitions::LutCell {
  LutCell() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Equation;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3f069fe23e67786, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::LutDefinitions::LutCell::Equation {
  Equation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INIT_PARAM,
    INVALID,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8b3223f180dcbd3, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::LutDefinitions::LutBel {
  LutBel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c5e869e4a0bcd128, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::LutDefinitions::LutElement {
  LutElement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85f9eb7b03512d61, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::LutDefinitions::LutElements {
  LutElements() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd0000eca69e6144, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParameterDefinition {
  ParameterDefinition() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1a1aa36fb2caefa, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::CellParameterDefinition {
  CellParameterDefinition() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9e0311b631b2f4d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Device::ParameterDefinitions {
  ParameterDefinitions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf84c64902b1b278, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class HashSet::Reader {
public:
  typedef HashSet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ImplementationType getType() const;

  inline bool getHide() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HashSet::Builder {
public:
  typedef HashSet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ImplementationType getType();
  inline void setType( ::ImplementationType value);

  inline bool getHide();
  inline void setHide(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HashSet::Pipeline {
public:
  typedef HashSet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StringRef::Reader {
public:
  typedef StringRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StringRef::Builder {
public:
  typedef StringRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StringRef::Pipeline {
public:
  typedef StringRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SiteTypeRef::Reader {
public:
  typedef SiteTypeRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SiteTypeRef::Builder {
public:
  typedef SiteTypeRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SiteTypeRef::Pipeline {
public:
  typedef SiteTypeRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BELPinRef::Reader {
public:
  typedef BELPinRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

  inline  ::int32_t getDepth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BELPinRef::Builder {
public:
  typedef BELPinRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

  inline  ::int32_t getDepth();
  inline void setDepth( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BELPinRef::Pipeline {
public:
  typedef BELPinRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WireRef::Reader {
public:
  typedef WireRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

  inline  ::int32_t getDepth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WireRef::Builder {
public:
  typedef WireRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

  inline  ::int32_t getDepth();
  inline void setDepth( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WireRef::Pipeline {
public:
  typedef WireRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WireTypeRef::Reader {
public:
  typedef WireTypeRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WireTypeRef::Builder {
public:
  typedef WireTypeRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WireTypeRef::Pipeline {
public:
  typedef WireTypeRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TileTypeRef::Reader {
public:
  typedef TileTypeRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

  inline  ::int32_t getDepth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TileTypeRef::Builder {
public:
  typedef TileTypeRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

  inline  ::int32_t getDepth();
  inline void setDepth( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TileTypeRef::Pipeline {
public:
  typedef TileTypeRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PIPTimingRef::Reader {
public:
  typedef PIPTimingRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PIPTimingRef::Builder {
public:
  typedef PIPTimingRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PIPTimingRef::Pipeline {
public:
  typedef PIPTimingRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NodeTimingRef::Reader {
public:
  typedef NodeTimingRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NodeTimingRef::Builder {
public:
  typedef NodeTimingRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NodeTimingRef::Pipeline {
public:
  typedef NodeTimingRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Reader {
public:
  typedef Device Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasStrList() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getStrList() const;

  inline bool hasSiteTypeList() const;
  inline  ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Reader getSiteTypeList() const;

  inline bool hasTileTypeList() const;
  inline  ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Reader getTileTypeList() const;

  inline bool hasTileList() const;
  inline  ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Reader getTileList() const;

  inline bool hasWires() const;
  inline  ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Reader getWires() const;

  inline bool hasNodes() const;
  inline  ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Reader getNodes() const;

  inline bool hasPrimLibs() const;
  inline  ::LogicalNetlist::Netlist::Reader getPrimLibs() const;

  inline bool hasExceptionMap() const;
  inline  ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Reader getExceptionMap() const;

  inline bool hasCellBelMap() const;
  inline  ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Reader getCellBelMap() const;

  inline bool hasCellInversions() const;
  inline  ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Reader getCellInversions() const;

  inline bool hasPackages() const;
  inline  ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Reader getPackages() const;

  inline bool hasConstants() const;
  inline  ::DeviceResources::Device::Constants::Reader getConstants() const;

  inline bool hasConstraints() const;
  inline  ::DeviceResources::Device::Constraints::Reader getConstraints() const;

  inline bool hasLutDefinitions() const;
  inline  ::DeviceResources::Device::LutDefinitions::Reader getLutDefinitions() const;

  inline bool hasParameterDefs() const;
  inline  ::DeviceResources::Device::ParameterDefinitions::Reader getParameterDefs() const;

  inline bool hasWireTypes() const;
  inline  ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Reader getWireTypes() const;

  inline bool hasPipTimings() const;
  inline  ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Reader getPipTimings() const;

  inline bool hasNodeTimings() const;
  inline  ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Reader getNodeTimings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Builder {
public:
  typedef Device Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasStrList();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getStrList();
  inline void setStrList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setStrList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initStrList(unsigned int size);
  inline void adoptStrList(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownStrList();

  inline bool hasSiteTypeList();
  inline  ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Builder getSiteTypeList();
  inline void setSiteTypeList( ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Builder initSiteTypeList(unsigned int size);
  inline void adoptSiteTypeList(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>> disownSiteTypeList();

  inline bool hasTileTypeList();
  inline  ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Builder getTileTypeList();
  inline void setTileTypeList( ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Builder initTileTypeList(unsigned int size);
  inline void adoptTileTypeList(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>> disownTileTypeList();

  inline bool hasTileList();
  inline  ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Builder getTileList();
  inline void setTileList( ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Builder initTileList(unsigned int size);
  inline void adoptTileList(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>> disownTileList();

  inline bool hasWires();
  inline  ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Builder getWires();
  inline void setWires( ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Builder initWires(unsigned int size);
  inline void adoptWires(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>> disownWires();

  inline bool hasNodes();
  inline  ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Builder getNodes();
  inline void setNodes( ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Builder initNodes(unsigned int size);
  inline void adoptNodes(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>> disownNodes();

  inline bool hasPrimLibs();
  inline  ::LogicalNetlist::Netlist::Builder getPrimLibs();
  inline void setPrimLibs( ::LogicalNetlist::Netlist::Reader value);
  inline  ::LogicalNetlist::Netlist::Builder initPrimLibs();
  inline void adoptPrimLibs(::capnp::Orphan< ::LogicalNetlist::Netlist>&& value);
  inline ::capnp::Orphan< ::LogicalNetlist::Netlist> disownPrimLibs();

  inline bool hasExceptionMap();
  inline  ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Builder getExceptionMap();
  inline void setExceptionMap( ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Builder initExceptionMap(unsigned int size);
  inline void adoptExceptionMap(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>> disownExceptionMap();

  inline bool hasCellBelMap();
  inline  ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Builder getCellBelMap();
  inline void setCellBelMap( ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Builder initCellBelMap(unsigned int size);
  inline void adoptCellBelMap(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>> disownCellBelMap();

  inline bool hasCellInversions();
  inline  ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Builder getCellInversions();
  inline void setCellInversions( ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Builder initCellInversions(unsigned int size);
  inline void adoptCellInversions(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>> disownCellInversions();

  inline bool hasPackages();
  inline  ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Builder getPackages();
  inline void setPackages( ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Builder initPackages(unsigned int size);
  inline void adoptPackages(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>> disownPackages();

  inline bool hasConstants();
  inline  ::DeviceResources::Device::Constants::Builder getConstants();
  inline void setConstants( ::DeviceResources::Device::Constants::Reader value);
  inline  ::DeviceResources::Device::Constants::Builder initConstants();
  inline void adoptConstants(::capnp::Orphan< ::DeviceResources::Device::Constants>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::Constants> disownConstants();

  inline bool hasConstraints();
  inline  ::DeviceResources::Device::Constraints::Builder getConstraints();
  inline void setConstraints( ::DeviceResources::Device::Constraints::Reader value);
  inline  ::DeviceResources::Device::Constraints::Builder initConstraints();
  inline void adoptConstraints(::capnp::Orphan< ::DeviceResources::Device::Constraints>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::Constraints> disownConstraints();

  inline bool hasLutDefinitions();
  inline  ::DeviceResources::Device::LutDefinitions::Builder getLutDefinitions();
  inline void setLutDefinitions( ::DeviceResources::Device::LutDefinitions::Reader value);
  inline  ::DeviceResources::Device::LutDefinitions::Builder initLutDefinitions();
  inline void adoptLutDefinitions(::capnp::Orphan< ::DeviceResources::Device::LutDefinitions>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::LutDefinitions> disownLutDefinitions();

  inline bool hasParameterDefs();
  inline  ::DeviceResources::Device::ParameterDefinitions::Builder getParameterDefs();
  inline void setParameterDefs( ::DeviceResources::Device::ParameterDefinitions::Reader value);
  inline  ::DeviceResources::Device::ParameterDefinitions::Builder initParameterDefs();
  inline void adoptParameterDefs(::capnp::Orphan< ::DeviceResources::Device::ParameterDefinitions>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::ParameterDefinitions> disownParameterDefs();

  inline bool hasWireTypes();
  inline  ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Builder getWireTypes();
  inline void setWireTypes( ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Builder initWireTypes(unsigned int size);
  inline void adoptWireTypes(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>> disownWireTypes();

  inline bool hasPipTimings();
  inline  ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Builder getPipTimings();
  inline void setPipTimings( ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Builder initPipTimings(unsigned int size);
  inline void adoptPipTimings(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>> disownPipTimings();

  inline bool hasNodeTimings();
  inline  ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Builder getNodeTimings();
  inline void setNodeTimings( ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Builder initNodeTimings(unsigned int size);
  inline void adoptNodeTimings(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>> disownNodeTimings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Pipeline {
public:
  typedef Device Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::LogicalNetlist::Netlist::Pipeline getPrimLibs();
  inline  ::DeviceResources::Device::Constants::Pipeline getConstants();
  inline  ::DeviceResources::Device::Constraints::Pipeline getConstraints();
  inline  ::DeviceResources::Device::LutDefinitions::Pipeline getLutDefinitions();
  inline  ::DeviceResources::Device::ParameterDefinitions::Pipeline getParameterDefs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SiteType::Reader {
public:
  typedef SiteType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline bool hasBelPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Reader getBelPins() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Reader getPins() const;

  inline  ::uint32_t getLastInput() const;

  inline bool hasBels() const;
  inline  ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Reader getBels() const;

  inline bool hasSitePIPs() const;
  inline  ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Reader getSitePIPs() const;

  inline bool hasSiteWires() const;
  inline  ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Reader getSiteWires() const;

  inline bool hasAltSiteTypes() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getAltSiteTypes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SiteType::Builder {
public:
  typedef SiteType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline bool hasBelPins();
  inline  ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Builder getBelPins();
  inline void setBelPins( ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Builder initBelPins(unsigned int size);
  inline void adoptBelPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>> disownBelPins();

  inline bool hasPins();
  inline  ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Builder getPins();
  inline void setPins( ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>> disownPins();

  inline  ::uint32_t getLastInput();
  inline void setLastInput( ::uint32_t value);

  inline bool hasBels();
  inline  ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Builder getBels();
  inline void setBels( ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Builder initBels(unsigned int size);
  inline void adoptBels(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>> disownBels();

  inline bool hasSitePIPs();
  inline  ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Builder getSitePIPs();
  inline void setSitePIPs( ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Builder initSitePIPs(unsigned int size);
  inline void adoptSitePIPs(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>> disownSitePIPs();

  inline bool hasSiteWires();
  inline  ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Builder getSiteWires();
  inline void setSiteWires( ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Builder initSiteWires(unsigned int size);
  inline void adoptSiteWires(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>> disownSiteWires();

  inline bool hasAltSiteTypes();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getAltSiteTypes();
  inline void setAltSiteTypes( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAltSiteTypes(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initAltSiteTypes(unsigned int size);
  inline void adoptAltSiteTypes(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownAltSiteTypes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SiteType::Pipeline {
public:
  typedef SiteType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParentPins::Reader {
public:
  typedef ParentPins Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPins() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParentPins::Builder {
public:
  typedef ParentPins Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPins();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getPins();
  inline void setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPins(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParentPins::Pipeline {
public:
  typedef ParentPins Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SiteTypeInTileType::Reader {
public:
  typedef SiteTypeInTileType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPrimaryType() const;

  inline bool hasPrimaryPinsToTileWires() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getPrimaryPinsToTileWires() const;

  inline bool hasAltPinsToPrimaryPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Reader getAltPinsToPrimaryPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SiteTypeInTileType::Builder {
public:
  typedef SiteTypeInTileType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPrimaryType();
  inline void setPrimaryType( ::uint32_t value);

  inline bool hasPrimaryPinsToTileWires();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getPrimaryPinsToTileWires();
  inline void setPrimaryPinsToTileWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPrimaryPinsToTileWires(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initPrimaryPinsToTileWires(unsigned int size);
  inline void adoptPrimaryPinsToTileWires(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownPrimaryPinsToTileWires();

  inline bool hasAltPinsToPrimaryPins();
  inline  ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Builder getAltPinsToPrimaryPins();
  inline void setAltPinsToPrimaryPins( ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Builder initAltPinsToPrimaryPins(unsigned int size);
  inline void adoptAltPinsToPrimaryPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>> disownAltPinsToPrimaryPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SiteTypeInTileType::Pipeline {
public:
  typedef SiteTypeInTileType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::TileType::Reader {
public:
  typedef TileType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline bool hasSiteTypes() const;
  inline  ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Reader getSiteTypes() const;

  inline bool hasWires() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getWires() const;

  inline bool hasPips() const;
  inline  ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Reader getPips() const;

  inline bool hasConstants() const;
  inline  ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Reader getConstants() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::TileType::Builder {
public:
  typedef TileType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline bool hasSiteTypes();
  inline  ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Builder getSiteTypes();
  inline void setSiteTypes( ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Builder initSiteTypes(unsigned int size);
  inline void adoptSiteTypes(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>> disownSiteTypes();

  inline bool hasWires();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getWires();
  inline void setWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWires(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initWires(unsigned int size);
  inline void adoptWires(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownWires();

  inline bool hasPips();
  inline  ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Builder getPips();
  inline void setPips( ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Builder initPips(unsigned int size);
  inline void adoptPips(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>> disownPips();

  inline bool hasConstants();
  inline  ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Builder getConstants();
  inline void setConstants( ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Builder initConstants(unsigned int size);
  inline void adoptConstants(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>> disownConstants();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::TileType::Pipeline {
public:
  typedef TileType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::BELInverter::Reader {
public:
  typedef BELInverter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNonInvertingPin() const;

  inline  ::uint32_t getInvertingPin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::BELInverter::Builder {
public:
  typedef BELInverter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNonInvertingPin();
  inline void setNonInvertingPin( ::uint32_t value);

  inline  ::uint32_t getInvertingPin();
  inline void setInvertingPin( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::BELInverter::Pipeline {
public:
  typedef BELInverter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::BEL::Reader {
public:
  typedef BEL Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getName() const;

  inline  ::uint32_t getType() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getPins() const;

  inline  ::DeviceResources::Device::BELCategory getCategory() const;

  inline bool isNonInverting() const;
  inline  ::capnp::Void getNonInverting() const;

  inline bool isInverting() const;
  inline bool hasInverting() const;
  inline  ::DeviceResources::Device::BELInverter::Reader getInverting() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::BEL::Builder {
public:
  typedef BEL Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline bool hasPins();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getPins();
  inline void setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPins(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownPins();

  inline  ::DeviceResources::Device::BELCategory getCategory();
  inline void setCategory( ::DeviceResources::Device::BELCategory value);

  inline bool isNonInverting();
  inline  ::capnp::Void getNonInverting();
  inline void setNonInverting( ::capnp::Void value = ::capnp::VOID);

  inline bool isInverting();
  inline bool hasInverting();
  inline  ::DeviceResources::Device::BELInverter::Builder getInverting();
  inline void setInverting( ::DeviceResources::Device::BELInverter::Reader value);
  inline  ::DeviceResources::Device::BELInverter::Builder initInverting();
  inline void adoptInverting(::capnp::Orphan< ::DeviceResources::Device::BELInverter>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::BELInverter> disownInverting();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::BEL::Pipeline {
public:
  typedef BEL Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Site::Reader {
public:
  typedef Site Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::uint32_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Site::Builder {
public:
  typedef Site Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Site::Pipeline {
public:
  typedef Site Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Tile::Reader {
public:
  typedef Tile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::uint32_t getType() const;

  inline bool hasSites() const;
  inline  ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Reader getSites() const;

  inline  ::uint16_t getRow() const;

  inline  ::uint16_t getCol() const;

  inline  ::uint32_t getDeleted() const;

  inline bool hasSubTilesPrefices() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getSubTilesPrefices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Tile::Builder {
public:
  typedef Tile Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline bool hasSites();
  inline  ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Builder getSites();
  inline void setSites( ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Builder initSites(unsigned int size);
  inline void adoptSites(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>> disownSites();

  inline  ::uint16_t getRow();
  inline void setRow( ::uint16_t value);

  inline  ::uint16_t getCol();
  inline void setCol( ::uint16_t value);

  inline  ::uint32_t getDeleted();
  inline void setDeleted( ::uint32_t value);

  inline bool hasSubTilesPrefices();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getSubTilesPrefices();
  inline void setSubTilesPrefices( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSubTilesPrefices(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initSubTilesPrefices(unsigned int size);
  inline void adoptSubTilesPrefices(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownSubTilesPrefices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Tile::Pipeline {
public:
  typedef Tile Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::BELPin::Reader {
public:
  typedef BELPin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::LogicalNetlist::Netlist::Direction getDir() const;

  inline  ::uint32_t getBel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::BELPin::Builder {
public:
  typedef BELPin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::LogicalNetlist::Netlist::Direction getDir();
  inline void setDir( ::LogicalNetlist::Netlist::Direction value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::BELPin::Pipeline {
public:
  typedef BELPin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SiteWire::Reader {
public:
  typedef SiteWire Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SiteWire::Builder {
public:
  typedef SiteWire Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline bool hasPins();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getPins();
  inline void setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPins(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SiteWire::Pipeline {
public:
  typedef SiteWire Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SitePIP::Reader {
public:
  typedef SitePIP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getInpin() const;

  inline  ::uint32_t getOutpin() const;

  inline bool hasDelay() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SitePIP::Builder {
public:
  typedef SitePIP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getInpin();
  inline void setInpin( ::uint32_t value);

  inline  ::uint32_t getOutpin();
  inline void setOutpin( ::uint32_t value);

  inline bool hasDelay();
  inline  ::DeviceResources::Device::CornerModel::Builder getDelay();
  inline void setDelay( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownDelay();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SitePIP::Pipeline {
public:
  typedef SitePIP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DeviceResources::Device::CornerModel::Pipeline getDelay();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SitePin::Reader {
public:
  typedef SitePin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::LogicalNetlist::Netlist::Direction getDir() const;

  inline  ::uint32_t getBelpin() const;

  inline typename Model::Reader getModel() const;

  inline bool hasDelay() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SitePin::Builder {
public:
  typedef SitePin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::LogicalNetlist::Netlist::Direction getDir();
  inline void setDir( ::LogicalNetlist::Netlist::Direction value);

  inline  ::uint32_t getBelpin();
  inline void setBelpin( ::uint32_t value);

  inline typename Model::Builder getModel();
  inline typename Model::Builder initModel();

  inline bool hasDelay();
  inline  ::DeviceResources::Device::CornerModel::Builder getDelay();
  inline void setDelay( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initDelay();
  inline void adoptDelay(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownDelay();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SitePin::Pipeline {
public:
  typedef SitePin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Model::Pipeline getModel();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getDelay();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SitePin::Model::Reader {
public:
  typedef Model Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isResistance() const;
  inline bool hasResistance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getResistance() const;

  inline bool isCapacitance() const;
  inline bool hasCapacitance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getCapacitance() const;

  inline bool isNoModel() const;
  inline  ::capnp::Void getNoModel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SitePin::Model::Builder {
public:
  typedef Model Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isResistance();
  inline bool hasResistance();
  inline  ::DeviceResources::Device::CornerModel::Builder getResistance();
  inline void setResistance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initResistance();
  inline void adoptResistance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownResistance();

  inline bool isCapacitance();
  inline bool hasCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Builder getCapacitance();
  inline void setCapacitance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initCapacitance();
  inline void adoptCapacitance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownCapacitance();

  inline bool isNoModel();
  inline  ::capnp::Void getNoModel();
  inline void setNoModel( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SitePin::Model::Pipeline {
public:
  typedef Model Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Wire::Reader {
public:
  typedef Wire Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTile() const;

  inline  ::uint32_t getWire() const;

  inline  ::uint32_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Wire::Builder {
public:
  typedef Wire Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTile();
  inline void setTile( ::uint32_t value);

  inline  ::uint32_t getWire();
  inline void setWire( ::uint32_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Wire::Pipeline {
public:
  typedef Wire Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::WireType::Reader {
public:
  typedef WireType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::DeviceResources::Device::WireCategory getCategory() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::WireType::Builder {
public:
  typedef WireType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::DeviceResources::Device::WireCategory getCategory();
  inline void setCategory( ::DeviceResources::Device::WireCategory value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::WireType::Pipeline {
public:
  typedef WireType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Node::Reader {
public:
  typedef Node Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWires() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getWires() const;

  inline  ::uint32_t getNodeTiming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Node::Builder {
public:
  typedef Node Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWires();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getWires();
  inline void setWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWires(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initWires(unsigned int size);
  inline void adoptWires(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownWires();

  inline  ::uint32_t getNodeTiming();
  inline void setNodeTiming( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Node::Pipeline {
public:
  typedef Node Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::PIP::Reader {
public:
  typedef PIP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getWire0() const;

  inline  ::uint32_t getWire1() const;

  inline bool getDirectional() const;

  inline bool getBuffered20() const;

  inline bool getBuffered21() const;

  inline bool isConventional() const;
  inline  ::capnp::Void getConventional() const;

  inline bool isPseudoCells() const;
  inline bool hasPseudoCells() const;
  inline  ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Reader getPseudoCells() const;

  inline  ::uint16_t getSubTile() const;

  inline  ::uint32_t getTiming() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::PIP::Builder {
public:
  typedef PIP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getWire0();
  inline void setWire0( ::uint32_t value);

  inline  ::uint32_t getWire1();
  inline void setWire1( ::uint32_t value);

  inline bool getDirectional();
  inline void setDirectional(bool value);

  inline bool getBuffered20();
  inline void setBuffered20(bool value);

  inline bool getBuffered21();
  inline void setBuffered21(bool value);

  inline bool isConventional();
  inline  ::capnp::Void getConventional();
  inline void setConventional( ::capnp::Void value = ::capnp::VOID);

  inline bool isPseudoCells();
  inline bool hasPseudoCells();
  inline  ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Builder getPseudoCells();
  inline void setPseudoCells( ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Builder initPseudoCells(unsigned int size);
  inline void adoptPseudoCells(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>> disownPseudoCells();

  inline  ::uint16_t getSubTile();
  inline void setSubTile( ::uint16_t value);

  inline  ::uint32_t getTiming();
  inline void setTiming( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::PIP::Pipeline {
public:
  typedef PIP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::PseudoCell::Reader {
public:
  typedef PseudoCell Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBel() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::PseudoCell::Builder {
public:
  typedef PseudoCell Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline bool hasPins();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getPins();
  inline void setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPins(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::PseudoCell::Pipeline {
public:
  typedef PseudoCell Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::WireConstantSources::Reader {
public:
  typedef WireConstantSources Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasWires() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getWires() const;

  inline  ::DeviceResources::Device::ConstantType getConstant() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::WireConstantSources::Builder {
public:
  typedef WireConstantSources Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasWires();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getWires();
  inline void setWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setWires(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initWires(unsigned int size);
  inline void adoptWires(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownWires();

  inline  ::DeviceResources::Device::ConstantType getConstant();
  inline void setConstant( ::DeviceResources::Device::ConstantType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::WireConstantSources::Pipeline {
public:
  typedef WireConstantSources Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParameterMapEntry::Reader {
public:
  typedef ParameterMapEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrom() const;

  inline  ::uint32_t getTo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParameterMapEntry::Builder {
public:
  typedef ParameterMapEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFrom();
  inline void setFrom( ::uint32_t value);

  inline  ::uint32_t getTo();
  inline void setTo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParameterMapEntry::Pipeline {
public:
  typedef ParameterMapEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParameterMapRule::Reader {
public:
  typedef ParameterMapRule Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getPrimParam() const;

  inline  ::uint32_t getInstName() const;

  inline  ::uint32_t getInstParam() const;

  inline bool isCopyValue() const;
  inline  ::capnp::Void getCopyValue() const;

  inline bool isBitSlice() const;
  inline bool hasBitSlice() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getBitSlice() const;

  inline bool isTableLookup() const;
  inline bool hasTableLookup() const;
  inline  ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Reader getTableLookup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParameterMapRule::Builder {
public:
  typedef ParameterMapRule Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getPrimParam();
  inline void setPrimParam( ::uint32_t value);

  inline  ::uint32_t getInstName();
  inline void setInstName( ::uint32_t value);

  inline  ::uint32_t getInstParam();
  inline void setInstParam( ::uint32_t value);

  inline bool isCopyValue();
  inline  ::capnp::Void getCopyValue();
  inline void setCopyValue( ::capnp::Void value = ::capnp::VOID);

  inline bool isBitSlice();
  inline bool hasBitSlice();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getBitSlice();
  inline void setBitSlice( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBitSlice(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initBitSlice(unsigned int size);
  inline void adoptBitSlice(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownBitSlice();

  inline bool isTableLookup();
  inline bool hasTableLookup();
  inline  ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Builder getTableLookup();
  inline void setTableLookup( ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Builder initTableLookup(unsigned int size);
  inline void adoptTableLookup(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>> disownTableLookup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParameterMapRule::Pipeline {
public:
  typedef ParameterMapRule Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::PrimToMacroExpansion::Reader {
public:
  typedef PrimToMacroExpansion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getPrimName() const;

  inline  ::uint32_t getMacroName() const;

  inline bool isAlways() const;
  inline  ::capnp::Void getAlways() const;

  inline bool isParameters() const;
  inline bool hasParameters() const;
  inline  ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Reader getParameters() const;

  inline bool hasParamMapping() const;
  inline  ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Reader getParamMapping() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::PrimToMacroExpansion::Builder {
public:
  typedef PrimToMacroExpansion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getPrimName();
  inline void setPrimName( ::uint32_t value);

  inline  ::uint32_t getMacroName();
  inline void setMacroName( ::uint32_t value);

  inline bool isAlways();
  inline  ::capnp::Void getAlways();
  inline void setAlways( ::capnp::Void value = ::capnp::VOID);

  inline bool isParameters();
  inline bool hasParameters();
  inline  ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>> disownParameters();

  inline bool hasParamMapping();
  inline  ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Builder getParamMapping();
  inline void setParamMapping( ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Builder initParamMapping(unsigned int size);
  inline void adoptParamMapping(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>> disownParamMapping();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::PrimToMacroExpansion::Pipeline {
public:
  typedef PrimToMacroExpansion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CellBelMapping::Reader {
public:
  typedef CellBelMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell() const;

  inline bool hasCommonPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader getCommonPins() const;

  inline bool hasParameterPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader getParameterPins() const;

  inline bool hasPinsDelay() const;
  inline  ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Reader getPinsDelay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CellBelMapping::Builder {
public:
  typedef CellBelMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell();
  inline void setCell( ::uint32_t value);

  inline bool hasCommonPins();
  inline  ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder getCommonPins();
  inline void setCommonPins( ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder initCommonPins(unsigned int size);
  inline void adoptCommonPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>> disownCommonPins();

  inline bool hasParameterPins();
  inline  ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder getParameterPins();
  inline void setParameterPins( ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder initParameterPins(unsigned int size);
  inline void adoptParameterPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>> disownParameterPins();

  inline bool hasPinsDelay();
  inline  ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Builder getPinsDelay();
  inline void setPinsDelay( ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Builder initPinsDelay(unsigned int size);
  inline void adoptPinsDelay(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>> disownPinsDelay();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CellBelMapping::Pipeline {
public:
  typedef CellBelMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CellBelPinEntry::Reader {
public:
  typedef CellBelPinEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellPin() const;

  inline  ::uint32_t getBelPin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CellBelPinEntry::Builder {
public:
  typedef CellBelPinEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellPin();
  inline void setCellPin( ::uint32_t value);

  inline  ::uint32_t getBelPin();
  inline void setBelPin( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CellBelPinEntry::Pipeline {
public:
  typedef CellBelPinEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::SiteTypeBelEntry::Reader {
public:
  typedef SiteTypeBelEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSiteType() const;

  inline bool hasBels() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getBels() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::SiteTypeBelEntry::Builder {
public:
  typedef SiteTypeBelEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSiteType();
  inline void setSiteType( ::uint32_t value);

  inline bool hasBels();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getBels();
  inline void setBels( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBels(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initBels(unsigned int size);
  inline void adoptBels(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownBels();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::SiteTypeBelEntry::Pipeline {
public:
  typedef SiteTypeBelEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CommonCellBelPinMaps::Reader {
public:
  typedef CommonCellBelPinMaps Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSiteTypes() const;
  inline  ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader getSiteTypes() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader getPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CommonCellBelPinMaps::Builder {
public:
  typedef CommonCellBelPinMaps Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSiteTypes();
  inline  ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder getSiteTypes();
  inline void setSiteTypes( ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder initSiteTypes(unsigned int size);
  inline void adoptSiteTypes(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>> disownSiteTypes();

  inline bool hasPins();
  inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder getPins();
  inline void setPins( ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>> disownPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CommonCellBelPinMaps::Pipeline {
public:
  typedef CommonCellBelPinMaps Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParameterSiteTypeBelEntry::Reader {
public:
  typedef ParameterSiteTypeBelEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBel() const;

  inline  ::uint32_t getSiteType() const;

  inline bool hasParameter() const;
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader getParameter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParameterSiteTypeBelEntry::Builder {
public:
  typedef ParameterSiteTypeBelEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline  ::uint32_t getSiteType();
  inline void setSiteType( ::uint32_t value);

  inline bool hasParameter();
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder getParameter();
  inline void setParameter( ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader value);
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder initParameter();
  inline void adoptParameter(::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry>&& value);
  inline ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry> disownParameter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParameterSiteTypeBelEntry::Pipeline {
public:
  typedef ParameterSiteTypeBelEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Pipeline getParameter();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParameterCellBelPinMaps::Reader {
public:
  typedef ParameterCellBelPinMaps Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParametersSiteTypes() const;
  inline  ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader getParametersSiteTypes() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader getPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParameterCellBelPinMaps::Builder {
public:
  typedef ParameterCellBelPinMaps Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParametersSiteTypes();
  inline  ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder getParametersSiteTypes();
  inline void setParametersSiteTypes( ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder initParametersSiteTypes(unsigned int size);
  inline void adoptParametersSiteTypes(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>> disownParametersSiteTypes();

  inline bool hasPins();
  inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder getPins();
  inline void setPins( ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>> disownPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParameterCellBelPinMaps::Pipeline {
public:
  typedef ParameterCellBelPinMaps Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Package::Reader {
public:
  typedef Package Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline bool hasPackagePins() const;
  inline  ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Reader getPackagePins() const;

  inline bool hasGrades() const;
  inline  ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Reader getGrades() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Package::Builder {
public:
  typedef Package Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline bool hasPackagePins();
  inline  ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Builder getPackagePins();
  inline void setPackagePins( ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Builder initPackagePins(unsigned int size);
  inline void adoptPackagePins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>> disownPackagePins();

  inline bool hasGrades();
  inline  ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Builder getGrades();
  inline void setGrades( ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Builder initGrades(unsigned int size);
  inline void adoptGrades(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>> disownGrades();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Package::Pipeline {
public:
  typedef Package Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Package::PackagePin::Reader {
public:
  typedef PackagePin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPackagePin() const;

  inline typename Site::Reader getSite() const;

  inline typename Bel::Reader getBel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Package::PackagePin::Builder {
public:
  typedef PackagePin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPackagePin();
  inline void setPackagePin( ::uint32_t value);

  inline typename Site::Builder getSite();
  inline typename Site::Builder initSite();

  inline typename Bel::Builder getBel();
  inline typename Bel::Builder initBel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Package::PackagePin::Pipeline {
public:
  typedef PackagePin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Site::Pipeline getSite();
  inline typename Bel::Pipeline getBel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Package::PackagePin::Site::Reader {
public:
  typedef Site Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoSite() const;
  inline  ::capnp::Void getNoSite() const;

  inline bool isSite() const;
  inline  ::uint32_t getSite() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Package::PackagePin::Site::Builder {
public:
  typedef Site Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoSite();
  inline  ::capnp::Void getNoSite();
  inline void setNoSite( ::capnp::Void value = ::capnp::VOID);

  inline bool isSite();
  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Package::PackagePin::Site::Pipeline {
public:
  typedef Site Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Package::PackagePin::Bel::Reader {
public:
  typedef Bel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoBel() const;
  inline  ::capnp::Void getNoBel() const;

  inline bool isBel() const;
  inline  ::uint32_t getBel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Package::PackagePin::Bel::Builder {
public:
  typedef Bel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoBel();
  inline  ::capnp::Void getNoBel();
  inline void setNoBel( ::capnp::Void value = ::capnp::VOID);

  inline bool isBel();
  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Package::PackagePin::Bel::Pipeline {
public:
  typedef Bel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Package::Grade::Reader {
public:
  typedef Grade Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::uint32_t getSpeedGrade() const;

  inline  ::uint32_t getTemperatureGrade() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Package::Grade::Builder {
public:
  typedef Grade Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::uint32_t getSpeedGrade();
  inline void setSpeedGrade( ::uint32_t value);

  inline  ::uint32_t getTemperatureGrade();
  inline void setTemperatureGrade( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Package::Grade::Pipeline {
public:
  typedef Grade Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::Reader {
public:
  typedef Constants Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::DeviceResources::Device::ConstantType getDefaultBestConstant() const;

  inline bool hasBestConstantExceptions() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Reader getBestConstantExceptions() const;

  inline bool hasSiteSources() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Reader getSiteSources() const;

  inline bool hasNodeSources() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Reader getNodeSources() const;

  inline  ::uint32_t getGndCellType() const;

  inline  ::uint32_t getGndCellPin() const;

  inline  ::uint32_t getVccCellType() const;

  inline  ::uint32_t getVccCellPin() const;

  inline typename GndNetName::Reader getGndNetName() const;

  inline typename VccNetName::Reader getVccNetName() const;

  inline bool hasDefaultCellConns() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Reader getDefaultCellConns() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::Builder {
public:
  typedef Constants Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::DeviceResources::Device::ConstantType getDefaultBestConstant();
  inline void setDefaultBestConstant( ::DeviceResources::Device::ConstantType value);

  inline bool hasBestConstantExceptions();
  inline  ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Builder getBestConstantExceptions();
  inline void setBestConstantExceptions( ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Builder initBestConstantExceptions(unsigned int size);
  inline void adoptBestConstantExceptions(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>> disownBestConstantExceptions();

  inline bool hasSiteSources();
  inline  ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Builder getSiteSources();
  inline void setSiteSources( ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Builder initSiteSources(unsigned int size);
  inline void adoptSiteSources(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>> disownSiteSources();

  inline bool hasNodeSources();
  inline  ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Builder getNodeSources();
  inline void setNodeSources( ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Builder initNodeSources(unsigned int size);
  inline void adoptNodeSources(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>> disownNodeSources();

  inline  ::uint32_t getGndCellType();
  inline void setGndCellType( ::uint32_t value);

  inline  ::uint32_t getGndCellPin();
  inline void setGndCellPin( ::uint32_t value);

  inline  ::uint32_t getVccCellType();
  inline void setVccCellType( ::uint32_t value);

  inline  ::uint32_t getVccCellPin();
  inline void setVccCellPin( ::uint32_t value);

  inline typename GndNetName::Builder getGndNetName();
  inline typename GndNetName::Builder initGndNetName();

  inline typename VccNetName::Builder getVccNetName();
  inline typename VccNetName::Builder initVccNetName();

  inline bool hasDefaultCellConns();
  inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Builder getDefaultCellConns();
  inline void setDefaultCellConns( ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Builder initDefaultCellConns(unsigned int size);
  inline void adoptDefaultCellConns(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>> disownDefaultCellConns();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::Pipeline {
public:
  typedef Constants Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename GndNetName::Pipeline getGndNetName();
  inline typename VccNetName::Pipeline getVccNetName();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::SitePinConstantExceptions::Reader {
public:
  typedef SitePinConstantExceptions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSiteType() const;

  inline  ::uint32_t getSitePin() const;

  inline  ::DeviceResources::Device::ConstantType getBestConstant() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::SitePinConstantExceptions::Builder {
public:
  typedef SitePinConstantExceptions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSiteType();
  inline void setSiteType( ::uint32_t value);

  inline  ::uint32_t getSitePin();
  inline void setSitePin( ::uint32_t value);

  inline  ::DeviceResources::Device::ConstantType getBestConstant();
  inline void setBestConstant( ::DeviceResources::Device::ConstantType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::SitePinConstantExceptions::Pipeline {
public:
  typedef SitePinConstantExceptions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::SiteConstantSource::Reader {
public:
  typedef SiteConstantSource Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSiteType() const;

  inline  ::uint32_t getBel() const;

  inline  ::uint32_t getBelPin() const;

  inline  ::DeviceResources::Device::ConstantType getConstant() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::SiteConstantSource::Builder {
public:
  typedef SiteConstantSource Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSiteType();
  inline void setSiteType( ::uint32_t value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline  ::uint32_t getBelPin();
  inline void setBelPin( ::uint32_t value);

  inline  ::DeviceResources::Device::ConstantType getConstant();
  inline void setConstant( ::DeviceResources::Device::ConstantType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::SiteConstantSource::Pipeline {
public:
  typedef SiteConstantSource Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::NodeConstantSource::Reader {
public:
  typedef NodeConstantSource Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTile() const;

  inline  ::uint32_t getWire() const;

  inline  ::DeviceResources::Device::ConstantType getConstant() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::NodeConstantSource::Builder {
public:
  typedef NodeConstantSource Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTile();
  inline void setTile( ::uint32_t value);

  inline  ::uint32_t getWire();
  inline void setWire( ::uint32_t value);

  inline  ::DeviceResources::Device::ConstantType getConstant();
  inline void setConstant( ::DeviceResources::Device::ConstantType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::NodeConstantSource::Pipeline {
public:
  typedef NodeConstantSource Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::DefaultCellConnection::Reader {
public:
  typedef DefaultCellConnection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::DeviceResources::Device::Constants::CellPinValue getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::DefaultCellConnection::Builder {
public:
  typedef DefaultCellConnection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::DeviceResources::Device::Constants::CellPinValue getValue();
  inline void setValue( ::DeviceResources::Device::Constants::CellPinValue value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::DefaultCellConnection::Pipeline {
public:
  typedef DefaultCellConnection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::DefaultCellConnections::Reader {
public:
  typedef DefaultCellConnections Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellType() const;

  inline bool hasPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Reader getPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::DefaultCellConnections::Builder {
public:
  typedef DefaultCellConnections Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellType();
  inline void setCellType( ::uint32_t value);

  inline bool hasPins();
  inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Builder getPins();
  inline void setPins( ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Builder initPins(unsigned int size);
  inline void adoptPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>> disownPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::DefaultCellConnections::Pipeline {
public:
  typedef DefaultCellConnections Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::GndNetName::Reader {
public:
  typedef GndNetName Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isAnyName() const;
  inline  ::capnp::Void getAnyName() const;

  inline bool isName() const;
  inline  ::uint32_t getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::GndNetName::Builder {
public:
  typedef GndNetName Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isAnyName();
  inline  ::capnp::Void getAnyName();
  inline void setAnyName( ::capnp::Void value = ::capnp::VOID);

  inline bool isName();
  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::GndNetName::Pipeline {
public:
  typedef GndNetName Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constants::VccNetName::Reader {
public:
  typedef VccNetName Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isAnyName() const;
  inline  ::capnp::Void getAnyName() const;

  inline bool isName() const;
  inline  ::uint32_t getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constants::VccNetName::Builder {
public:
  typedef VccNetName Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isAnyName();
  inline  ::capnp::Void getAnyName();
  inline void setAnyName( ::capnp::Void value = ::capnp::VOID);

  inline bool isName();
  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constants::VccNetName::Pipeline {
public:
  typedef VccNetName Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CellPinInversionParameter::Reader {
public:
  typedef CellPinInversionParameter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInvOnly() const;
  inline  ::capnp::Void getInvOnly() const;

  inline bool isParameter() const;
  inline bool hasParameter() const;
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader getParameter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CellPinInversionParameter::Builder {
public:
  typedef CellPinInversionParameter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInvOnly();
  inline  ::capnp::Void getInvOnly();
  inline void setInvOnly( ::capnp::Void value = ::capnp::VOID);

  inline bool isParameter();
  inline bool hasParameter();
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder getParameter();
  inline void setParameter( ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader value);
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder initParameter();
  inline void adoptParameter(::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry>&& value);
  inline ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry> disownParameter();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CellPinInversionParameter::Pipeline {
public:
  typedef CellPinInversionParameter Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CellPinInversion::Reader {
public:
  typedef CellPinInversion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellPin() const;

  inline bool hasNotInverting() const;
  inline  ::DeviceResources::Device::CellPinInversionParameter::Reader getNotInverting() const;

  inline bool hasInverting() const;
  inline  ::DeviceResources::Device::CellPinInversionParameter::Reader getInverting() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CellPinInversion::Builder {
public:
  typedef CellPinInversion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellPin();
  inline void setCellPin( ::uint32_t value);

  inline bool hasNotInverting();
  inline  ::DeviceResources::Device::CellPinInversionParameter::Builder getNotInverting();
  inline void setNotInverting( ::DeviceResources::Device::CellPinInversionParameter::Reader value);
  inline  ::DeviceResources::Device::CellPinInversionParameter::Builder initNotInverting();
  inline void adoptNotInverting(::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter> disownNotInverting();

  inline bool hasInverting();
  inline  ::DeviceResources::Device::CellPinInversionParameter::Builder getInverting();
  inline void setInverting( ::DeviceResources::Device::CellPinInversionParameter::Reader value);
  inline  ::DeviceResources::Device::CellPinInversionParameter::Builder initInverting();
  inline void adoptInverting(::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter> disownInverting();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CellPinInversion::Pipeline {
public:
  typedef CellPinInversion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DeviceResources::Device::CellPinInversionParameter::Pipeline getNotInverting();
  inline  ::DeviceResources::Device::CellPinInversionParameter::Pipeline getInverting();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CellInversion::Reader {
public:
  typedef CellInversion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell() const;

  inline bool hasCellPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Reader getCellPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CellInversion::Builder {
public:
  typedef CellInversion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCell();
  inline void setCell( ::uint32_t value);

  inline bool hasCellPins();
  inline  ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Builder getCellPins();
  inline void setCellPins( ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Builder initCellPins(unsigned int size);
  inline void adoptCellPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>> disownCellPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CellInversion::Pipeline {
public:
  typedef CellInversion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::PinsDelay::Reader {
public:
  typedef PinsDelay Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFirstPin() const;
  inline  ::DeviceResources::Device::PinDelay::Reader getFirstPin() const;

  inline bool hasSecondPin() const;
  inline  ::DeviceResources::Device::PinDelay::Reader getSecondPin() const;

  inline bool hasCornerModel() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getCornerModel() const;

  inline  ::DeviceResources::Device::PinsDelayType getPinsDelayType() const;

  inline  ::uint32_t getSite() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::PinsDelay::Builder {
public:
  typedef PinsDelay Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFirstPin();
  inline  ::DeviceResources::Device::PinDelay::Builder getFirstPin();
  inline void setFirstPin( ::DeviceResources::Device::PinDelay::Reader value);
  inline  ::DeviceResources::Device::PinDelay::Builder initFirstPin();
  inline void adoptFirstPin(::capnp::Orphan< ::DeviceResources::Device::PinDelay>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::PinDelay> disownFirstPin();

  inline bool hasSecondPin();
  inline  ::DeviceResources::Device::PinDelay::Builder getSecondPin();
  inline void setSecondPin( ::DeviceResources::Device::PinDelay::Reader value);
  inline  ::DeviceResources::Device::PinDelay::Builder initSecondPin();
  inline void adoptSecondPin(::capnp::Orphan< ::DeviceResources::Device::PinDelay>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::PinDelay> disownSecondPin();

  inline bool hasCornerModel();
  inline  ::DeviceResources::Device::CornerModel::Builder getCornerModel();
  inline void setCornerModel( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initCornerModel();
  inline void adoptCornerModel(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownCornerModel();

  inline  ::DeviceResources::Device::PinsDelayType getPinsDelayType();
  inline void setPinsDelayType( ::DeviceResources::Device::PinsDelayType value);

  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::PinsDelay::Pipeline {
public:
  typedef PinsDelay Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DeviceResources::Device::PinDelay::Pipeline getFirstPin();
  inline  ::DeviceResources::Device::PinDelay::Pipeline getSecondPin();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getCornerModel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::PinDelay::Reader {
public:
  typedef PinDelay Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getPin() const;

  inline bool isNoClock() const;
  inline  ::capnp::Void getNoClock() const;

  inline bool isClockEdge() const;
  inline  ::DeviceResources::Device::ClockEdge getClockEdge() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::PinDelay::Builder {
public:
  typedef PinDelay Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getPin();
  inline void setPin( ::uint32_t value);

  inline bool isNoClock();
  inline  ::capnp::Void getNoClock();
  inline void setNoClock( ::capnp::Void value = ::capnp::VOID);

  inline bool isClockEdge();
  inline  ::DeviceResources::Device::ClockEdge getClockEdge();
  inline void setClockEdge( ::DeviceResources::Device::ClockEdge value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::PinDelay::Pipeline {
public:
  typedef PinDelay Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::NodeTiming::Reader {
public:
  typedef NodeTiming Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCapacitance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getCapacitance() const;

  inline bool hasResistance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getResistance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::NodeTiming::Builder {
public:
  typedef NodeTiming Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Builder getCapacitance();
  inline void setCapacitance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initCapacitance();
  inline void adoptCapacitance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownCapacitance();

  inline bool hasResistance();
  inline  ::DeviceResources::Device::CornerModel::Builder getResistance();
  inline void setResistance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initResistance();
  inline void adoptResistance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownResistance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::NodeTiming::Pipeline {
public:
  typedef NodeTiming Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DeviceResources::Device::CornerModel::Pipeline getCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getResistance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::PIPTiming::Reader {
public:
  typedef PIPTiming Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInputCapacitance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getInputCapacitance() const;

  inline bool hasInternalCapacitance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getInternalCapacitance() const;

  inline bool hasInternalDelay() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getInternalDelay() const;

  inline bool hasOutputResistance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getOutputResistance() const;

  inline bool hasOutputCapacitance() const;
  inline  ::DeviceResources::Device::CornerModel::Reader getOutputCapacitance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::PIPTiming::Builder {
public:
  typedef PIPTiming Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInputCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Builder getInputCapacitance();
  inline void setInputCapacitance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initInputCapacitance();
  inline void adoptInputCapacitance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownInputCapacitance();

  inline bool hasInternalCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Builder getInternalCapacitance();
  inline void setInternalCapacitance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initInternalCapacitance();
  inline void adoptInternalCapacitance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownInternalCapacitance();

  inline bool hasInternalDelay();
  inline  ::DeviceResources::Device::CornerModel::Builder getInternalDelay();
  inline void setInternalDelay( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initInternalDelay();
  inline void adoptInternalDelay(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownInternalDelay();

  inline bool hasOutputResistance();
  inline  ::DeviceResources::Device::CornerModel::Builder getOutputResistance();
  inline void setOutputResistance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initOutputResistance();
  inline void adoptOutputResistance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownOutputResistance();

  inline bool hasOutputCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Builder getOutputCapacitance();
  inline void setOutputCapacitance( ::DeviceResources::Device::CornerModel::Reader value);
  inline  ::DeviceResources::Device::CornerModel::Builder initOutputCapacitance();
  inline void adoptOutputCapacitance(::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> disownOutputCapacitance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::PIPTiming::Pipeline {
public:
  typedef PIPTiming Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DeviceResources::Device::CornerModel::Pipeline getInputCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getInternalCapacitance();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getInternalDelay();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getOutputResistance();
  inline  ::DeviceResources::Device::CornerModel::Pipeline getOutputCapacitance();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModel::Reader {
public:
  typedef CornerModel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Slow::Reader getSlow() const;

  inline typename Fast::Reader getFast() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModel::Builder {
public:
  typedef CornerModel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Slow::Builder getSlow();
  inline typename Slow::Builder initSlow();

  inline typename Fast::Builder getFast();
  inline typename Fast::Builder initFast();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModel::Pipeline {
public:
  typedef CornerModel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Slow::Pipeline getSlow();
  inline typename Fast::Pipeline getFast();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModel::Slow::Reader {
public:
  typedef Slow Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoSlow() const;
  inline  ::capnp::Void getNoSlow() const;

  inline bool isSlow() const;
  inline bool hasSlow() const;
  inline  ::DeviceResources::Device::CornerModelValues::Reader getSlow() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModel::Slow::Builder {
public:
  typedef Slow Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoSlow();
  inline  ::capnp::Void getNoSlow();
  inline void setNoSlow( ::capnp::Void value = ::capnp::VOID);

  inline bool isSlow();
  inline bool hasSlow();
  inline  ::DeviceResources::Device::CornerModelValues::Builder getSlow();
  inline void setSlow( ::DeviceResources::Device::CornerModelValues::Reader value);
  inline  ::DeviceResources::Device::CornerModelValues::Builder initSlow();
  inline void adoptSlow(::capnp::Orphan< ::DeviceResources::Device::CornerModelValues>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModelValues> disownSlow();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModel::Slow::Pipeline {
public:
  typedef Slow Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModel::Fast::Reader {
public:
  typedef Fast Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoFast() const;
  inline  ::capnp::Void getNoFast() const;

  inline bool isFast() const;
  inline bool hasFast() const;
  inline  ::DeviceResources::Device::CornerModelValues::Reader getFast() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModel::Fast::Builder {
public:
  typedef Fast Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoFast();
  inline  ::capnp::Void getNoFast();
  inline void setNoFast( ::capnp::Void value = ::capnp::VOID);

  inline bool isFast();
  inline bool hasFast();
  inline  ::DeviceResources::Device::CornerModelValues::Builder getFast();
  inline void setFast( ::DeviceResources::Device::CornerModelValues::Reader value);
  inline  ::DeviceResources::Device::CornerModelValues::Builder initFast();
  inline void adoptFast(::capnp::Orphan< ::DeviceResources::Device::CornerModelValues>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::CornerModelValues> disownFast();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModel::Fast::Pipeline {
public:
  typedef Fast Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModelValues::Reader {
public:
  typedef CornerModelValues Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Min::Reader getMin() const;

  inline typename Typ::Reader getTyp() const;

  inline typename Max::Reader getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModelValues::Builder {
public:
  typedef CornerModelValues Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Min::Builder getMin();
  inline typename Min::Builder initMin();

  inline typename Typ::Builder getTyp();
  inline typename Typ::Builder initTyp();

  inline typename Max::Builder getMax();
  inline typename Max::Builder initMax();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModelValues::Pipeline {
public:
  typedef CornerModelValues Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Min::Pipeline getMin();
  inline typename Typ::Pipeline getTyp();
  inline typename Max::Pipeline getMax();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModelValues::Min::Reader {
public:
  typedef Min Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoMin() const;
  inline  ::capnp::Void getNoMin() const;

  inline bool isMin() const;
  inline float getMin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModelValues::Min::Builder {
public:
  typedef Min Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoMin();
  inline  ::capnp::Void getNoMin();
  inline void setNoMin( ::capnp::Void value = ::capnp::VOID);

  inline bool isMin();
  inline float getMin();
  inline void setMin(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModelValues::Min::Pipeline {
public:
  typedef Min Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModelValues::Typ::Reader {
public:
  typedef Typ Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoTyp() const;
  inline  ::capnp::Void getNoTyp() const;

  inline bool isTyp() const;
  inline float getTyp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModelValues::Typ::Builder {
public:
  typedef Typ Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoTyp();
  inline  ::capnp::Void getNoTyp();
  inline void setNoTyp( ::capnp::Void value = ::capnp::VOID);

  inline bool isTyp();
  inline float getTyp();
  inline void setTyp(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModelValues::Typ::Pipeline {
public:
  typedef Typ Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CornerModelValues::Max::Reader {
public:
  typedef Max Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNoMax() const;
  inline  ::capnp::Void getNoMax() const;

  inline bool isMax() const;
  inline float getMax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CornerModelValues::Max::Builder {
public:
  typedef Max Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNoMax();
  inline  ::capnp::Void getNoMax();
  inline void setNoMax( ::capnp::Void value = ::capnp::VOID);

  inline bool isMax();
  inline float getMax();
  inline void setMax(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CornerModelValues::Max::Pipeline {
public:
  typedef Max Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::Reader {
public:
  typedef Constraints Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTags() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Reader getTags() const;

  inline bool hasRoutedTags() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Reader getRoutedTags() const;

  inline bool hasCellConstraints() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Reader getCellConstraints() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::Builder {
public:
  typedef Constraints Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTags();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Builder getTags();
  inline void setTags( ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Builder initTags(unsigned int size);
  inline void adoptTags(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>> disownTags();

  inline bool hasRoutedTags();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Builder getRoutedTags();
  inline void setRoutedTags( ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Builder initRoutedTags(unsigned int size);
  inline void adoptRoutedTags(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>> disownRoutedTags();

  inline bool hasCellConstraints();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Builder getCellConstraints();
  inline void setCellConstraints( ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Builder initCellConstraints(unsigned int size);
  inline void adoptCellConstraints(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>> disownCellConstraints();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::Pipeline {
public:
  typedef Constraints Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::State::Reader {
public:
  typedef State Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasState() const;
  inline  ::capnp::Text::Reader getState() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::State::Builder {
public:
  typedef State Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasState();
  inline  ::capnp::Text::Builder getState();
  inline void setState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownState();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::State::Pipeline {
public:
  typedef State Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::Tag::Reader {
public:
  typedef Tag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline bool hasDefault() const;
  inline  ::capnp::Text::Reader getDefault() const;

  inline bool isSiteTypes() const;
  inline bool hasSiteTypes() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSiteTypes() const;

  inline bool isTileTypes() const;
  inline bool hasTileTypes() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getTileTypes() const;

  inline bool hasStates() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Reader getStates() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::Tag::Builder {
public:
  typedef Tag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline bool hasDefault();
  inline  ::capnp::Text::Builder getDefault();
  inline void setDefault( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDefault(unsigned int size);
  inline void adoptDefault(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDefault();

  inline bool isSiteTypes();
  inline bool hasSiteTypes();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSiteTypes();
  inline void setSiteTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSiteTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSiteTypes(unsigned int size);
  inline void adoptSiteTypes(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSiteTypes();

  inline bool isTileTypes();
  inline bool hasTileTypes();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getTileTypes();
  inline void setTileTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setTileTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initTileTypes(unsigned int size);
  inline void adoptTileTypes(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownTileTypes();

  inline bool hasStates();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Builder getStates();
  inline void setStates( ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Builder initStates(unsigned int size);
  inline void adoptStates(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>> disownStates();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::Tag::Pipeline {
public:
  typedef Tag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::RoutedTagPin::Reader {
public:
  typedef RoutedTagPin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPin() const;
  inline  ::capnp::Text::Reader getPin() const;

  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::RoutedTagPin::Builder {
public:
  typedef RoutedTagPin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPin();
  inline  ::capnp::Text::Builder getPin();
  inline void setPin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPin(unsigned int size);
  inline void adoptPin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPin();

  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::RoutedTagPin::Pipeline {
public:
  typedef RoutedTagPin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::RoutedTag::Reader {
public:
  typedef RoutedTag Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRoutedTag() const;
  inline  ::capnp::Text::Reader getRoutedTag() const;

  inline bool hasRoutingBel() const;
  inline  ::capnp::Text::Reader getRoutingBel() const;

  inline bool hasBelPins() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Reader getBelPins() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::RoutedTag::Builder {
public:
  typedef RoutedTag Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRoutedTag();
  inline  ::capnp::Text::Builder getRoutedTag();
  inline void setRoutedTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoutedTag(unsigned int size);
  inline void adoptRoutedTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoutedTag();

  inline bool hasRoutingBel();
  inline  ::capnp::Text::Builder getRoutingBel();
  inline void setRoutingBel( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoutingBel(unsigned int size);
  inline void adoptRoutingBel(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoutingBel();

  inline bool hasBelPins();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Builder getBelPins();
  inline void setBelPins( ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Builder initBelPins(unsigned int size);
  inline void adoptBelPins(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>> disownBelPins();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::RoutedTag::Pipeline {
public:
  typedef RoutedTag Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::RoutedTagPort::Reader {
public:
  typedef RoutedTagPort Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool hasPort() const;
  inline  ::capnp::Text::Reader getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::RoutedTagPort::Builder {
public:
  typedef RoutedTagPort Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool hasPort();
  inline  ::capnp::Text::Builder getPort();
  inline void setPort( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPort(unsigned int size);
  inline void adoptPort(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPort();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::RoutedTagPort::Pipeline {
public:
  typedef RoutedTagPort Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::TagPair::Reader {
public:
  typedef TagPair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTag() const;
  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool isRoutedTag() const;
  inline bool hasRoutedTag() const;
  inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Reader getRoutedTag() const;

  inline bool hasState() const;
  inline  ::capnp::Text::Reader getState() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::TagPair::Builder {
public:
  typedef TagPair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTag();
  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool isRoutedTag();
  inline bool hasRoutedTag();
  inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder getRoutedTag();
  inline void setRoutedTag( ::DeviceResources::Device::Constraints::RoutedTagPort::Reader value);
  inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder initRoutedTag();
  inline void adoptRoutedTag(::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort> disownRoutedTag();

  inline bool hasState();
  inline  ::capnp::Text::Builder getState();
  inline void setState( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initState(unsigned int size);
  inline void adoptState(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownState();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::TagPair::Pipeline {
public:
  typedef TagPair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::TagStates::Reader {
public:
  typedef TagStates Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTag() const;
  inline bool hasTag() const;
  inline  ::capnp::Text::Reader getTag() const;

  inline bool isRoutedTag() const;
  inline bool hasRoutedTag() const;
  inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Reader getRoutedTag() const;

  inline bool hasStates() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getStates() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::TagStates::Builder {
public:
  typedef TagStates Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTag();
  inline bool hasTag();
  inline  ::capnp::Text::Builder getTag();
  inline void setTag( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTag(unsigned int size);
  inline void adoptTag(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTag();

  inline bool isRoutedTag();
  inline bool hasRoutedTag();
  inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder getRoutedTag();
  inline void setRoutedTag( ::DeviceResources::Device::Constraints::RoutedTagPort::Reader value);
  inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder initRoutedTag();
  inline void adoptRoutedTag(::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort> disownRoutedTag();

  inline bool hasStates();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getStates();
  inline void setStates( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setStates(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initStates(unsigned int size);
  inline void adoptStates(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownStates();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::TagStates::Pipeline {
public:
  typedef TagStates Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::BELLocation::Reader {
public:
  typedef BELLocation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isAnyBel() const;
  inline  ::capnp::Void getAnyBel() const;

  inline bool isName() const;
  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool isBels() const;
  inline bool hasBels() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getBels() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::BELLocation::Builder {
public:
  typedef BELLocation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isAnyBel();
  inline  ::capnp::Void getAnyBel();
  inline void setAnyBel( ::capnp::Void value = ::capnp::VOID);

  inline bool isName();
  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool isBels();
  inline bool hasBels();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getBels();
  inline void setBels( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setBels(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initBels(unsigned int size);
  inline void adoptBels(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownBels();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::BELLocation::Pipeline {
public:
  typedef BELLocation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::ConstraintLocation::Reader {
public:
  typedef ConstraintLocation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool hasSiteTypes() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getSiteTypes() const;

  inline bool hasBel() const;
  inline  ::DeviceResources::Device::Constraints::BELLocation::Reader getBel() const;

  inline bool isImplies() const;
  inline bool hasImplies() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Reader getImplies() const;

  inline bool isRequires() const;
  inline bool hasRequires() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Reader getRequires() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::ConstraintLocation::Builder {
public:
  typedef ConstraintLocation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool hasSiteTypes();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getSiteTypes();
  inline void setSiteTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setSiteTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initSiteTypes(unsigned int size);
  inline void adoptSiteTypes(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownSiteTypes();

  inline bool hasBel();
  inline  ::DeviceResources::Device::Constraints::BELLocation::Builder getBel();
  inline void setBel( ::DeviceResources::Device::Constraints::BELLocation::Reader value);
  inline  ::DeviceResources::Device::Constraints::BELLocation::Builder initBel();
  inline void adoptBel(::capnp::Orphan< ::DeviceResources::Device::Constraints::BELLocation>&& value);
  inline ::capnp::Orphan< ::DeviceResources::Device::Constraints::BELLocation> disownBel();

  inline bool isImplies();
  inline bool hasImplies();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Builder getImplies();
  inline void setImplies( ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Builder initImplies(unsigned int size);
  inline void adoptImplies(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>> disownImplies();

  inline bool isRequires();
  inline bool hasRequires();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Builder getRequires();
  inline void setRequires( ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Builder initRequires(unsigned int size);
  inline void adoptRequires(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>> disownRequires();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::ConstraintLocation::Pipeline {
public:
  typedef ConstraintLocation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::DeviceResources::Device::Constraints::BELLocation::Pipeline getBel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::Constraints::CellConstraint::Reader {
public:
  typedef CellConstraint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isCell() const;
  inline bool hasCell() const;
  inline  ::capnp::Text::Reader getCell() const;

  inline bool isCells() const;
  inline bool hasCells() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getCells() const;

  inline bool hasLocations() const;
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Reader getLocations() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::Constraints::CellConstraint::Builder {
public:
  typedef CellConstraint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isCell();
  inline bool hasCell();
  inline  ::capnp::Text::Builder getCell();
  inline void setCell( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCell(unsigned int size);
  inline void adoptCell(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCell();

  inline bool isCells();
  inline bool hasCells();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getCells();
  inline void setCells( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setCells(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initCells(unsigned int size);
  inline void adoptCells(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownCells();

  inline bool hasLocations();
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Builder getLocations();
  inline void setLocations( ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Builder initLocations(unsigned int size);
  inline void adoptLocations(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>> disownLocations();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::Constraints::CellConstraint::Pipeline {
public:
  typedef CellConstraint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::LutDefinitions::Reader {
public:
  typedef LutDefinitions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLutCells() const;
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Reader getLutCells() const;

  inline bool hasLutElements() const;
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Reader getLutElements() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::LutDefinitions::Builder {
public:
  typedef LutDefinitions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLutCells();
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Builder getLutCells();
  inline void setLutCells( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Builder initLutCells(unsigned int size);
  inline void adoptLutCells(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>> disownLutCells();

  inline bool hasLutElements();
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Builder getLutElements();
  inline void setLutElements( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Builder initLutElements(unsigned int size);
  inline void adoptLutElements(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>> disownLutElements();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::LutDefinitions::Pipeline {
public:
  typedef LutDefinitions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::LutDefinitions::LutCell::Reader {
public:
  typedef LutCell Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCell() const;
  inline  ::capnp::Text::Reader getCell() const;

  inline bool hasInputPins() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getInputPins() const;

  inline typename Equation::Reader getEquation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::LutDefinitions::LutCell::Builder {
public:
  typedef LutCell Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCell();
  inline  ::capnp::Text::Builder getCell();
  inline void setCell( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCell(unsigned int size);
  inline void adoptCell(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCell();

  inline bool hasInputPins();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getInputPins();
  inline void setInputPins( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setInputPins(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initInputPins(unsigned int size);
  inline void adoptInputPins(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownInputPins();

  inline typename Equation::Builder getEquation();
  inline typename Equation::Builder initEquation();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::LutDefinitions::LutCell::Pipeline {
public:
  typedef LutCell Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Equation::Pipeline getEquation();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::LutDefinitions::LutCell::Equation::Reader {
public:
  typedef Equation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInitParam() const;
  inline bool hasInitParam() const;
  inline  ::capnp::Text::Reader getInitParam() const;

  inline bool isInvalid() const;
  inline  ::capnp::Void getInvalid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::LutDefinitions::LutCell::Equation::Builder {
public:
  typedef Equation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInitParam();
  inline bool hasInitParam();
  inline  ::capnp::Text::Builder getInitParam();
  inline void setInitParam( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInitParam(unsigned int size);
  inline void adoptInitParam(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInitParam();

  inline bool isInvalid();
  inline  ::capnp::Void getInvalid();
  inline void setInvalid( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::LutDefinitions::LutCell::Equation::Pipeline {
public:
  typedef Equation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::LutDefinitions::LutBel::Reader {
public:
  typedef LutBel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasInputPins() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getInputPins() const;

  inline bool hasOutputPin() const;
  inline  ::capnp::Text::Reader getOutputPin() const;

  inline  ::int8_t getLowBit() const;

  inline  ::int8_t getHighBit() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::LutDefinitions::LutBel::Builder {
public:
  typedef LutBel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasInputPins();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getInputPins();
  inline void setInputPins( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setInputPins(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initInputPins(unsigned int size);
  inline void adoptInputPins(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownInputPins();

  inline bool hasOutputPin();
  inline  ::capnp::Text::Builder getOutputPin();
  inline void setOutputPin( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initOutputPin(unsigned int size);
  inline void adoptOutputPin(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownOutputPin();

  inline  ::int8_t getLowBit();
  inline void setLowBit( ::int8_t value);

  inline  ::int8_t getHighBit();
  inline void setHighBit( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::LutDefinitions::LutBel::Pipeline {
public:
  typedef LutBel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::LutDefinitions::LutElement::Reader {
public:
  typedef LutElement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getWidth() const;

  inline bool hasBels() const;
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Reader getBels() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::LutDefinitions::LutElement::Builder {
public:
  typedef LutElement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getWidth();
  inline void setWidth( ::int8_t value);

  inline bool hasBels();
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Builder getBels();
  inline void setBels( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Builder initBels(unsigned int size);
  inline void adoptBels(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>> disownBels();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::LutDefinitions::LutElement::Pipeline {
public:
  typedef LutElement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::LutDefinitions::LutElements::Reader {
public:
  typedef LutElements Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSite() const;
  inline  ::capnp::Text::Reader getSite() const;

  inline bool hasLuts() const;
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Reader getLuts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::LutDefinitions::LutElements::Builder {
public:
  typedef LutElements Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSite();
  inline  ::capnp::Text::Builder getSite();
  inline void setSite( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSite(unsigned int size);
  inline void adoptSite(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSite();

  inline bool hasLuts();
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Builder getLuts();
  inline void setLuts( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Builder initLuts(unsigned int size);
  inline void adoptLuts(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>> disownLuts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::LutDefinitions::LutElements::Pipeline {
public:
  typedef LutElements Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParameterDefinition::Reader {
public:
  typedef ParameterDefinition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline  ::DeviceResources::Device::ParameterFormat getFormat() const;

  inline bool hasDefault() const;
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader getDefault() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParameterDefinition::Builder {
public:
  typedef ParameterDefinition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline  ::DeviceResources::Device::ParameterFormat getFormat();
  inline void setFormat( ::DeviceResources::Device::ParameterFormat value);

  inline bool hasDefault();
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder getDefault();
  inline void setDefault( ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader value);
  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder initDefault();
  inline void adoptDefault(::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry>&& value);
  inline ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry> disownDefault();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParameterDefinition::Pipeline {
public:
  typedef ParameterDefinition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Pipeline getDefault();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::CellParameterDefinition::Reader {
public:
  typedef CellParameterDefinition Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellType() const;

  inline bool hasParameters() const;
  inline  ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Reader getParameters() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::CellParameterDefinition::Builder {
public:
  typedef CellParameterDefinition Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellType();
  inline void setCellType( ::uint32_t value);

  inline bool hasParameters();
  inline  ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Builder getParameters();
  inline void setParameters( ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Builder initParameters(unsigned int size);
  inline void adoptParameters(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>> disownParameters();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::CellParameterDefinition::Pipeline {
public:
  typedef CellParameterDefinition Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Device::ParameterDefinitions::Reader {
public:
  typedef ParameterDefinitions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCells() const;
  inline  ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Reader getCells() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Device::ParameterDefinitions::Builder {
public:
  typedef ParameterDefinitions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCells();
  inline  ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Builder getCells();
  inline void setCells( ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Builder initCells(unsigned int size);
  inline void adoptCells(::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>> disownCells();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Device::ParameterDefinitions::Pipeline {
public:
  typedef ParameterDefinitions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::ImplementationType HashSet::Reader::getType() const {
  return _reader.getDataField< ::ImplementationType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ImplementationType HashSet::Builder::getType() {
  return _builder.getDataField< ::ImplementationType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HashSet::Builder::setType( ::ImplementationType value) {
  _builder.setDataField< ::ImplementationType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HashSet::Reader::getHide() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, true);
}

inline bool HashSet::Builder::getHide() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, true);
}
inline void HashSet::Builder::setHide(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, true);
}

inline  ::ReferenceType StringRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}

inline  ::ReferenceType StringRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}
inline void StringRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool StringRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StringRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StringRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_b8d7b4e9185c7735 + 48, 7);
}
inline  ::capnp::Text::Builder StringRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_b8d7b4e9185c7735 + 48, 7);
}
inline void StringRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StringRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StringRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StringRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ReferenceType SiteTypeRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ReferenceType SiteTypeRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SiteTypeRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SiteTypeRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SiteTypeRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SiteTypeRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_99f437f74d975d45 + 49, 12);
}
inline  ::capnp::Text::Builder SiteTypeRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_99f437f74d975d45 + 49, 12);
}
inline void SiteTypeRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SiteTypeRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SiteTypeRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SiteTypeRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ReferenceType BELPinRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 2u);
}

inline  ::ReferenceType BELPinRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 2u);
}
inline void BELPinRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 2u);
}

inline bool BELPinRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BELPinRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BELPinRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_ad951a871b67c8bd + 55, 7);
}
inline  ::capnp::Text::Builder BELPinRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_ad951a871b67c8bd + 55, 7);
}
inline void BELPinRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BELPinRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BELPinRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BELPinRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t BELPinRef::Reader::getDepth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1);
}

inline  ::int32_t BELPinRef::Builder::getDepth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1);
}
inline void BELPinRef::Builder::setDepth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1);
}

inline  ::ReferenceType WireRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 2u);
}

inline  ::ReferenceType WireRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 2u);
}
inline void WireRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 2u);
}

inline bool WireRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WireRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WireRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9bbb1fc47d97e0b3 + 55, 5);
}
inline  ::capnp::Text::Builder WireRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9bbb1fc47d97e0b3 + 55, 5);
}
inline void WireRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WireRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WireRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WireRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t WireRef::Reader::getDepth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1);
}

inline  ::int32_t WireRef::Builder::getDepth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1);
}
inline void WireRef::Builder::setDepth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1);
}

inline  ::ReferenceType WireTypeRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}

inline  ::ReferenceType WireTypeRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}
inline void WireTypeRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool WireTypeRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WireTypeRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WireTypeRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_dffd65117e9f8280 + 49, 9);
}
inline  ::capnp::Text::Builder WireTypeRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_dffd65117e9f8280 + 49, 9);
}
inline void WireTypeRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WireTypeRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WireTypeRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WireTypeRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ReferenceType TileTypeRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 2u);
}

inline  ::ReferenceType TileTypeRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 2u);
}
inline void TileTypeRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 2u);
}

inline bool TileTypeRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TileTypeRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TileTypeRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_e2d8f70cc95c539d + 56, 12);
}
inline  ::capnp::Text::Builder TileTypeRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_e2d8f70cc95c539d + 56, 12);
}
inline void TileTypeRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TileTypeRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TileTypeRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TileTypeRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TileTypeRef::Reader::getDepth() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1);
}

inline  ::int32_t TileTypeRef::Builder::getDepth() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1);
}
inline void TileTypeRef::Builder::setDepth( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1);
}

inline  ::ReferenceType PIPTimingRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}

inline  ::ReferenceType PIPTimingRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}
inline void PIPTimingRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool PIPTimingRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PIPTimingRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PIPTimingRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_844f2256240b4117 + 49, 10);
}
inline  ::capnp::Text::Builder PIPTimingRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_844f2256240b4117 + 49, 10);
}
inline void PIPTimingRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PIPTimingRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PIPTimingRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PIPTimingRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ReferenceType NodeTimingRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}

inline  ::ReferenceType NodeTimingRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}
inline void NodeTimingRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool NodeTimingRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NodeTimingRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NodeTimingRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_e0e8bff66f5abb7f + 49, 11);
}
inline  ::capnp::Text::Builder NodeTimingRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_e0e8bff66f5abb7f + 49, 11);
}
inline void NodeTimingRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NodeTimingRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NodeTimingRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NodeTimingRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasStrList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasStrList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Reader::getStrList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Builder::getStrList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Builder::setStrList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Device::Builder::setStrList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Builder::initStrList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptStrList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Builder::disownStrList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasSiteTypeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasSiteTypeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getSiteTypeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getSiteTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Builder::setSiteTypeList( ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initSiteTypeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptSiteTypeList(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>> Device::Builder::disownSiteTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasTileTypeList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasTileTypeList() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getTileTypeList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getTileTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::Builder::setTileTypeList( ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initTileTypeList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptTileTypeList(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>> Device::Builder::disownTileTypeList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::TileType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasTileList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasTileList() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getTileList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getTileList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Device::Builder::setTileList( ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initTileList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptTileList(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>> Device::Builder::disownTileList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Tile,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasWires() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasWires() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getWires() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Device::Builder::setWires( ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initWires(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptWires(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>> Device::Builder::disownWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Wire,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasNodes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasNodes() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getNodes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Device::Builder::setNodes( ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initNodes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptNodes(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>> Device::Builder::disownNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Node,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasPrimLibs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasPrimLibs() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::LogicalNetlist::Netlist::Reader Device::Reader::getPrimLibs() const {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::LogicalNetlist::Netlist::Builder Device::Builder::getPrimLibs() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::LogicalNetlist::Netlist::Pipeline Device::Pipeline::getPrimLibs() {
  return  ::LogicalNetlist::Netlist::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void Device::Builder::setPrimLibs( ::LogicalNetlist::Netlist::Reader value) {
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::LogicalNetlist::Netlist::Builder Device::Builder::initPrimLibs() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void Device::Builder::adoptPrimLibs(
    ::capnp::Orphan< ::LogicalNetlist::Netlist>&& value) {
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LogicalNetlist::Netlist> Device::Builder::disownPrimLibs() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasExceptionMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasExceptionMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getExceptionMap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getExceptionMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void Device::Builder::setExceptionMap( ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initExceptionMap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptExceptionMap(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>> Device::Builder::disownExceptionMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PrimToMacroExpansion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasCellBelMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasCellBelMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getCellBelMap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getCellBelMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void Device::Builder::setCellBelMap( ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initCellBelMap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptCellBelMap(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>> Device::Builder::disownCellBelMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelMapping,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasCellInversions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasCellInversions() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getCellInversions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getCellInversions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void Device::Builder::setCellInversions( ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initCellInversions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptCellInversions(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>> Device::Builder::disownCellInversions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellInversion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasPackages() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasPackages() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getPackages() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void Device::Builder::setPackages( ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initPackages(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptPackages(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>> Device::Builder::disownPackages() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasConstants() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasConstants() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::Constants::Reader Device::Reader::getConstants() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constants>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::Constants::Builder Device::Builder::getConstants() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constants>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::Constants::Pipeline Device::Pipeline::getConstants() {
  return  ::DeviceResources::Device::Constants::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void Device::Builder::setConstants( ::DeviceResources::Device::Constants::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constants>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::Constants::Builder Device::Builder::initConstants() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constants>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void Device::Builder::adoptConstants(
    ::capnp::Orphan< ::DeviceResources::Device::Constants>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constants>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::Constants> Device::Builder::disownConstants() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constants>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasConstraints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasConstraints() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::Constraints::Reader Device::Reader::getConstraints() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::Constraints::Builder Device::Builder::getConstraints() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::Constraints::Pipeline Device::Pipeline::getConstraints() {
  return  ::DeviceResources::Device::Constraints::Pipeline(_typeless.getPointerField(13));
}
#endif  // !CAPNP_LITE
inline void Device::Builder::setConstraints( ::DeviceResources::Device::Constraints::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::Constraints::Builder Device::Builder::initConstraints() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void Device::Builder::adoptConstraints(
    ::capnp::Orphan< ::DeviceResources::Device::Constraints>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::Constraints> Device::Builder::disownConstraints() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasLutDefinitions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasLutDefinitions() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::LutDefinitions::Reader Device::Reader::getLutDefinitions() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::LutDefinitions>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::LutDefinitions::Builder Device::Builder::getLutDefinitions() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::LutDefinitions>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::LutDefinitions::Pipeline Device::Pipeline::getLutDefinitions() {
  return  ::DeviceResources::Device::LutDefinitions::Pipeline(_typeless.getPointerField(14));
}
#endif  // !CAPNP_LITE
inline void Device::Builder::setLutDefinitions( ::DeviceResources::Device::LutDefinitions::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::LutDefinitions>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::LutDefinitions::Builder Device::Builder::initLutDefinitions() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::LutDefinitions>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void Device::Builder::adoptLutDefinitions(
    ::capnp::Orphan< ::DeviceResources::Device::LutDefinitions>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::LutDefinitions>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::LutDefinitions> Device::Builder::disownLutDefinitions() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::LutDefinitions>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasParameterDefs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasParameterDefs() {
  return !_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::ParameterDefinitions::Reader Device::Reader::getParameterDefs() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::ParameterDefinitions>::get(_reader.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::ParameterDefinitions::Builder Device::Builder::getParameterDefs() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::ParameterDefinitions>::get(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::ParameterDefinitions::Pipeline Device::Pipeline::getParameterDefs() {
  return  ::DeviceResources::Device::ParameterDefinitions::Pipeline(_typeless.getPointerField(15));
}
#endif  // !CAPNP_LITE
inline void Device::Builder::setParameterDefs( ::DeviceResources::Device::ParameterDefinitions::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::ParameterDefinitions>::set(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::ParameterDefinitions::Builder Device::Builder::initParameterDefs() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::ParameterDefinitions>::init(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}
inline void Device::Builder::adoptParameterDefs(
    ::capnp::Orphan< ::DeviceResources::Device::ParameterDefinitions>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::ParameterDefinitions>::adopt(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::ParameterDefinitions> Device::Builder::disownParameterDefs() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::ParameterDefinitions>::disown(_builder.getPointerField(
      ::capnp::bounded<15>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasWireTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasWireTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getWireTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getWireTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}
inline void Device::Builder::setWireTypes( ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initWireTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptWireTypes(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>> Device::Builder::disownWireTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<16>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasPipTimings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasPipTimings() {
  return !_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getPipTimings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getPipTimings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}
inline void Device::Builder::setPipTimings( ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initPipTimings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptPipTimings(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>> Device::Builder::disownPipTimings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIPTiming,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<17>() * ::capnp::POINTERS));
}

inline bool Device::Reader::hasNodeTimings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Builder::hasNodeTimings() {
  return !_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Reader Device::Reader::getNodeTimings() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Builder Device::Builder::getNodeTimings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}
inline void Device::Builder::setNodeTimings( ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>::Builder Device::Builder::initNodeTimings(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), size);
}
inline void Device::Builder::adoptNodeTimings(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>> Device::Builder::disownNodeTimings() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::NodeTiming,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<18>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::SiteType::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SiteType::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SiteType::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::SiteType::Reader::hasBelPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteType::Builder::hasBelPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Reader Device::SiteType::Reader::getBelPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::getBelPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SiteType::Builder::setBelPins( ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::initBelPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::SiteType::Builder::adoptBelPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>> Device::SiteType::Builder::disownBelPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BELPin,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::SiteType::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteType::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Reader Device::SiteType::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::SiteType::Builder::setPins( ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::SiteType::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>> Device::SiteType::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePin,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::SiteType::Reader::getLastInput() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SiteType::Builder::getLastInput() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::SiteType::Builder::setLastInput( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::SiteType::Reader::hasBels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteType::Builder::hasBels() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Reader Device::SiteType::Reader::getBels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::getBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::SiteType::Builder::setBels( ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::initBels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::SiteType::Builder::adoptBels(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>> Device::SiteType::Builder::disownBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::BEL,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::SiteType::Reader::hasSitePIPs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteType::Builder::hasSitePIPs() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Reader Device::SiteType::Reader::getSitePIPs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::getSitePIPs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::SiteType::Builder::setSitePIPs( ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::initSitePIPs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Device::SiteType::Builder::adoptSitePIPs(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>> Device::SiteType::Builder::disownSitePIPs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SitePIP,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Device::SiteType::Reader::hasSiteWires() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteType::Builder::hasSiteWires() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Reader Device::SiteType::Reader::getSiteWires() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::getSiteWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Device::SiteType::Builder::setSiteWires( ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>::Builder Device::SiteType::Builder::initSiteWires(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Device::SiteType::Builder::adoptSiteWires(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>> Device::SiteType::Builder::disownSiteWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteWire,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Device::SiteType::Reader::hasAltSiteTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteType::Builder::hasAltSiteTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::SiteType::Reader::getAltSiteTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteType::Builder::getAltSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Device::SiteType::Builder::setAltSiteTypes( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void Device::SiteType::Builder::setAltSiteTypes(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteType::Builder::initAltSiteTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void Device::SiteType::Builder::adoptAltSiteTypes(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::SiteType::Builder::disownAltSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Device::ParentPins::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParentPins::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::ParentPins::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::ParentPins::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParentPins::Builder::setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::ParentPins::Builder::setPins(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::ParentPins::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::ParentPins::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::ParentPins::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::SiteTypeInTileType::Reader::getPrimaryType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SiteTypeInTileType::Builder::getPrimaryType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SiteTypeInTileType::Builder::setPrimaryType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::SiteTypeInTileType::Reader::hasPrimaryPinsToTileWires() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteTypeInTileType::Builder::hasPrimaryPinsToTileWires() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::SiteTypeInTileType::Reader::getPrimaryPinsToTileWires() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteTypeInTileType::Builder::getPrimaryPinsToTileWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SiteTypeInTileType::Builder::setPrimaryPinsToTileWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::SiteTypeInTileType::Builder::setPrimaryPinsToTileWires(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteTypeInTileType::Builder::initPrimaryPinsToTileWires(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::SiteTypeInTileType::Builder::adoptPrimaryPinsToTileWires(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::SiteTypeInTileType::Builder::disownPrimaryPinsToTileWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::SiteTypeInTileType::Reader::hasAltPinsToPrimaryPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteTypeInTileType::Builder::hasAltPinsToPrimaryPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Reader Device::SiteTypeInTileType::Reader::getAltPinsToPrimaryPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Builder Device::SiteTypeInTileType::Builder::getAltPinsToPrimaryPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::SiteTypeInTileType::Builder::setAltPinsToPrimaryPins( ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>::Builder Device::SiteTypeInTileType::Builder::initAltPinsToPrimaryPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::SiteTypeInTileType::Builder::adoptAltPinsToPrimaryPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>> Device::SiteTypeInTileType::Builder::disownAltPinsToPrimaryPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParentPins,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::TileType::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::TileType::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::TileType::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::TileType::Reader::hasSiteTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::TileType::Builder::hasSiteTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Reader Device::TileType::Reader::getSiteTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Builder Device::TileType::Builder::getSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::TileType::Builder::setSiteTypes( ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>::Builder Device::TileType::Builder::initSiteTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::TileType::Builder::adoptSiteTypes(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>> Device::TileType::Builder::disownSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeInTileType,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::TileType::Reader::hasWires() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::TileType::Builder::hasWires() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::TileType::Reader::getWires() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::TileType::Builder::getWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::TileType::Builder::setWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Device::TileType::Builder::setWires(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::TileType::Builder::initWires(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::TileType::Builder::adoptWires(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::TileType::Builder::disownWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::TileType::Reader::hasPips() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::TileType::Builder::hasPips() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Reader Device::TileType::Reader::getPips() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Builder Device::TileType::Builder::getPips() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::TileType::Builder::setPips( ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>::Builder Device::TileType::Builder::initPips(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::TileType::Builder::adoptPips(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>> Device::TileType::Builder::disownPips() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PIP,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::TileType::Reader::hasConstants() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::TileType::Builder::hasConstants() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Reader Device::TileType::Reader::getConstants() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Builder Device::TileType::Builder::getConstants() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::TileType::Builder::setConstants( ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>::Builder Device::TileType::Builder::initConstants(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Device::TileType::Builder::adoptConstants(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>> Device::TileType::Builder::disownConstants() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::WireConstantSources,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::BELInverter::Reader::getNonInvertingPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BELInverter::Builder::getNonInvertingPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::BELInverter::Builder::setNonInvertingPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::BELInverter::Reader::getInvertingPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BELInverter::Builder::getInvertingPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::BELInverter::Builder::setInvertingPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::BEL::Which Device::BEL::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::BEL::Which Device::BEL::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BEL::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BEL::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::BEL::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::BEL::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BEL::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::BEL::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::BEL::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::BEL::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::BEL::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::BEL::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::BEL::Builder::setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::BEL::Builder::setPins(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::BEL::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::BEL::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::BEL::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::BELCategory Device::BEL::Reader::getCategory() const {
  return _reader.getDataField< ::DeviceResources::Device::BELCategory>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::BELCategory Device::BEL::Builder::getCategory() {
  return _builder.getDataField< ::DeviceResources::Device::BELCategory>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::BEL::Builder::setCategory( ::DeviceResources::Device::BELCategory value) {
  _builder.setDataField< ::DeviceResources::Device::BELCategory>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Device::BEL::Reader::isNonInverting() const {
  return which() == Device::BEL::NON_INVERTING;
}
inline bool Device::BEL::Builder::isNonInverting() {
  return which() == Device::BEL::NON_INVERTING;
}
inline  ::capnp::Void Device::BEL::Reader::getNonInverting() const {
  KJ_IREQUIRE((which() == Device::BEL::NON_INVERTING),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::BEL::Builder::getNonInverting() {
  KJ_IREQUIRE((which() == Device::BEL::NON_INVERTING),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::BEL::Builder::setNonInverting( ::capnp::Void value) {
  _builder.setDataField<Device::BEL::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::BEL::NON_INVERTING);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::BEL::Reader::isInverting() const {
  return which() == Device::BEL::INVERTING;
}
inline bool Device::BEL::Builder::isInverting() {
  return which() == Device::BEL::INVERTING;
}
inline bool Device::BEL::Reader::hasInverting() const {
  if (which() != Device::BEL::INVERTING) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::BEL::Builder::hasInverting() {
  if (which() != Device::BEL::INVERTING) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::BELInverter::Reader Device::BEL::Reader::getInverting() const {
  KJ_IREQUIRE((which() == Device::BEL::INVERTING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::BELInverter>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::BELInverter::Builder Device::BEL::Builder::getInverting() {
  KJ_IREQUIRE((which() == Device::BEL::INVERTING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::BELInverter>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::BEL::Builder::setInverting( ::DeviceResources::Device::BELInverter::Reader value) {
  _builder.setDataField<Device::BEL::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::BEL::INVERTING);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::BELInverter>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::BELInverter::Builder Device::BEL::Builder::initInverting() {
  _builder.setDataField<Device::BEL::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::BEL::INVERTING);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::BELInverter>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::BEL::Builder::adoptInverting(
    ::capnp::Orphan< ::DeviceResources::Device::BELInverter>&& value) {
  _builder.setDataField<Device::BEL::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::BEL::INVERTING);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::BELInverter>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::BELInverter> Device::BEL::Builder::disownInverting() {
  KJ_IREQUIRE((which() == Device::BEL::INVERTING),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::BELInverter>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::Site::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Site::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Site::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Site::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Site::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Site::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Tile::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Tile::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Tile::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Tile::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Tile::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Tile::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Tile::Reader::hasSites() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Tile::Builder::hasSites() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Reader Device::Tile::Reader::getSites() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Builder Device::Tile::Builder::getSites() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Tile::Builder::setSites( ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>::Builder Device::Tile::Builder::initSites(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Tile::Builder::adoptSites(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>> Device::Tile::Builder::disownSites() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Site,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t Device::Tile::Reader::getRow() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Device::Tile::Builder::getRow() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::Tile::Builder::setRow( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Device::Tile::Reader::getCol() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Device::Tile::Builder::getCol() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Device::Tile::Builder::setCol( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Tile::Reader::getDeleted() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Tile::Builder::getDeleted() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Device::Tile::Builder::setDeleted( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Tile::Reader::hasSubTilesPrefices() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Tile::Builder::hasSubTilesPrefices() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::Tile::Reader::getSubTilesPrefices() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::Tile::Builder::getSubTilesPrefices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Tile::Builder::setSubTilesPrefices( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Device::Tile::Builder::setSubTilesPrefices(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::Tile::Builder::initSubTilesPrefices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Tile::Builder::adoptSubTilesPrefices(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::Tile::Builder::disownSubTilesPrefices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::BELPin::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BELPin::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::BELPin::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::LogicalNetlist::Netlist::Direction Device::BELPin::Reader::getDir() const {
  return _reader.getDataField< ::LogicalNetlist::Netlist::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::LogicalNetlist::Netlist::Direction Device::BELPin::Builder::getDir() {
  return _builder.getDataField< ::LogicalNetlist::Netlist::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::BELPin::Builder::setDir( ::LogicalNetlist::Netlist::Direction value) {
  _builder.setDataField< ::LogicalNetlist::Netlist::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::BELPin::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::BELPin::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::BELPin::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::SiteWire::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SiteWire::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SiteWire::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::SiteWire::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteWire::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::SiteWire::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteWire::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SiteWire::Builder::setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::SiteWire::Builder::setPins(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteWire::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::SiteWire::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::SiteWire::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::SitePIP::Reader::getInpin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SitePIP::Builder::getInpin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SitePIP::Builder::setInpin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::SitePIP::Reader::getOutpin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SitePIP::Builder::getOutpin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::SitePIP::Builder::setOutpin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::SitePIP::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SitePIP::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::SitePIP::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePIP::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::SitePIP::Pipeline::getDelay() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::SitePIP::Builder::setDelay( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePIP::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SitePIP::Builder::adoptDelay(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::SitePIP::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::SitePin::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SitePin::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SitePin::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::LogicalNetlist::Netlist::Direction Device::SitePin::Reader::getDir() const {
  return _reader.getDataField< ::LogicalNetlist::Netlist::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::LogicalNetlist::Netlist::Direction Device::SitePin::Builder::getDir() {
  return _builder.getDataField< ::LogicalNetlist::Netlist::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::SitePin::Builder::setDir( ::LogicalNetlist::Netlist::Direction value) {
  _builder.setDataField< ::LogicalNetlist::Netlist::Direction>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::SitePin::Reader::getBelpin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SitePin::Builder::getBelpin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::SitePin::Builder::setBelpin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline typename Device::SitePin::Model::Reader Device::SitePin::Reader::getModel() const {
  return typename Device::SitePin::Model::Reader(_reader);
}
inline typename Device::SitePin::Model::Builder Device::SitePin::Builder::getModel() {
  return typename Device::SitePin::Model::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::SitePin::Model::Pipeline Device::SitePin::Pipeline::getModel() {
  return typename Device::SitePin::Model::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::SitePin::Model::Builder Device::SitePin::Builder::initModel() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Device::SitePin::Model::Builder(_builder);
}
inline bool Device::SitePin::Reader::hasDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SitePin::Builder::hasDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::SitePin::Reader::getDelay() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePin::Builder::getDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::SitePin::Pipeline::getDelay() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Device::SitePin::Builder::setDelay( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePin::Builder::initDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::SitePin::Builder::adoptDelay(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::SitePin::Builder::disownDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::SitePin::Model::Which Device::SitePin::Model::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::SitePin::Model::Which Device::SitePin::Model::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Device::SitePin::Model::Reader::isResistance() const {
  return which() == Device::SitePin::Model::RESISTANCE;
}
inline bool Device::SitePin::Model::Builder::isResistance() {
  return which() == Device::SitePin::Model::RESISTANCE;
}
inline bool Device::SitePin::Model::Reader::hasResistance() const {
  if (which() != Device::SitePin::Model::RESISTANCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SitePin::Model::Builder::hasResistance() {
  if (which() != Device::SitePin::Model::RESISTANCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::SitePin::Model::Reader::getResistance() const {
  KJ_IREQUIRE((which() == Device::SitePin::Model::RESISTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePin::Model::Builder::getResistance() {
  KJ_IREQUIRE((which() == Device::SitePin::Model::RESISTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SitePin::Model::Builder::setResistance( ::DeviceResources::Device::CornerModel::Reader value) {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::RESISTANCE);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePin::Model::Builder::initResistance() {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::RESISTANCE);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SitePin::Model::Builder::adoptResistance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::RESISTANCE);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::SitePin::Model::Builder::disownResistance() {
  KJ_IREQUIRE((which() == Device::SitePin::Model::RESISTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::SitePin::Model::Reader::isCapacitance() const {
  return which() == Device::SitePin::Model::CAPACITANCE;
}
inline bool Device::SitePin::Model::Builder::isCapacitance() {
  return which() == Device::SitePin::Model::CAPACITANCE;
}
inline bool Device::SitePin::Model::Reader::hasCapacitance() const {
  if (which() != Device::SitePin::Model::CAPACITANCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SitePin::Model::Builder::hasCapacitance() {
  if (which() != Device::SitePin::Model::CAPACITANCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::SitePin::Model::Reader::getCapacitance() const {
  KJ_IREQUIRE((which() == Device::SitePin::Model::CAPACITANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePin::Model::Builder::getCapacitance() {
  KJ_IREQUIRE((which() == Device::SitePin::Model::CAPACITANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SitePin::Model::Builder::setCapacitance( ::DeviceResources::Device::CornerModel::Reader value) {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::CAPACITANCE);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::SitePin::Model::Builder::initCapacitance() {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::CAPACITANCE);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SitePin::Model::Builder::adoptCapacitance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::CAPACITANCE);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::SitePin::Model::Builder::disownCapacitance() {
  KJ_IREQUIRE((which() == Device::SitePin::Model::CAPACITANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::SitePin::Model::Reader::isNoModel() const {
  return which() == Device::SitePin::Model::NO_MODEL;
}
inline bool Device::SitePin::Model::Builder::isNoModel() {
  return which() == Device::SitePin::Model::NO_MODEL;
}
inline  ::capnp::Void Device::SitePin::Model::Reader::getNoModel() const {
  KJ_IREQUIRE((which() == Device::SitePin::Model::NO_MODEL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::SitePin::Model::Builder::getNoModel() {
  KJ_IREQUIRE((which() == Device::SitePin::Model::NO_MODEL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SitePin::Model::Builder::setNoModel( ::capnp::Void value) {
  _builder.setDataField<Device::SitePin::Model::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::SitePin::Model::NO_MODEL);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Wire::Reader::getTile() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Wire::Builder::getTile() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Wire::Builder::setTile( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Wire::Reader::getWire() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Wire::Builder::getWire() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Wire::Builder::setWire( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Wire::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Wire::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::Wire::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::WireType::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::WireType::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::WireType::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::WireCategory Device::WireType::Reader::getCategory() const {
  return _reader.getDataField< ::DeviceResources::Device::WireCategory>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::WireCategory Device::WireType::Builder::getCategory() {
  return _builder.getDataField< ::DeviceResources::Device::WireCategory>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::WireType::Builder::setCategory( ::DeviceResources::Device::WireCategory value) {
  _builder.setDataField< ::DeviceResources::Device::WireCategory>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Node::Reader::hasWires() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Node::Builder::hasWires() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::Node::Reader::getWires() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::Node::Builder::getWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Node::Builder::setWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::Node::Builder::setWires(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::Node::Builder::initWires(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Node::Builder::adoptWires(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::Node::Builder::disownWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::Node::Reader::getNodeTiming() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Node::Builder::getNodeTiming() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Node::Builder::setNodeTiming( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::PIP::Which Device::PIP::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::PIP::Which Device::PIP::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PIP::Reader::getWire0() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PIP::Builder::getWire0() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setWire0( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::PIP::Reader::getWire1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PIP::Builder::getWire1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setWire1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PIP::Reader::getDirectional() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Device::PIP::Builder::getDirectional() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setDirectional(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PIP::Reader::getBuffered20() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool Device::PIP::Builder::getBuffered20() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setBuffered20(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PIP::Reader::getBuffered21() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool Device::PIP::Builder::getBuffered21() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setBuffered21(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PIP::Reader::isConventional() const {
  return which() == Device::PIP::CONVENTIONAL;
}
inline bool Device::PIP::Builder::isConventional() {
  return which() == Device::PIP::CONVENTIONAL;
}
inline  ::capnp::Void Device::PIP::Reader::getConventional() const {
  KJ_IREQUIRE((which() == Device::PIP::CONVENTIONAL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::PIP::Builder::getConventional() {
  KJ_IREQUIRE((which() == Device::PIP::CONVENTIONAL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setConventional( ::capnp::Void value) {
  _builder.setDataField<Device::PIP::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::PIP::CONVENTIONAL);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PIP::Reader::isPseudoCells() const {
  return which() == Device::PIP::PSEUDO_CELLS;
}
inline bool Device::PIP::Builder::isPseudoCells() {
  return which() == Device::PIP::PSEUDO_CELLS;
}
inline bool Device::PIP::Reader::hasPseudoCells() const {
  if (which() != Device::PIP::PSEUDO_CELLS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PIP::Builder::hasPseudoCells() {
  if (which() != Device::PIP::PSEUDO_CELLS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Reader Device::PIP::Reader::getPseudoCells() const {
  KJ_IREQUIRE((which() == Device::PIP::PSEUDO_CELLS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Builder Device::PIP::Builder::getPseudoCells() {
  KJ_IREQUIRE((which() == Device::PIP::PSEUDO_CELLS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::PIP::Builder::setPseudoCells( ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Device::PIP::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::PIP::PSEUDO_CELLS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>::Builder Device::PIP::Builder::initPseudoCells(unsigned int size) {
  _builder.setDataField<Device::PIP::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::PIP::PSEUDO_CELLS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::PIP::Builder::adoptPseudoCells(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Device::PIP::Which>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, Device::PIP::PSEUDO_CELLS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>> Device::PIP::Builder::disownPseudoCells() {
  KJ_IREQUIRE((which() == Device::PIP::PSEUDO_CELLS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PseudoCell,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t Device::PIP::Reader::getSubTile() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Device::PIP::Builder::getSubTile() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setSubTile( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::PIP::Reader::getTiming() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PIP::Builder::getTiming() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::PIP::Builder::setTiming( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::PseudoCell::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PseudoCell::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PseudoCell::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PseudoCell::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PseudoCell::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::PseudoCell::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::PseudoCell::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::PseudoCell::Builder::setPins( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::PseudoCell::Builder::setPins(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::PseudoCell::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::PseudoCell::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::PseudoCell::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::WireConstantSources::Reader::hasWires() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::WireConstantSources::Builder::hasWires() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::WireConstantSources::Reader::getWires() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::WireConstantSources::Builder::getWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::WireConstantSources::Builder::setWires( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::WireConstantSources::Builder::setWires(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::WireConstantSources::Builder::initWires(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::WireConstantSources::Builder::adoptWires(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::WireConstantSources::Builder::disownWires() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::ConstantType Device::WireConstantSources::Reader::getConstant() const {
  return _reader.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ConstantType Device::WireConstantSources::Builder::getConstant() {
  return _builder.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::WireConstantSources::Builder::setConstant( ::DeviceResources::Device::ConstantType value) {
  _builder.setDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::ParameterMapEntry::Reader::getFrom() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterMapEntry::Builder::getFrom() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterMapEntry::Builder::setFrom( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::ParameterMapEntry::Reader::getTo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterMapEntry::Builder::getTo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterMapEntry::Builder::setTo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::ParameterMapRule::Which Device::ParameterMapRule::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::ParameterMapRule::Which Device::ParameterMapRule::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterMapRule::Reader::getPrimParam() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterMapRule::Builder::getPrimParam() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterMapRule::Builder::setPrimParam( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::ParameterMapRule::Reader::getInstName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterMapRule::Builder::getInstName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterMapRule::Builder::setInstName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::ParameterMapRule::Reader::getInstParam() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterMapRule::Builder::getInstParam() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterMapRule::Builder::setInstParam( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Device::ParameterMapRule::Reader::isCopyValue() const {
  return which() == Device::ParameterMapRule::COPY_VALUE;
}
inline bool Device::ParameterMapRule::Builder::isCopyValue() {
  return which() == Device::ParameterMapRule::COPY_VALUE;
}
inline  ::capnp::Void Device::ParameterMapRule::Reader::getCopyValue() const {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::COPY_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::ParameterMapRule::Builder::getCopyValue() {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::COPY_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterMapRule::Builder::setCopyValue( ::capnp::Void value) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::COPY_VALUE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::ParameterMapRule::Reader::isBitSlice() const {
  return which() == Device::ParameterMapRule::BIT_SLICE;
}
inline bool Device::ParameterMapRule::Builder::isBitSlice() {
  return which() == Device::ParameterMapRule::BIT_SLICE;
}
inline bool Device::ParameterMapRule::Reader::hasBitSlice() const {
  if (which() != Device::ParameterMapRule::BIT_SLICE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterMapRule::Builder::hasBitSlice() {
  if (which() != Device::ParameterMapRule::BIT_SLICE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::ParameterMapRule::Reader::getBitSlice() const {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::BIT_SLICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::ParameterMapRule::Builder::getBitSlice() {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::BIT_SLICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParameterMapRule::Builder::setBitSlice( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::BIT_SLICE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::ParameterMapRule::Builder::setBitSlice(::kj::ArrayPtr<const  ::uint32_t> value) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::BIT_SLICE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::ParameterMapRule::Builder::initBitSlice(unsigned int size) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::BIT_SLICE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::ParameterMapRule::Builder::adoptBitSlice(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::BIT_SLICE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::ParameterMapRule::Builder::disownBitSlice() {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::BIT_SLICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::ParameterMapRule::Reader::isTableLookup() const {
  return which() == Device::ParameterMapRule::TABLE_LOOKUP;
}
inline bool Device::ParameterMapRule::Builder::isTableLookup() {
  return which() == Device::ParameterMapRule::TABLE_LOOKUP;
}
inline bool Device::ParameterMapRule::Reader::hasTableLookup() const {
  if (which() != Device::ParameterMapRule::TABLE_LOOKUP) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterMapRule::Builder::hasTableLookup() {
  if (which() != Device::ParameterMapRule::TABLE_LOOKUP) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Reader Device::ParameterMapRule::Reader::getTableLookup() const {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::TABLE_LOOKUP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Builder Device::ParameterMapRule::Builder::getTableLookup() {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::TABLE_LOOKUP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParameterMapRule::Builder::setTableLookup( ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::TABLE_LOOKUP);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>::Builder Device::ParameterMapRule::Builder::initTableLookup(unsigned int size) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::TABLE_LOOKUP);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::ParameterMapRule::Builder::adoptTableLookup(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Device::ParameterMapRule::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::ParameterMapRule::TABLE_LOOKUP);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>> Device::ParameterMapRule::Builder::disownTableLookup() {
  KJ_IREQUIRE((which() == Device::ParameterMapRule::TABLE_LOOKUP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::PrimToMacroExpansion::Which Device::PrimToMacroExpansion::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::PrimToMacroExpansion::Which Device::PrimToMacroExpansion::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PrimToMacroExpansion::Reader::getPrimName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PrimToMacroExpansion::Builder::getPrimName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PrimToMacroExpansion::Builder::setPrimName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::PrimToMacroExpansion::Reader::getMacroName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PrimToMacroExpansion::Builder::getMacroName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::PrimToMacroExpansion::Builder::setMacroName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PrimToMacroExpansion::Reader::isAlways() const {
  return which() == Device::PrimToMacroExpansion::ALWAYS;
}
inline bool Device::PrimToMacroExpansion::Builder::isAlways() {
  return which() == Device::PrimToMacroExpansion::ALWAYS;
}
inline  ::capnp::Void Device::PrimToMacroExpansion::Reader::getAlways() const {
  KJ_IREQUIRE((which() == Device::PrimToMacroExpansion::ALWAYS),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::PrimToMacroExpansion::Builder::getAlways() {
  KJ_IREQUIRE((which() == Device::PrimToMacroExpansion::ALWAYS),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PrimToMacroExpansion::Builder::setAlways( ::capnp::Void value) {
  _builder.setDataField<Device::PrimToMacroExpansion::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Device::PrimToMacroExpansion::ALWAYS);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PrimToMacroExpansion::Reader::isParameters() const {
  return which() == Device::PrimToMacroExpansion::PARAMETERS;
}
inline bool Device::PrimToMacroExpansion::Builder::isParameters() {
  return which() == Device::PrimToMacroExpansion::PARAMETERS;
}
inline bool Device::PrimToMacroExpansion::Reader::hasParameters() const {
  if (which() != Device::PrimToMacroExpansion::PARAMETERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PrimToMacroExpansion::Builder::hasParameters() {
  if (which() != Device::PrimToMacroExpansion::PARAMETERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Reader Device::PrimToMacroExpansion::Reader::getParameters() const {
  KJ_IREQUIRE((which() == Device::PrimToMacroExpansion::PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Builder Device::PrimToMacroExpansion::Builder::getParameters() {
  KJ_IREQUIRE((which() == Device::PrimToMacroExpansion::PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::PrimToMacroExpansion::Builder::setParameters( ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Device::PrimToMacroExpansion::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Device::PrimToMacroExpansion::PARAMETERS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>::Builder Device::PrimToMacroExpansion::Builder::initParameters(unsigned int size) {
  _builder.setDataField<Device::PrimToMacroExpansion::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Device::PrimToMacroExpansion::PARAMETERS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::PrimToMacroExpansion::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Device::PrimToMacroExpansion::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Device::PrimToMacroExpansion::PARAMETERS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>> Device::PrimToMacroExpansion::Builder::disownParameters() {
  KJ_IREQUIRE((which() == Device::PrimToMacroExpansion::PARAMETERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LogicalNetlist::Netlist::PropertyMap::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::PrimToMacroExpansion::Reader::hasParamMapping() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PrimToMacroExpansion::Builder::hasParamMapping() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Reader Device::PrimToMacroExpansion::Reader::getParamMapping() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Builder Device::PrimToMacroExpansion::Builder::getParamMapping() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::PrimToMacroExpansion::Builder::setParamMapping( ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>::Builder Device::PrimToMacroExpansion::Builder::initParamMapping(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::PrimToMacroExpansion::Builder::adoptParamMapping(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>> Device::PrimToMacroExpansion::Builder::disownParamMapping() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterMapRule,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::CellBelMapping::Reader::getCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::CellBelMapping::Builder::getCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CellBelMapping::Builder::setCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CellBelMapping::Reader::hasCommonPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellBelMapping::Builder::hasCommonPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader Device::CellBelMapping::Reader::getCommonPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder Device::CellBelMapping::Builder::getCommonPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CellBelMapping::Builder::setCommonPins( ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder Device::CellBelMapping::Builder::initCommonPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::CellBelMapping::Builder::adoptCommonPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>> Device::CellBelMapping::Builder::disownCommonPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CommonCellBelPinMaps,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::CellBelMapping::Reader::hasParameterPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellBelMapping::Builder::hasParameterPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader Device::CellBelMapping::Reader::getParameterPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder Device::CellBelMapping::Builder::getParameterPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::CellBelMapping::Builder::setParameterPins( ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>::Builder Device::CellBelMapping::Builder::initParameterPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::CellBelMapping::Builder::adoptParameterPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>> Device::CellBelMapping::Builder::disownParameterPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterCellBelPinMaps,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::CellBelMapping::Reader::hasPinsDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellBelMapping::Builder::hasPinsDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Reader Device::CellBelMapping::Reader::getPinsDelay() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Builder Device::CellBelMapping::Builder::getPinsDelay() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::CellBelMapping::Builder::setPinsDelay( ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>::Builder Device::CellBelMapping::Builder::initPinsDelay(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::CellBelMapping::Builder::adoptPinsDelay(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>> Device::CellBelMapping::Builder::disownPinsDelay() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::PinsDelay,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::CellBelPinEntry::Reader::getCellPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::CellBelPinEntry::Builder::getCellPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CellBelPinEntry::Builder::setCellPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::CellBelPinEntry::Reader::getBelPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::CellBelPinEntry::Builder::getBelPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::CellBelPinEntry::Builder::setBelPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::SiteTypeBelEntry::Reader::getSiteType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::SiteTypeBelEntry::Builder::getSiteType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::SiteTypeBelEntry::Builder::setSiteType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::SiteTypeBelEntry::Reader::hasBels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::SiteTypeBelEntry::Builder::hasBels() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Device::SiteTypeBelEntry::Reader::getBels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteTypeBelEntry::Builder::getBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::SiteTypeBelEntry::Builder::setBels( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::SiteTypeBelEntry::Builder::setBels(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Device::SiteTypeBelEntry::Builder::initBels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::SiteTypeBelEntry::Builder::adoptBels(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Device::SiteTypeBelEntry::Builder::disownBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::CommonCellBelPinMaps::Reader::hasSiteTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CommonCellBelPinMaps::Builder::hasSiteTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader Device::CommonCellBelPinMaps::Reader::getSiteTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder Device::CommonCellBelPinMaps::Builder::getSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CommonCellBelPinMaps::Builder::setSiteTypes( ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder Device::CommonCellBelPinMaps::Builder::initSiteTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::CommonCellBelPinMaps::Builder::adoptSiteTypes(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>> Device::CommonCellBelPinMaps::Builder::disownSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::SiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::CommonCellBelPinMaps::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CommonCellBelPinMaps::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader Device::CommonCellBelPinMaps::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder Device::CommonCellBelPinMaps::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::CommonCellBelPinMaps::Builder::setPins( ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder Device::CommonCellBelPinMaps::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::CommonCellBelPinMaps::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>> Device::CommonCellBelPinMaps::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::ParameterSiteTypeBelEntry::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterSiteTypeBelEntry::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterSiteTypeBelEntry::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::ParameterSiteTypeBelEntry::Reader::getSiteType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterSiteTypeBelEntry::Builder::getSiteType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterSiteTypeBelEntry::Builder::setSiteType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Device::ParameterSiteTypeBelEntry::Reader::hasParameter() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterSiteTypeBelEntry::Builder::hasParameter() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader Device::ParameterSiteTypeBelEntry::Reader::getParameter() const {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder Device::ParameterSiteTypeBelEntry::Builder::getParameter() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Pipeline Device::ParameterSiteTypeBelEntry::Pipeline::getParameter() {
  return  ::LogicalNetlist::Netlist::PropertyMap::Entry::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::ParameterSiteTypeBelEntry::Builder::setParameter( ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader value) {
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder Device::ParameterSiteTypeBelEntry::Builder::initParameter() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParameterSiteTypeBelEntry::Builder::adoptParameter(
    ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry>&& value) {
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry> Device::ParameterSiteTypeBelEntry::Builder::disownParameter() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::ParameterCellBelPinMaps::Reader::hasParametersSiteTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterCellBelPinMaps::Builder::hasParametersSiteTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader Device::ParameterCellBelPinMaps::Reader::getParametersSiteTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder Device::ParameterCellBelPinMaps::Builder::getParametersSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParameterCellBelPinMaps::Builder::setParametersSiteTypes( ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>::Builder Device::ParameterCellBelPinMaps::Builder::initParametersSiteTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::ParameterCellBelPinMaps::Builder::adoptParametersSiteTypes(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>> Device::ParameterCellBelPinMaps::Builder::disownParametersSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterSiteTypeBelEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::ParameterCellBelPinMaps::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterCellBelPinMaps::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader Device::ParameterCellBelPinMaps::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder Device::ParameterCellBelPinMaps::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::ParameterCellBelPinMaps::Builder::setPins( ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>::Builder Device::ParameterCellBelPinMaps::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::ParameterCellBelPinMaps::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>> Device::ParameterCellBelPinMaps::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellBelPinEntry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::Package::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Package::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Package::Reader::hasPackagePins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Package::Builder::hasPackagePins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Reader Device::Package::Reader::getPackagePins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Builder Device::Package::Builder::getPackagePins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Package::Builder::setPackagePins( ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>::Builder Device::Package::Builder::initPackagePins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Package::Builder::adoptPackagePins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>> Device::Package::Builder::disownPackagePins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::PackagePin,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Package::Reader::hasGrades() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Package::Builder::hasGrades() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Reader Device::Package::Reader::getGrades() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Builder Device::Package::Builder::getGrades() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Package::Builder::setGrades( ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>::Builder Device::Package::Builder::initGrades(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Package::Builder::adoptGrades(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>> Device::Package::Builder::disownGrades() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Package::Grade,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::Package::PackagePin::Reader::getPackagePin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::PackagePin::Builder::getPackagePin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Package::PackagePin::Builder::setPackagePin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename Device::Package::PackagePin::Site::Reader Device::Package::PackagePin::Reader::getSite() const {
  return typename Device::Package::PackagePin::Site::Reader(_reader);
}
inline typename Device::Package::PackagePin::Site::Builder Device::Package::PackagePin::Builder::getSite() {
  return typename Device::Package::PackagePin::Site::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::Package::PackagePin::Site::Pipeline Device::Package::PackagePin::Pipeline::getSite() {
  return typename Device::Package::PackagePin::Site::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::Package::PackagePin::Site::Builder Device::Package::PackagePin::Builder::initSite() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename Device::Package::PackagePin::Site::Builder(_builder);
}
inline typename Device::Package::PackagePin::Bel::Reader Device::Package::PackagePin::Reader::getBel() const {
  return typename Device::Package::PackagePin::Bel::Reader(_reader);
}
inline typename Device::Package::PackagePin::Bel::Builder Device::Package::PackagePin::Builder::getBel() {
  return typename Device::Package::PackagePin::Bel::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::Package::PackagePin::Bel::Pipeline Device::Package::PackagePin::Pipeline::getBel() {
  return typename Device::Package::PackagePin::Bel::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::Package::PackagePin::Bel::Builder Device::Package::PackagePin::Builder::initBel() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  return typename Device::Package::PackagePin::Bel::Builder(_builder);
}
inline  ::DeviceResources::Device::Package::PackagePin::Site::Which Device::Package::PackagePin::Site::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Package::PackagePin::Site::Which Device::Package::PackagePin::Site::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Device::Package::PackagePin::Site::Reader::isNoSite() const {
  return which() == Device::Package::PackagePin::Site::NO_SITE;
}
inline bool Device::Package::PackagePin::Site::Builder::isNoSite() {
  return which() == Device::Package::PackagePin::Site::NO_SITE;
}
inline  ::capnp::Void Device::Package::PackagePin::Site::Reader::getNoSite() const {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Site::NO_SITE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::Package::PackagePin::Site::Builder::getNoSite() {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Site::NO_SITE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Package::PackagePin::Site::Builder::setNoSite( ::capnp::Void value) {
  _builder.setDataField<Device::Package::PackagePin::Site::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Device::Package::PackagePin::Site::NO_SITE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Package::PackagePin::Site::Reader::isSite() const {
  return which() == Device::Package::PackagePin::Site::SITE;
}
inline bool Device::Package::PackagePin::Site::Builder::isSite() {
  return which() == Device::Package::PackagePin::Site::SITE;
}
inline  ::uint32_t Device::Package::PackagePin::Site::Reader::getSite() const {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Site::SITE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::PackagePin::Site::Builder::getSite() {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Site::SITE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::Package::PackagePin::Site::Builder::setSite( ::uint32_t value) {
  _builder.setDataField<Device::Package::PackagePin::Site::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Device::Package::PackagePin::Site::SITE);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::Package::PackagePin::Bel::Which Device::Package::PackagePin::Bel::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Package::PackagePin::Bel::Which Device::Package::PackagePin::Bel::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline bool Device::Package::PackagePin::Bel::Reader::isNoBel() const {
  return which() == Device::Package::PackagePin::Bel::NO_BEL;
}
inline bool Device::Package::PackagePin::Bel::Builder::isNoBel() {
  return which() == Device::Package::PackagePin::Bel::NO_BEL;
}
inline  ::capnp::Void Device::Package::PackagePin::Bel::Reader::getNoBel() const {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Bel::NO_BEL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::Package::PackagePin::Bel::Builder::getNoBel() {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Bel::NO_BEL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Package::PackagePin::Bel::Builder::setNoBel( ::capnp::Void value) {
  _builder.setDataField<Device::Package::PackagePin::Bel::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::Package::PackagePin::Bel::NO_BEL);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Package::PackagePin::Bel::Reader::isBel() const {
  return which() == Device::Package::PackagePin::Bel::BEL;
}
inline bool Device::Package::PackagePin::Bel::Builder::isBel() {
  return which() == Device::Package::PackagePin::Bel::BEL;
}
inline  ::uint32_t Device::Package::PackagePin::Bel::Reader::getBel() const {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Bel::BEL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::PackagePin::Bel::Builder::getBel() {
  KJ_IREQUIRE((which() == Device::Package::PackagePin::Bel::BEL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Device::Package::PackagePin::Bel::Builder::setBel( ::uint32_t value) {
  _builder.setDataField<Device::Package::PackagePin::Bel::Which>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, Device::Package::PackagePin::Bel::BEL);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Package::Grade::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::Grade::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Package::Grade::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Package::Grade::Reader::getSpeedGrade() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::Grade::Builder::getSpeedGrade() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Package::Grade::Builder::setSpeedGrade( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Package::Grade::Reader::getTemperatureGrade() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Package::Grade::Builder::getTemperatureGrade() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::Package::Grade::Builder::setTemperatureGrade( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::Reader::getDefaultBestConstant() const {
  return _reader.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::Builder::getDefaultBestConstant() {
  return _builder.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::Builder::setDefaultBestConstant( ::DeviceResources::Device::ConstantType value) {
  _builder.setDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Constants::Reader::hasBestConstantExceptions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constants::Builder::hasBestConstantExceptions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Reader Device::Constants::Reader::getBestConstantExceptions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::getBestConstantExceptions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constants::Builder::setBestConstantExceptions( ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::initBestConstantExceptions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constants::Builder::adoptBestConstantExceptions(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>> Device::Constants::Builder::disownBestConstantExceptions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SitePinConstantExceptions,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constants::Reader::hasSiteSources() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constants::Builder::hasSiteSources() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Reader Device::Constants::Reader::getSiteSources() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::getSiteSources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constants::Builder::setSiteSources( ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::initSiteSources(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constants::Builder::adoptSiteSources(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>> Device::Constants::Builder::disownSiteSources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::SiteConstantSource,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Constants::Reader::hasNodeSources() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constants::Builder::hasNodeSources() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Reader Device::Constants::Reader::getNodeSources() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::getNodeSources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Constants::Builder::setNodeSources( ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::initNodeSources(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Constants::Builder::adoptNodeSources(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>> Device::Constants::Builder::disownNodeSources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::NodeConstantSource,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::Constants::Reader::getGndCellType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::Builder::getGndCellType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::Builder::setGndCellType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::Reader::getGndCellPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::Builder::getGndCellPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::Builder::setGndCellPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::Reader::getVccCellType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::Builder::getVccCellType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::Builder::setVccCellType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::Reader::getVccCellPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::Builder::getVccCellPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::Builder::setVccCellPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline typename Device::Constants::GndNetName::Reader Device::Constants::Reader::getGndNetName() const {
  return typename Device::Constants::GndNetName::Reader(_reader);
}
inline typename Device::Constants::GndNetName::Builder Device::Constants::Builder::getGndNetName() {
  return typename Device::Constants::GndNetName::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::Constants::GndNetName::Pipeline Device::Constants::Pipeline::getGndNetName() {
  return typename Device::Constants::GndNetName::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::Constants::GndNetName::Builder Device::Constants::Builder::initGndNetName() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<5>() * ::capnp::ELEMENTS, 0);
  return typename Device::Constants::GndNetName::Builder(_builder);
}
inline typename Device::Constants::VccNetName::Reader Device::Constants::Reader::getVccNetName() const {
  return typename Device::Constants::VccNetName::Reader(_reader);
}
inline typename Device::Constants::VccNetName::Builder Device::Constants::Builder::getVccNetName() {
  return typename Device::Constants::VccNetName::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::Constants::VccNetName::Pipeline Device::Constants::Pipeline::getVccNetName() {
  return typename Device::Constants::VccNetName::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::Constants::VccNetName::Builder Device::Constants::Builder::initVccNetName() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<12>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<7>() * ::capnp::ELEMENTS, 0);
  return typename Device::Constants::VccNetName::Builder(_builder);
}
inline bool Device::Constants::Reader::hasDefaultCellConns() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constants::Builder::hasDefaultCellConns() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Reader Device::Constants::Reader::getDefaultCellConns() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::getDefaultCellConns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::Constants::Builder::setDefaultCellConns( ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>::Builder Device::Constants::Builder::initDefaultCellConns(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Device::Constants::Builder::adoptDefaultCellConns(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>> Device::Constants::Builder::disownDefaultCellConns() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnections,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::Constants::SitePinConstantExceptions::Reader::getSiteType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::SitePinConstantExceptions::Builder::getSiteType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SitePinConstantExceptions::Builder::setSiteType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::SitePinConstantExceptions::Reader::getSitePin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::SitePinConstantExceptions::Builder::getSitePin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SitePinConstantExceptions::Builder::setSitePin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::SitePinConstantExceptions::Reader::getBestConstant() const {
  return _reader.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::SitePinConstantExceptions::Builder::getBestConstant() {
  return _builder.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SitePinConstantExceptions::Builder::setBestConstant( ::DeviceResources::Device::ConstantType value) {
  _builder.setDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::SiteConstantSource::Reader::getSiteType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::SiteConstantSource::Builder::getSiteType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SiteConstantSource::Builder::setSiteType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::SiteConstantSource::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::SiteConstantSource::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SiteConstantSource::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::SiteConstantSource::Reader::getBelPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::SiteConstantSource::Builder::getBelPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SiteConstantSource::Builder::setBelPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::SiteConstantSource::Reader::getConstant() const {
  return _reader.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::SiteConstantSource::Builder::getConstant() {
  return _builder.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::SiteConstantSource::Builder::setConstant( ::DeviceResources::Device::ConstantType value) {
  _builder.setDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::NodeConstantSource::Reader::getTile() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::NodeConstantSource::Builder::getTile() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::NodeConstantSource::Builder::setTile( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::NodeConstantSource::Reader::getWire() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::NodeConstantSource::Builder::getWire() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::NodeConstantSource::Builder::setWire( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::NodeConstantSource::Reader::getConstant() const {
  return _reader.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ConstantType Device::Constants::NodeConstantSource::Builder::getConstant() {
  return _builder.getDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::NodeConstantSource::Builder::setConstant( ::DeviceResources::Device::ConstantType value) {
  _builder.setDataField< ::DeviceResources::Device::ConstantType>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::DefaultCellConnection::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::DefaultCellConnection::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::DefaultCellConnection::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::Constants::CellPinValue Device::Constants::DefaultCellConnection::Reader::getValue() const {
  return _reader.getDataField< ::DeviceResources::Device::Constants::CellPinValue>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::Constants::CellPinValue Device::Constants::DefaultCellConnection::Builder::getValue() {
  return _builder.getDataField< ::DeviceResources::Device::Constants::CellPinValue>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::DefaultCellConnection::Builder::setValue( ::DeviceResources::Device::Constants::CellPinValue value) {
  _builder.setDataField< ::DeviceResources::Device::Constants::CellPinValue>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::Constants::DefaultCellConnections::Reader::getCellType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::DefaultCellConnections::Builder::getCellType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::DefaultCellConnections::Builder::setCellType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Constants::DefaultCellConnections::Reader::hasPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constants::DefaultCellConnections::Builder::hasPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Reader Device::Constants::DefaultCellConnections::Reader::getPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Builder Device::Constants::DefaultCellConnections::Builder::getPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constants::DefaultCellConnections::Builder::setPins( ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>::Builder Device::Constants::DefaultCellConnections::Builder::initPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constants::DefaultCellConnections::Builder::adoptPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>> Device::Constants::DefaultCellConnections::Builder::disownPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constants::DefaultCellConnection,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constants::GndNetName::Which Device::Constants::GndNetName::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constants::GndNetName::Which Device::Constants::GndNetName::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Device::Constants::GndNetName::Reader::isAnyName() const {
  return which() == Device::Constants::GndNetName::ANY_NAME;
}
inline bool Device::Constants::GndNetName::Builder::isAnyName() {
  return which() == Device::Constants::GndNetName::ANY_NAME;
}
inline  ::capnp::Void Device::Constants::GndNetName::Reader::getAnyName() const {
  KJ_IREQUIRE((which() == Device::Constants::GndNetName::ANY_NAME),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::Constants::GndNetName::Builder::getAnyName() {
  KJ_IREQUIRE((which() == Device::Constants::GndNetName::ANY_NAME),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::GndNetName::Builder::setAnyName( ::capnp::Void value) {
  _builder.setDataField<Device::Constants::GndNetName::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::Constants::GndNetName::ANY_NAME);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Constants::GndNetName::Reader::isName() const {
  return which() == Device::Constants::GndNetName::NAME;
}
inline bool Device::Constants::GndNetName::Builder::isName() {
  return which() == Device::Constants::GndNetName::NAME;
}
inline  ::uint32_t Device::Constants::GndNetName::Reader::getName() const {
  KJ_IREQUIRE((which() == Device::Constants::GndNetName::NAME),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::GndNetName::Builder::getName() {
  KJ_IREQUIRE((which() == Device::Constants::GndNetName::NAME),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::GndNetName::Builder::setName( ::uint32_t value) {
  _builder.setDataField<Device::Constants::GndNetName::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::Constants::GndNetName::NAME);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::Constants::VccNetName::Which Device::Constants::VccNetName::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constants::VccNetName::Which Device::Constants::VccNetName::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline bool Device::Constants::VccNetName::Reader::isAnyName() const {
  return which() == Device::Constants::VccNetName::ANY_NAME;
}
inline bool Device::Constants::VccNetName::Builder::isAnyName() {
  return which() == Device::Constants::VccNetName::ANY_NAME;
}
inline  ::capnp::Void Device::Constants::VccNetName::Reader::getAnyName() const {
  KJ_IREQUIRE((which() == Device::Constants::VccNetName::ANY_NAME),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::Constants::VccNetName::Builder::getAnyName() {
  KJ_IREQUIRE((which() == Device::Constants::VccNetName::ANY_NAME),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::VccNetName::Builder::setAnyName( ::capnp::Void value) {
  _builder.setDataField<Device::Constants::VccNetName::Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, Device::Constants::VccNetName::ANY_NAME);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Constants::VccNetName::Reader::isName() const {
  return which() == Device::Constants::VccNetName::NAME;
}
inline bool Device::Constants::VccNetName::Builder::isName() {
  return which() == Device::Constants::VccNetName::NAME;
}
inline  ::uint32_t Device::Constants::VccNetName::Reader::getName() const {
  KJ_IREQUIRE((which() == Device::Constants::VccNetName::NAME),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::Constants::VccNetName::Builder::getName() {
  KJ_IREQUIRE((which() == Device::Constants::VccNetName::NAME),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Device::Constants::VccNetName::Builder::setName( ::uint32_t value) {
  _builder.setDataField<Device::Constants::VccNetName::Which>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, Device::Constants::VccNetName::NAME);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::CellPinInversionParameter::Which Device::CellPinInversionParameter::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Which Device::CellPinInversionParameter::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::CellPinInversionParameter::Reader::isInvOnly() const {
  return which() == Device::CellPinInversionParameter::INV_ONLY;
}
inline bool Device::CellPinInversionParameter::Builder::isInvOnly() {
  return which() == Device::CellPinInversionParameter::INV_ONLY;
}
inline  ::capnp::Void Device::CellPinInversionParameter::Reader::getInvOnly() const {
  KJ_IREQUIRE((which() == Device::CellPinInversionParameter::INV_ONLY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::CellPinInversionParameter::Builder::getInvOnly() {
  KJ_IREQUIRE((which() == Device::CellPinInversionParameter::INV_ONLY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CellPinInversionParameter::Builder::setInvOnly( ::capnp::Void value) {
  _builder.setDataField<Device::CellPinInversionParameter::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CellPinInversionParameter::INV_ONLY);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CellPinInversionParameter::Reader::isParameter() const {
  return which() == Device::CellPinInversionParameter::PARAMETER;
}
inline bool Device::CellPinInversionParameter::Builder::isParameter() {
  return which() == Device::CellPinInversionParameter::PARAMETER;
}
inline bool Device::CellPinInversionParameter::Reader::hasParameter() const {
  if (which() != Device::CellPinInversionParameter::PARAMETER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellPinInversionParameter::Builder::hasParameter() {
  if (which() != Device::CellPinInversionParameter::PARAMETER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader Device::CellPinInversionParameter::Reader::getParameter() const {
  KJ_IREQUIRE((which() == Device::CellPinInversionParameter::PARAMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder Device::CellPinInversionParameter::Builder::getParameter() {
  KJ_IREQUIRE((which() == Device::CellPinInversionParameter::PARAMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CellPinInversionParameter::Builder::setParameter( ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader value) {
  _builder.setDataField<Device::CellPinInversionParameter::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CellPinInversionParameter::PARAMETER);
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder Device::CellPinInversionParameter::Builder::initParameter() {
  _builder.setDataField<Device::CellPinInversionParameter::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CellPinInversionParameter::PARAMETER);
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CellPinInversionParameter::Builder::adoptParameter(
    ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry>&& value) {
  _builder.setDataField<Device::CellPinInversionParameter::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CellPinInversionParameter::PARAMETER);
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry> Device::CellPinInversionParameter::Builder::disownParameter() {
  KJ_IREQUIRE((which() == Device::CellPinInversionParameter::PARAMETER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::CellPinInversion::Reader::getCellPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::CellPinInversion::Builder::getCellPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CellPinInversion::Builder::setCellPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CellPinInversion::Reader::hasNotInverting() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellPinInversion::Builder::hasNotInverting() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Reader Device::CellPinInversion::Reader::getNotInverting() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Builder Device::CellPinInversion::Builder::getNotInverting() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CellPinInversionParameter::Pipeline Device::CellPinInversion::Pipeline::getNotInverting() {
  return  ::DeviceResources::Device::CellPinInversionParameter::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::CellPinInversion::Builder::setNotInverting( ::DeviceResources::Device::CellPinInversionParameter::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Builder Device::CellPinInversion::Builder::initNotInverting() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CellPinInversion::Builder::adoptNotInverting(
    ::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter> Device::CellPinInversion::Builder::disownNotInverting() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::CellPinInversion::Reader::hasInverting() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellPinInversion::Builder::hasInverting() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Reader Device::CellPinInversion::Reader::getInverting() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Builder Device::CellPinInversion::Builder::getInverting() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CellPinInversionParameter::Pipeline Device::CellPinInversion::Pipeline::getInverting() {
  return  ::DeviceResources::Device::CellPinInversionParameter::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Device::CellPinInversion::Builder::setInverting( ::DeviceResources::Device::CellPinInversionParameter::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CellPinInversionParameter::Builder Device::CellPinInversion::Builder::initInverting() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::CellPinInversion::Builder::adoptInverting(
    ::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CellPinInversionParameter> Device::CellPinInversion::Builder::disownInverting() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CellPinInversionParameter>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::CellInversion::Reader::getCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::CellInversion::Builder::getCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CellInversion::Builder::setCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CellInversion::Reader::hasCellPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellInversion::Builder::hasCellPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Reader Device::CellInversion::Reader::getCellPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Builder Device::CellInversion::Builder::getCellPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CellInversion::Builder::setCellPins( ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>::Builder Device::CellInversion::Builder::initCellPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::CellInversion::Builder::adoptCellPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>> Device::CellInversion::Builder::disownCellPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellPinInversion,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::PinsDelay::Reader::hasFirstPin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PinsDelay::Builder::hasFirstPin() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::PinDelay::Reader Device::PinsDelay::Reader::getFirstPin() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::PinDelay::Builder Device::PinsDelay::Builder::getFirstPin() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::PinDelay::Pipeline Device::PinsDelay::Pipeline::getFirstPin() {
  return  ::DeviceResources::Device::PinDelay::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::PinsDelay::Builder::setFirstPin( ::DeviceResources::Device::PinDelay::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::PinDelay::Builder Device::PinsDelay::Builder::initFirstPin() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::PinsDelay::Builder::adoptFirstPin(
    ::capnp::Orphan< ::DeviceResources::Device::PinDelay>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::PinDelay> Device::PinsDelay::Builder::disownFirstPin() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::PinsDelay::Reader::hasSecondPin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PinsDelay::Builder::hasSecondPin() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::PinDelay::Reader Device::PinsDelay::Reader::getSecondPin() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::PinDelay::Builder Device::PinsDelay::Builder::getSecondPin() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::PinDelay::Pipeline Device::PinsDelay::Pipeline::getSecondPin() {
  return  ::DeviceResources::Device::PinDelay::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Device::PinsDelay::Builder::setSecondPin( ::DeviceResources::Device::PinDelay::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::PinDelay::Builder Device::PinsDelay::Builder::initSecondPin() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::PinsDelay::Builder::adoptSecondPin(
    ::capnp::Orphan< ::DeviceResources::Device::PinDelay>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::PinDelay> Device::PinsDelay::Builder::disownSecondPin() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::PinDelay>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::PinsDelay::Reader::hasCornerModel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PinsDelay::Builder::hasCornerModel() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::PinsDelay::Reader::getCornerModel() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PinsDelay::Builder::getCornerModel() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::PinsDelay::Pipeline::getCornerModel() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Device::PinsDelay::Builder::setCornerModel( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PinsDelay::Builder::initCornerModel() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::PinsDelay::Builder::adoptCornerModel(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::PinsDelay::Builder::disownCornerModel() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::PinsDelayType Device::PinsDelay::Reader::getPinsDelayType() const {
  return _reader.getDataField< ::DeviceResources::Device::PinsDelayType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::PinsDelayType Device::PinsDelay::Builder::getPinsDelayType() {
  return _builder.getDataField< ::DeviceResources::Device::PinsDelayType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PinsDelay::Builder::setPinsDelayType( ::DeviceResources::Device::PinsDelayType value) {
  _builder.setDataField< ::DeviceResources::Device::PinsDelayType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Device::PinsDelay::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PinsDelay::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::PinsDelay::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::PinDelay::Which Device::PinDelay::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::PinDelay::Which Device::PinDelay::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PinDelay::Reader::getPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::PinDelay::Builder::getPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PinDelay::Builder::setPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PinDelay::Reader::isNoClock() const {
  return which() == Device::PinDelay::NO_CLOCK;
}
inline bool Device::PinDelay::Builder::isNoClock() {
  return which() == Device::PinDelay::NO_CLOCK;
}
inline  ::capnp::Void Device::PinDelay::Reader::getNoClock() const {
  KJ_IREQUIRE((which() == Device::PinDelay::NO_CLOCK),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::PinDelay::Builder::getNoClock() {
  KJ_IREQUIRE((which() == Device::PinDelay::NO_CLOCK),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::PinDelay::Builder::setNoClock( ::capnp::Void value) {
  _builder.setDataField<Device::PinDelay::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Device::PinDelay::NO_CLOCK);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::PinDelay::Reader::isClockEdge() const {
  return which() == Device::PinDelay::CLOCK_EDGE;
}
inline bool Device::PinDelay::Builder::isClockEdge() {
  return which() == Device::PinDelay::CLOCK_EDGE;
}
inline  ::DeviceResources::Device::ClockEdge Device::PinDelay::Reader::getClockEdge() const {
  KJ_IREQUIRE((which() == Device::PinDelay::CLOCK_EDGE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::DeviceResources::Device::ClockEdge>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ClockEdge Device::PinDelay::Builder::getClockEdge() {
  KJ_IREQUIRE((which() == Device::PinDelay::CLOCK_EDGE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::DeviceResources::Device::ClockEdge>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Device::PinDelay::Builder::setClockEdge( ::DeviceResources::Device::ClockEdge value) {
  _builder.setDataField<Device::PinDelay::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, Device::PinDelay::CLOCK_EDGE);
  _builder.setDataField< ::DeviceResources::Device::ClockEdge>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Device::NodeTiming::Reader::hasCapacitance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::NodeTiming::Builder::hasCapacitance() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::NodeTiming::Reader::getCapacitance() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::NodeTiming::Builder::getCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::NodeTiming::Pipeline::getCapacitance() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::NodeTiming::Builder::setCapacitance( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::NodeTiming::Builder::initCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::NodeTiming::Builder::adoptCapacitance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::NodeTiming::Builder::disownCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::NodeTiming::Reader::hasResistance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::NodeTiming::Builder::hasResistance() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::NodeTiming::Reader::getResistance() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::NodeTiming::Builder::getResistance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::NodeTiming::Pipeline::getResistance() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Device::NodeTiming::Builder::setResistance( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::NodeTiming::Builder::initResistance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::NodeTiming::Builder::adoptResistance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::NodeTiming::Builder::disownResistance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::PIPTiming::Reader::hasInputCapacitance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PIPTiming::Builder::hasInputCapacitance() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::PIPTiming::Reader::getInputCapacitance() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::getInputCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::PIPTiming::Pipeline::getInputCapacitance() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::PIPTiming::Builder::setInputCapacitance( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::initInputCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::PIPTiming::Builder::adoptInputCapacitance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::PIPTiming::Builder::disownInputCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::PIPTiming::Reader::hasInternalCapacitance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PIPTiming::Builder::hasInternalCapacitance() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::PIPTiming::Reader::getInternalCapacitance() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::getInternalCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::PIPTiming::Pipeline::getInternalCapacitance() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Device::PIPTiming::Builder::setInternalCapacitance( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::initInternalCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::PIPTiming::Builder::adoptInternalCapacitance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::PIPTiming::Builder::disownInternalCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::PIPTiming::Reader::hasInternalDelay() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PIPTiming::Builder::hasInternalDelay() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::PIPTiming::Reader::getInternalDelay() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::getInternalDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::PIPTiming::Pipeline::getInternalDelay() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Device::PIPTiming::Builder::setInternalDelay( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::initInternalDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::PIPTiming::Builder::adoptInternalDelay(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::PIPTiming::Builder::disownInternalDelay() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::PIPTiming::Reader::hasOutputResistance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PIPTiming::Builder::hasOutputResistance() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::PIPTiming::Reader::getOutputResistance() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::getOutputResistance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::PIPTiming::Pipeline::getOutputResistance() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Device::PIPTiming::Builder::setOutputResistance( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::initOutputResistance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::PIPTiming::Builder::adoptOutputResistance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::PIPTiming::Builder::disownOutputResistance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Device::PIPTiming::Reader::hasOutputCapacitance() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Device::PIPTiming::Builder::hasOutputCapacitance() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModel::Reader Device::PIPTiming::Reader::getOutputCapacitance() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::getOutputCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::CornerModel::Pipeline Device::PIPTiming::Pipeline::getOutputCapacitance() {
  return  ::DeviceResources::Device::CornerModel::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Device::PIPTiming::Builder::setOutputCapacitance( ::DeviceResources::Device::CornerModel::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModel::Builder Device::PIPTiming::Builder::initOutputCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Device::PIPTiming::Builder::adoptOutputCapacitance(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModel>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModel> Device::PIPTiming::Builder::disownOutputCapacitance() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModel>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline typename Device::CornerModel::Slow::Reader Device::CornerModel::Reader::getSlow() const {
  return typename Device::CornerModel::Slow::Reader(_reader);
}
inline typename Device::CornerModel::Slow::Builder Device::CornerModel::Builder::getSlow() {
  return typename Device::CornerModel::Slow::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::CornerModel::Slow::Pipeline Device::CornerModel::Pipeline::getSlow() {
  return typename Device::CornerModel::Slow::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::CornerModel::Slow::Builder Device::CornerModel::Builder::initSlow() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Device::CornerModel::Slow::Builder(_builder);
}
inline typename Device::CornerModel::Fast::Reader Device::CornerModel::Reader::getFast() const {
  return typename Device::CornerModel::Fast::Reader(_reader);
}
inline typename Device::CornerModel::Fast::Builder Device::CornerModel::Builder::getFast() {
  return typename Device::CornerModel::Fast::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::CornerModel::Fast::Pipeline Device::CornerModel::Pipeline::getFast() {
  return typename Device::CornerModel::Fast::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::CornerModel::Fast::Builder Device::CornerModel::Builder::initFast() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Device::CornerModel::Fast::Builder(_builder);
}
inline  ::DeviceResources::Device::CornerModel::Slow::Which Device::CornerModel::Slow::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::CornerModel::Slow::Which Device::CornerModel::Slow::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::CornerModel::Slow::Reader::isNoSlow() const {
  return which() == Device::CornerModel::Slow::NO_SLOW;
}
inline bool Device::CornerModel::Slow::Builder::isNoSlow() {
  return which() == Device::CornerModel::Slow::NO_SLOW;
}
inline  ::capnp::Void Device::CornerModel::Slow::Reader::getNoSlow() const {
  KJ_IREQUIRE((which() == Device::CornerModel::Slow::NO_SLOW),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::CornerModel::Slow::Builder::getNoSlow() {
  KJ_IREQUIRE((which() == Device::CornerModel::Slow::NO_SLOW),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModel::Slow::Builder::setNoSlow( ::capnp::Void value) {
  _builder.setDataField<Device::CornerModel::Slow::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CornerModel::Slow::NO_SLOW);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CornerModel::Slow::Reader::isSlow() const {
  return which() == Device::CornerModel::Slow::SLOW;
}
inline bool Device::CornerModel::Slow::Builder::isSlow() {
  return which() == Device::CornerModel::Slow::SLOW;
}
inline bool Device::CornerModel::Slow::Reader::hasSlow() const {
  if (which() != Device::CornerModel::Slow::SLOW) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CornerModel::Slow::Builder::hasSlow() {
  if (which() != Device::CornerModel::Slow::SLOW) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModelValues::Reader Device::CornerModel::Slow::Reader::getSlow() const {
  KJ_IREQUIRE((which() == Device::CornerModel::Slow::SLOW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModelValues::Builder Device::CornerModel::Slow::Builder::getSlow() {
  KJ_IREQUIRE((which() == Device::CornerModel::Slow::SLOW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CornerModel::Slow::Builder::setSlow( ::DeviceResources::Device::CornerModelValues::Reader value) {
  _builder.setDataField<Device::CornerModel::Slow::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CornerModel::Slow::SLOW);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModelValues::Builder Device::CornerModel::Slow::Builder::initSlow() {
  _builder.setDataField<Device::CornerModel::Slow::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CornerModel::Slow::SLOW);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CornerModel::Slow::Builder::adoptSlow(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModelValues>&& value) {
  _builder.setDataField<Device::CornerModel::Slow::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CornerModel::Slow::SLOW);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModelValues> Device::CornerModel::Slow::Builder::disownSlow() {
  KJ_IREQUIRE((which() == Device::CornerModel::Slow::SLOW),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::CornerModel::Fast::Which Device::CornerModel::Fast::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::CornerModel::Fast::Which Device::CornerModel::Fast::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Device::CornerModel::Fast::Reader::isNoFast() const {
  return which() == Device::CornerModel::Fast::NO_FAST;
}
inline bool Device::CornerModel::Fast::Builder::isNoFast() {
  return which() == Device::CornerModel::Fast::NO_FAST;
}
inline  ::capnp::Void Device::CornerModel::Fast::Reader::getNoFast() const {
  KJ_IREQUIRE((which() == Device::CornerModel::Fast::NO_FAST),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::CornerModel::Fast::Builder::getNoFast() {
  KJ_IREQUIRE((which() == Device::CornerModel::Fast::NO_FAST),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModel::Fast::Builder::setNoFast( ::capnp::Void value) {
  _builder.setDataField<Device::CornerModel::Fast::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::CornerModel::Fast::NO_FAST);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CornerModel::Fast::Reader::isFast() const {
  return which() == Device::CornerModel::Fast::FAST;
}
inline bool Device::CornerModel::Fast::Builder::isFast() {
  return which() == Device::CornerModel::Fast::FAST;
}
inline bool Device::CornerModel::Fast::Reader::hasFast() const {
  if (which() != Device::CornerModel::Fast::FAST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CornerModel::Fast::Builder::hasFast() {
  if (which() != Device::CornerModel::Fast::FAST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::CornerModelValues::Reader Device::CornerModel::Fast::Reader::getFast() const {
  KJ_IREQUIRE((which() == Device::CornerModel::Fast::FAST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::CornerModelValues::Builder Device::CornerModel::Fast::Builder::getFast() {
  KJ_IREQUIRE((which() == Device::CornerModel::Fast::FAST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::CornerModel::Fast::Builder::setFast( ::DeviceResources::Device::CornerModelValues::Reader value) {
  _builder.setDataField<Device::CornerModel::Fast::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::CornerModel::Fast::FAST);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::CornerModelValues::Builder Device::CornerModel::Fast::Builder::initFast() {
  _builder.setDataField<Device::CornerModel::Fast::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::CornerModel::Fast::FAST);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::CornerModel::Fast::Builder::adoptFast(
    ::capnp::Orphan< ::DeviceResources::Device::CornerModelValues>&& value) {
  _builder.setDataField<Device::CornerModel::Fast::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::CornerModel::Fast::FAST);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::CornerModelValues> Device::CornerModel::Fast::Builder::disownFast() {
  KJ_IREQUIRE((which() == Device::CornerModel::Fast::FAST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::CornerModelValues>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Device::CornerModelValues::Min::Reader Device::CornerModelValues::Reader::getMin() const {
  return typename Device::CornerModelValues::Min::Reader(_reader);
}
inline typename Device::CornerModelValues::Min::Builder Device::CornerModelValues::Builder::getMin() {
  return typename Device::CornerModelValues::Min::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::CornerModelValues::Min::Pipeline Device::CornerModelValues::Pipeline::getMin() {
  return typename Device::CornerModelValues::Min::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::CornerModelValues::Min::Builder Device::CornerModelValues::Builder::initMin() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename Device::CornerModelValues::Min::Builder(_builder);
}
inline typename Device::CornerModelValues::Typ::Reader Device::CornerModelValues::Reader::getTyp() const {
  return typename Device::CornerModelValues::Typ::Reader(_reader);
}
inline typename Device::CornerModelValues::Typ::Builder Device::CornerModelValues::Builder::getTyp() {
  return typename Device::CornerModelValues::Typ::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::CornerModelValues::Typ::Pipeline Device::CornerModelValues::Pipeline::getTyp() {
  return typename Device::CornerModelValues::Typ::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::CornerModelValues::Typ::Builder Device::CornerModelValues::Builder::initTyp() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  return typename Device::CornerModelValues::Typ::Builder(_builder);
}
inline typename Device::CornerModelValues::Max::Reader Device::CornerModelValues::Reader::getMax() const {
  return typename Device::CornerModelValues::Max::Reader(_reader);
}
inline typename Device::CornerModelValues::Max::Builder Device::CornerModelValues::Builder::getMax() {
  return typename Device::CornerModelValues::Max::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::CornerModelValues::Max::Pipeline Device::CornerModelValues::Pipeline::getMax() {
  return typename Device::CornerModelValues::Max::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::CornerModelValues::Max::Builder Device::CornerModelValues::Builder::initMax() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<6>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<4>() * ::capnp::ELEMENTS, 0);
  return typename Device::CornerModelValues::Max::Builder(_builder);
}
inline  ::DeviceResources::Device::CornerModelValues::Min::Which Device::CornerModelValues::Min::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::CornerModelValues::Min::Which Device::CornerModelValues::Min::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::CornerModelValues::Min::Reader::isNoMin() const {
  return which() == Device::CornerModelValues::Min::NO_MIN;
}
inline bool Device::CornerModelValues::Min::Builder::isNoMin() {
  return which() == Device::CornerModelValues::Min::NO_MIN;
}
inline  ::capnp::Void Device::CornerModelValues::Min::Reader::getNoMin() const {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Min::NO_MIN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::CornerModelValues::Min::Builder::getNoMin() {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Min::NO_MIN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModelValues::Min::Builder::setNoMin( ::capnp::Void value) {
  _builder.setDataField<Device::CornerModelValues::Min::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CornerModelValues::Min::NO_MIN);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CornerModelValues::Min::Reader::isMin() const {
  return which() == Device::CornerModelValues::Min::MIN;
}
inline bool Device::CornerModelValues::Min::Builder::isMin() {
  return which() == Device::CornerModelValues::Min::MIN;
}
inline float Device::CornerModelValues::Min::Reader::getMin() const {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Min::MIN),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Device::CornerModelValues::Min::Builder::getMin() {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Min::MIN),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModelValues::Min::Builder::setMin(float value) {
  _builder.setDataField<Device::CornerModelValues::Min::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::CornerModelValues::Min::MIN);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::CornerModelValues::Typ::Which Device::CornerModelValues::Typ::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::CornerModelValues::Typ::Which Device::CornerModelValues::Typ::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Device::CornerModelValues::Typ::Reader::isNoTyp() const {
  return which() == Device::CornerModelValues::Typ::NO_TYP;
}
inline bool Device::CornerModelValues::Typ::Builder::isNoTyp() {
  return which() == Device::CornerModelValues::Typ::NO_TYP;
}
inline  ::capnp::Void Device::CornerModelValues::Typ::Reader::getNoTyp() const {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Typ::NO_TYP),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::CornerModelValues::Typ::Builder::getNoTyp() {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Typ::NO_TYP),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModelValues::Typ::Builder::setNoTyp( ::capnp::Void value) {
  _builder.setDataField<Device::CornerModelValues::Typ::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::CornerModelValues::Typ::NO_TYP);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CornerModelValues::Typ::Reader::isTyp() const {
  return which() == Device::CornerModelValues::Typ::TYP;
}
inline bool Device::CornerModelValues::Typ::Builder::isTyp() {
  return which() == Device::CornerModelValues::Typ::TYP;
}
inline float Device::CornerModelValues::Typ::Reader::getTyp() const {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Typ::TYP),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float Device::CornerModelValues::Typ::Builder::getTyp() {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Typ::TYP),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModelValues::Typ::Builder::setTyp(float value) {
  _builder.setDataField<Device::CornerModelValues::Typ::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Device::CornerModelValues::Typ::TYP);
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::CornerModelValues::Max::Which Device::CornerModelValues::Max::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::CornerModelValues::Max::Which Device::CornerModelValues::Max::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Device::CornerModelValues::Max::Reader::isNoMax() const {
  return which() == Device::CornerModelValues::Max::NO_MAX;
}
inline bool Device::CornerModelValues::Max::Builder::isNoMax() {
  return which() == Device::CornerModelValues::Max::NO_MAX;
}
inline  ::capnp::Void Device::CornerModelValues::Max::Reader::getNoMax() const {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Max::NO_MAX),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::CornerModelValues::Max::Builder::getNoMax() {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Max::NO_MAX),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModelValues::Max::Builder::setNoMax( ::capnp::Void value) {
  _builder.setDataField<Device::CornerModelValues::Max::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::CornerModelValues::Max::NO_MAX);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CornerModelValues::Max::Reader::isMax() const {
  return which() == Device::CornerModelValues::Max::MAX;
}
inline bool Device::CornerModelValues::Max::Builder::isMax() {
  return which() == Device::CornerModelValues::Max::MAX;
}
inline float Device::CornerModelValues::Max::Reader::getMax() const {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Max::MAX),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float Device::CornerModelValues::Max::Builder::getMax() {
  KJ_IREQUIRE((which() == Device::CornerModelValues::Max::MAX),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Device::CornerModelValues::Max::Builder::setMax(float value) {
  _builder.setDataField<Device::CornerModelValues::Max::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Device::CornerModelValues::Max::MAX);
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Constraints::Reader::hasTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Builder::hasTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::Reader::getTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Builder::getTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Builder::setTags( ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Builder::initTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Builder::adoptTags(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>> Device::Constraints::Builder::disownTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::Tag,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Reader::hasRoutedTags() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Builder::hasRoutedTags() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::Reader::getRoutedTags() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Builder::getRoutedTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Builder::setRoutedTags( ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Builder::initRoutedTags(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Builder::adoptRoutedTags(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>> Device::Constraints::Builder::disownRoutedTags() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTag,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Reader::hasCellConstraints() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Builder::hasCellConstraints() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::Reader::getCellConstraints() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Builder::getCellConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Builder::setCellConstraints( ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Builder::initCellConstraints(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Builder::adoptCellConstraints(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>> Device::Constraints::Builder::disownCellConstraints() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::CellConstraint,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::State::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::State::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::State::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::State::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::State::Builder::setState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::State::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::State::Builder::adoptState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::State::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::State::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::State::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::State::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::State::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::State::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::State::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::State::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::State::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constraints::Tag::Which Device::Constraints::Tag::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constraints::Tag::Which Device::Constraints::Tag::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::Constraints::Tag::Reader::hasTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Tag::Builder::hasTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::Tag::Reader::getTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::Tag::Builder::getTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Tag::Builder::setTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::Tag::Builder::initTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Tag::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::Tag::Builder::disownTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Tag::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Tag::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::Tag::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::Tag::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Tag::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::Tag::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Tag::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::Tag::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Tag::Reader::hasDefault() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Tag::Builder::hasDefault() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::Tag::Reader::getDefault() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::Tag::Builder::getDefault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Tag::Builder::setDefault( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::Tag::Builder::initDefault(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Tag::Builder::adoptDefault(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::Tag::Builder::disownDefault() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Tag::Reader::isSiteTypes() const {
  return which() == Device::Constraints::Tag::SITE_TYPES;
}
inline bool Device::Constraints::Tag::Builder::isSiteTypes() {
  return which() == Device::Constraints::Tag::SITE_TYPES;
}
inline bool Device::Constraints::Tag::Reader::hasSiteTypes() const {
  if (which() != Device::Constraints::Tag::SITE_TYPES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Tag::Builder::hasSiteTypes() {
  if (which() != Device::Constraints::Tag::SITE_TYPES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Constraints::Tag::Reader::getSiteTypes() const {
  KJ_IREQUIRE((which() == Device::Constraints::Tag::SITE_TYPES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::Tag::Builder::getSiteTypes() {
  KJ_IREQUIRE((which() == Device::Constraints::Tag::SITE_TYPES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Tag::Builder::setSiteTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::SITE_TYPES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Device::Constraints::Tag::Builder::setSiteTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::SITE_TYPES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::Tag::Builder::initSiteTypes(unsigned int size) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::SITE_TYPES);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Tag::Builder::adoptSiteTypes(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::SITE_TYPES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Constraints::Tag::Builder::disownSiteTypes() {
  KJ_IREQUIRE((which() == Device::Constraints::Tag::SITE_TYPES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Tag::Reader::isTileTypes() const {
  return which() == Device::Constraints::Tag::TILE_TYPES;
}
inline bool Device::Constraints::Tag::Builder::isTileTypes() {
  return which() == Device::Constraints::Tag::TILE_TYPES;
}
inline bool Device::Constraints::Tag::Reader::hasTileTypes() const {
  if (which() != Device::Constraints::Tag::TILE_TYPES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Tag::Builder::hasTileTypes() {
  if (which() != Device::Constraints::Tag::TILE_TYPES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Constraints::Tag::Reader::getTileTypes() const {
  KJ_IREQUIRE((which() == Device::Constraints::Tag::TILE_TYPES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::Tag::Builder::getTileTypes() {
  KJ_IREQUIRE((which() == Device::Constraints::Tag::TILE_TYPES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Tag::Builder::setTileTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::TILE_TYPES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void Device::Constraints::Tag::Builder::setTileTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::TILE_TYPES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::Tag::Builder::initTileTypes(unsigned int size) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::TILE_TYPES);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Tag::Builder::adoptTileTypes(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Device::Constraints::Tag::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::Tag::TILE_TYPES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Constraints::Tag::Builder::disownTileTypes() {
  KJ_IREQUIRE((which() == Device::Constraints::Tag::TILE_TYPES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::Tag::Reader::hasStates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::Tag::Builder::hasStates() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::Tag::Reader::getStates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Tag::Builder::getStates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Device::Constraints::Tag::Builder::setStates( ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::Tag::Builder::initStates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::Tag::Builder::adoptStates(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>> Device::Constraints::Tag::Builder::disownStates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::State,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTagPin::Reader::hasPin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTagPin::Builder::hasPin() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::RoutedTagPin::Reader::getPin() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPin::Builder::getPin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTagPin::Builder::setPin( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPin::Builder::initPin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTagPin::Builder::adoptPin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::RoutedTagPin::Builder::disownPin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTagPin::Reader::hasTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTagPin::Builder::hasTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::RoutedTagPin::Reader::getTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPin::Builder::getTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTagPin::Builder::setTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPin::Builder::initTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTagPin::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::RoutedTagPin::Builder::disownTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTag::Reader::hasRoutedTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTag::Builder::hasRoutedTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::RoutedTag::Reader::getRoutedTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTag::Builder::getRoutedTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTag::Builder::setRoutedTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTag::Builder::initRoutedTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTag::Builder::adoptRoutedTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::RoutedTag::Builder::disownRoutedTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTag::Reader::hasRoutingBel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTag::Builder::hasRoutingBel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::RoutedTag::Reader::getRoutingBel() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTag::Builder::getRoutingBel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTag::Builder::setRoutingBel( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTag::Builder::initRoutingBel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTag::Builder::adoptRoutingBel(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::RoutedTag::Builder::disownRoutingBel() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTag::Reader::hasBelPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTag::Builder::hasBelPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::RoutedTag::Reader::getBelPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::RoutedTag::Builder::getBelPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTag::Builder::setBelPins( ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::RoutedTag::Builder::initBelPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTag::Builder::adoptBelPins(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>> Device::Constraints::RoutedTag::Builder::disownBelPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::RoutedTagPin,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTagPort::Reader::hasTag() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTagPort::Builder::hasTag() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::RoutedTagPort::Reader::getTag() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPort::Builder::getTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTagPort::Builder::setTag( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPort::Builder::initTag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTagPort::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::RoutedTagPort::Builder::disownTag() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::RoutedTagPort::Reader::hasPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::RoutedTagPort::Builder::hasPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::RoutedTagPort::Reader::getPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPort::Builder::getPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::RoutedTagPort::Builder::setPort( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::RoutedTagPort::Builder::initPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::RoutedTagPort::Builder::adoptPort(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::RoutedTagPort::Builder::disownPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constraints::TagPair::Which Device::Constraints::TagPair::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constraints::TagPair::Which Device::Constraints::TagPair::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::Constraints::TagPair::Reader::isTag() const {
  return which() == Device::Constraints::TagPair::TAG;
}
inline bool Device::Constraints::TagPair::Builder::isTag() {
  return which() == Device::Constraints::TagPair::TAG;
}
inline bool Device::Constraints::TagPair::Reader::hasTag() const {
  if (which() != Device::Constraints::TagPair::TAG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::TagPair::Builder::hasTag() {
  if (which() != Device::Constraints::TagPair::TAG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::TagPair::Reader::getTag() const {
  KJ_IREQUIRE((which() == Device::Constraints::TagPair::TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::TagPair::Builder::getTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagPair::TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagPair::Builder::setTag( ::capnp::Text::Reader value) {
  _builder.setDataField<Device::Constraints::TagPair::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagPair::TAG);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::TagPair::Builder::initTag(unsigned int size) {
  _builder.setDataField<Device::Constraints::TagPair::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagPair::TAG);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::TagPair::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Device::Constraints::TagPair::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagPair::TAG);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::TagPair::Builder::disownTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagPair::TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::TagPair::Reader::isRoutedTag() const {
  return which() == Device::Constraints::TagPair::ROUTED_TAG;
}
inline bool Device::Constraints::TagPair::Builder::isRoutedTag() {
  return which() == Device::Constraints::TagPair::ROUTED_TAG;
}
inline bool Device::Constraints::TagPair::Reader::hasRoutedTag() const {
  if (which() != Device::Constraints::TagPair::ROUTED_TAG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::TagPair::Builder::hasRoutedTag() {
  if (which() != Device::Constraints::TagPair::ROUTED_TAG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Reader Device::Constraints::TagPair::Reader::getRoutedTag() const {
  KJ_IREQUIRE((which() == Device::Constraints::TagPair::ROUTED_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder Device::Constraints::TagPair::Builder::getRoutedTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagPair::ROUTED_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagPair::Builder::setRoutedTag( ::DeviceResources::Device::Constraints::RoutedTagPort::Reader value) {
  _builder.setDataField<Device::Constraints::TagPair::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagPair::ROUTED_TAG);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder Device::Constraints::TagPair::Builder::initRoutedTag() {
  _builder.setDataField<Device::Constraints::TagPair::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagPair::ROUTED_TAG);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagPair::Builder::adoptRoutedTag(
    ::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort>&& value) {
  _builder.setDataField<Device::Constraints::TagPair::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagPair::ROUTED_TAG);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort> Device::Constraints::TagPair::Builder::disownRoutedTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagPair::ROUTED_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::TagPair::Reader::hasState() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::TagPair::Builder::hasState() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::TagPair::Reader::getState() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::TagPair::Builder::getState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagPair::Builder::setState( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::TagPair::Builder::initState(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::TagPair::Builder::adoptState(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::TagPair::Builder::disownState() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constraints::TagStates::Which Device::Constraints::TagStates::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constraints::TagStates::Which Device::Constraints::TagStates::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::Constraints::TagStates::Reader::isTag() const {
  return which() == Device::Constraints::TagStates::TAG;
}
inline bool Device::Constraints::TagStates::Builder::isTag() {
  return which() == Device::Constraints::TagStates::TAG;
}
inline bool Device::Constraints::TagStates::Reader::hasTag() const {
  if (which() != Device::Constraints::TagStates::TAG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::TagStates::Builder::hasTag() {
  if (which() != Device::Constraints::TagStates::TAG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::TagStates::Reader::getTag() const {
  KJ_IREQUIRE((which() == Device::Constraints::TagStates::TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::TagStates::Builder::getTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagStates::TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagStates::Builder::setTag( ::capnp::Text::Reader value) {
  _builder.setDataField<Device::Constraints::TagStates::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagStates::TAG);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::TagStates::Builder::initTag(unsigned int size) {
  _builder.setDataField<Device::Constraints::TagStates::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagStates::TAG);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::TagStates::Builder::adoptTag(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Device::Constraints::TagStates::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagStates::TAG);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::TagStates::Builder::disownTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagStates::TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::TagStates::Reader::isRoutedTag() const {
  return which() == Device::Constraints::TagStates::ROUTED_TAG;
}
inline bool Device::Constraints::TagStates::Builder::isRoutedTag() {
  return which() == Device::Constraints::TagStates::ROUTED_TAG;
}
inline bool Device::Constraints::TagStates::Reader::hasRoutedTag() const {
  if (which() != Device::Constraints::TagStates::ROUTED_TAG) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::TagStates::Builder::hasRoutedTag() {
  if (which() != Device::Constraints::TagStates::ROUTED_TAG) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Reader Device::Constraints::TagStates::Reader::getRoutedTag() const {
  KJ_IREQUIRE((which() == Device::Constraints::TagStates::ROUTED_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder Device::Constraints::TagStates::Builder::getRoutedTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagStates::ROUTED_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagStates::Builder::setRoutedTag( ::DeviceResources::Device::Constraints::RoutedTagPort::Reader value) {
  _builder.setDataField<Device::Constraints::TagStates::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagStates::ROUTED_TAG);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::Constraints::RoutedTagPort::Builder Device::Constraints::TagStates::Builder::initRoutedTag() {
  _builder.setDataField<Device::Constraints::TagStates::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagStates::ROUTED_TAG);
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagStates::Builder::adoptRoutedTag(
    ::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort>&& value) {
  _builder.setDataField<Device::Constraints::TagStates::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::TagStates::ROUTED_TAG);
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::Constraints::RoutedTagPort> Device::Constraints::TagStates::Builder::disownRoutedTag() {
  KJ_IREQUIRE((which() == Device::Constraints::TagStates::ROUTED_TAG),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::RoutedTagPort>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::TagStates::Reader::hasStates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::TagStates::Builder::hasStates() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Constraints::TagStates::Reader::getStates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::TagStates::Builder::getStates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::TagStates::Builder::setStates( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Device::Constraints::TagStates::Builder::setStates(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::TagStates::Builder::initStates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::TagStates::Builder::adoptStates(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Constraints::TagStates::Builder::disownStates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constraints::BELLocation::Which Device::Constraints::BELLocation::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constraints::BELLocation::Which Device::Constraints::BELLocation::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::Constraints::BELLocation::Reader::isAnyBel() const {
  return which() == Device::Constraints::BELLocation::ANY_BEL;
}
inline bool Device::Constraints::BELLocation::Builder::isAnyBel() {
  return which() == Device::Constraints::BELLocation::ANY_BEL;
}
inline  ::capnp::Void Device::Constraints::BELLocation::Reader::getAnyBel() const {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::ANY_BEL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::Constraints::BELLocation::Builder::getAnyBel() {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::ANY_BEL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::Constraints::BELLocation::Builder::setAnyBel( ::capnp::Void value) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::ANY_BEL);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::Constraints::BELLocation::Reader::isName() const {
  return which() == Device::Constraints::BELLocation::NAME;
}
inline bool Device::Constraints::BELLocation::Builder::isName() {
  return which() == Device::Constraints::BELLocation::NAME;
}
inline bool Device::Constraints::BELLocation::Reader::hasName() const {
  if (which() != Device::Constraints::BELLocation::NAME) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::BELLocation::Builder::hasName() {
  if (which() != Device::Constraints::BELLocation::NAME) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::BELLocation::Reader::getName() const {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::NAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::BELLocation::Builder::getName() {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::NAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::BELLocation::Builder::setName( ::capnp::Text::Reader value) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::NAME);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::BELLocation::Builder::initName(unsigned int size) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::NAME);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::BELLocation::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::NAME);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::BELLocation::Builder::disownName() {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::NAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::BELLocation::Reader::isBels() const {
  return which() == Device::Constraints::BELLocation::BELS;
}
inline bool Device::Constraints::BELLocation::Builder::isBels() {
  return which() == Device::Constraints::BELLocation::BELS;
}
inline bool Device::Constraints::BELLocation::Reader::hasBels() const {
  if (which() != Device::Constraints::BELLocation::BELS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::BELLocation::Builder::hasBels() {
  if (which() != Device::Constraints::BELLocation::BELS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Constraints::BELLocation::Reader::getBels() const {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::BELS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::BELLocation::Builder::getBels() {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::BELS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::BELLocation::Builder::setBels( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::BELS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::Constraints::BELLocation::Builder::setBels(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::BELS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::BELLocation::Builder::initBels(unsigned int size) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::BELS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::BELLocation::Builder::adoptBels(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Device::Constraints::BELLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::BELLocation::BELS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Constraints::BELLocation::Builder::disownBels() {
  KJ_IREQUIRE((which() == Device::Constraints::BELLocation::BELS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constraints::ConstraintLocation::Which Device::Constraints::ConstraintLocation::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constraints::ConstraintLocation::Which Device::Constraints::ConstraintLocation::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::Constraints::ConstraintLocation::Reader::hasSiteTypes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::ConstraintLocation::Builder::hasSiteTypes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Constraints::ConstraintLocation::Reader::getSiteTypes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::ConstraintLocation::Builder::getSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::ConstraintLocation::Builder::setSiteTypes( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::Constraints::ConstraintLocation::Builder::setSiteTypes(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::ConstraintLocation::Builder::initSiteTypes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::ConstraintLocation::Builder::adoptSiteTypes(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Constraints::ConstraintLocation::Builder::disownSiteTypes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::ConstraintLocation::Reader::hasBel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::ConstraintLocation::Builder::hasBel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::DeviceResources::Device::Constraints::BELLocation::Reader Device::Constraints::ConstraintLocation::Reader::getBel() const {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::BELLocation>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::DeviceResources::Device::Constraints::BELLocation::Builder Device::Constraints::ConstraintLocation::Builder::getBel() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::BELLocation>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DeviceResources::Device::Constraints::BELLocation::Pipeline Device::Constraints::ConstraintLocation::Pipeline::getBel() {
  return  ::DeviceResources::Device::Constraints::BELLocation::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Device::Constraints::ConstraintLocation::Builder::setBel( ::DeviceResources::Device::Constraints::BELLocation::Reader value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::BELLocation>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::DeviceResources::Device::Constraints::BELLocation::Builder Device::Constraints::ConstraintLocation::Builder::initBel() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::BELLocation>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::ConstraintLocation::Builder::adoptBel(
    ::capnp::Orphan< ::DeviceResources::Device::Constraints::BELLocation>&& value) {
  ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::BELLocation>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DeviceResources::Device::Constraints::BELLocation> Device::Constraints::ConstraintLocation::Builder::disownBel() {
  return ::capnp::_::PointerHelpers< ::DeviceResources::Device::Constraints::BELLocation>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::ConstraintLocation::Reader::isImplies() const {
  return which() == Device::Constraints::ConstraintLocation::IMPLIES;
}
inline bool Device::Constraints::ConstraintLocation::Builder::isImplies() {
  return which() == Device::Constraints::ConstraintLocation::IMPLIES;
}
inline bool Device::Constraints::ConstraintLocation::Reader::hasImplies() const {
  if (which() != Device::Constraints::ConstraintLocation::IMPLIES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::ConstraintLocation::Builder::hasImplies() {
  if (which() != Device::Constraints::ConstraintLocation::IMPLIES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::ConstraintLocation::Reader::getImplies() const {
  KJ_IREQUIRE((which() == Device::Constraints::ConstraintLocation::IMPLIES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::ConstraintLocation::Builder::getImplies() {
  KJ_IREQUIRE((which() == Device::Constraints::ConstraintLocation::IMPLIES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Constraints::ConstraintLocation::Builder::setImplies( ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Device::Constraints::ConstraintLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::ConstraintLocation::IMPLIES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::ConstraintLocation::Builder::initImplies(unsigned int size) {
  _builder.setDataField<Device::Constraints::ConstraintLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::ConstraintLocation::IMPLIES);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::ConstraintLocation::Builder::adoptImplies(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Device::Constraints::ConstraintLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::ConstraintLocation::IMPLIES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>> Device::Constraints::ConstraintLocation::Builder::disownImplies() {
  KJ_IREQUIRE((which() == Device::Constraints::ConstraintLocation::IMPLIES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagPair,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::ConstraintLocation::Reader::isRequires() const {
  return which() == Device::Constraints::ConstraintLocation::REQUIRES;
}
inline bool Device::Constraints::ConstraintLocation::Builder::isRequires() {
  return which() == Device::Constraints::ConstraintLocation::REQUIRES;
}
inline bool Device::Constraints::ConstraintLocation::Reader::hasRequires() const {
  if (which() != Device::Constraints::ConstraintLocation::REQUIRES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::ConstraintLocation::Builder::hasRequires() {
  if (which() != Device::Constraints::ConstraintLocation::REQUIRES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::ConstraintLocation::Reader::getRequires() const {
  KJ_IREQUIRE((which() == Device::Constraints::ConstraintLocation::REQUIRES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::ConstraintLocation::Builder::getRequires() {
  KJ_IREQUIRE((which() == Device::Constraints::ConstraintLocation::REQUIRES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::Constraints::ConstraintLocation::Builder::setRequires( ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<Device::Constraints::ConstraintLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::ConstraintLocation::REQUIRES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::ConstraintLocation::Builder::initRequires(unsigned int size) {
  _builder.setDataField<Device::Constraints::ConstraintLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::ConstraintLocation::REQUIRES);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::ConstraintLocation::Builder::adoptRequires(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<Device::Constraints::ConstraintLocation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::ConstraintLocation::REQUIRES);
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>> Device::Constraints::ConstraintLocation::Builder::disownRequires() {
  KJ_IREQUIRE((which() == Device::Constraints::ConstraintLocation::REQUIRES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::TagStates,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::DeviceResources::Device::Constraints::CellConstraint::Which Device::Constraints::CellConstraint::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::Constraints::CellConstraint::Which Device::Constraints::CellConstraint::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::Constraints::CellConstraint::Reader::isCell() const {
  return which() == Device::Constraints::CellConstraint::CELL;
}
inline bool Device::Constraints::CellConstraint::Builder::isCell() {
  return which() == Device::Constraints::CellConstraint::CELL;
}
inline bool Device::Constraints::CellConstraint::Reader::hasCell() const {
  if (which() != Device::Constraints::CellConstraint::CELL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::CellConstraint::Builder::hasCell() {
  if (which() != Device::Constraints::CellConstraint::CELL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::Constraints::CellConstraint::Reader::getCell() const {
  KJ_IREQUIRE((which() == Device::Constraints::CellConstraint::CELL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::Constraints::CellConstraint::Builder::getCell() {
  KJ_IREQUIRE((which() == Device::Constraints::CellConstraint::CELL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::CellConstraint::Builder::setCell( ::capnp::Text::Reader value) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::Constraints::CellConstraint::Builder::initCell(unsigned int size) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELL);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::CellConstraint::Builder::adoptCell(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELL);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::Constraints::CellConstraint::Builder::disownCell() {
  KJ_IREQUIRE((which() == Device::Constraints::CellConstraint::CELL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::CellConstraint::Reader::isCells() const {
  return which() == Device::Constraints::CellConstraint::CELLS;
}
inline bool Device::Constraints::CellConstraint::Builder::isCells() {
  return which() == Device::Constraints::CellConstraint::CELLS;
}
inline bool Device::Constraints::CellConstraint::Reader::hasCells() const {
  if (which() != Device::Constraints::CellConstraint::CELLS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::CellConstraint::Builder::hasCells() {
  if (which() != Device::Constraints::CellConstraint::CELLS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::Constraints::CellConstraint::Reader::getCells() const {
  KJ_IREQUIRE((which() == Device::Constraints::CellConstraint::CELLS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::CellConstraint::Builder::getCells() {
  KJ_IREQUIRE((which() == Device::Constraints::CellConstraint::CELLS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::Constraints::CellConstraint::Builder::setCells( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELLS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Device::Constraints::CellConstraint::Builder::setCells(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELLS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::Constraints::CellConstraint::Builder::initCells(unsigned int size) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELLS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::CellConstraint::Builder::adoptCells(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Device::Constraints::CellConstraint::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::Constraints::CellConstraint::CELLS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::Constraints::CellConstraint::Builder::disownCells() {
  KJ_IREQUIRE((which() == Device::Constraints::CellConstraint::CELLS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::Constraints::CellConstraint::Reader::hasLocations() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::Constraints::CellConstraint::Builder::hasLocations() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Reader Device::Constraints::CellConstraint::Reader::getLocations() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::CellConstraint::Builder::getLocations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::Constraints::CellConstraint::Builder::setLocations( ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>::Builder Device::Constraints::CellConstraint::Builder::initLocations(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::Constraints::CellConstraint::Builder::adoptLocations(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>> Device::Constraints::CellConstraint::Builder::disownLocations() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::Constraints::ConstraintLocation,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::Reader::hasLutCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::Builder::hasLutCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Reader Device::LutDefinitions::Reader::getLutCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::Builder::getLutCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::Builder::setLutCells( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::Builder::initLutCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::Builder::adoptLutCells(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>> Device::LutDefinitions::Builder::disownLutCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutCell,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::Reader::hasLutElements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::Builder::hasLutElements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Reader Device::LutDefinitions::Reader::getLutElements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::Builder::getLutElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::Builder::setLutElements( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::Builder::initLutElements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::Builder::adoptLutElements(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>> Device::LutDefinitions::Builder::disownLutElements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElements,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutCell::Reader::hasCell() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutCell::Builder::hasCell() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::LutDefinitions::LutCell::Reader::getCell() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutCell::Builder::getCell() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutCell::Builder::setCell( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutCell::Builder::initCell(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutCell::Builder::adoptCell(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::LutDefinitions::LutCell::Builder::disownCell() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutCell::Reader::hasInputPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutCell::Builder::hasInputPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::LutDefinitions::LutCell::Reader::getInputPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::LutDefinitions::LutCell::Builder::getInputPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutCell::Builder::setInputPins( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Device::LutDefinitions::LutCell::Builder::setInputPins(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::LutDefinitions::LutCell::Builder::initInputPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutCell::Builder::adoptInputPins(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::LutDefinitions::LutCell::Builder::disownInputPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Device::LutDefinitions::LutCell::Equation::Reader Device::LutDefinitions::LutCell::Reader::getEquation() const {
  return typename Device::LutDefinitions::LutCell::Equation::Reader(_reader);
}
inline typename Device::LutDefinitions::LutCell::Equation::Builder Device::LutDefinitions::LutCell::Builder::getEquation() {
  return typename Device::LutDefinitions::LutCell::Equation::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Device::LutDefinitions::LutCell::Equation::Pipeline Device::LutDefinitions::LutCell::Pipeline::getEquation() {
  return typename Device::LutDefinitions::LutCell::Equation::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Device::LutDefinitions::LutCell::Equation::Builder Device::LutDefinitions::LutCell::Builder::initEquation() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Device::LutDefinitions::LutCell::Equation::Builder(_builder);
}
inline  ::DeviceResources::Device::LutDefinitions::LutCell::Equation::Which Device::LutDefinitions::LutCell::Equation::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::DeviceResources::Device::LutDefinitions::LutCell::Equation::Which Device::LutDefinitions::LutCell::Equation::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Device::LutDefinitions::LutCell::Equation::Reader::isInitParam() const {
  return which() == Device::LutDefinitions::LutCell::Equation::INIT_PARAM;
}
inline bool Device::LutDefinitions::LutCell::Equation::Builder::isInitParam() {
  return which() == Device::LutDefinitions::LutCell::Equation::INIT_PARAM;
}
inline bool Device::LutDefinitions::LutCell::Equation::Reader::hasInitParam() const {
  if (which() != Device::LutDefinitions::LutCell::Equation::INIT_PARAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutCell::Equation::Builder::hasInitParam() {
  if (which() != Device::LutDefinitions::LutCell::Equation::INIT_PARAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::LutDefinitions::LutCell::Equation::Reader::getInitParam() const {
  KJ_IREQUIRE((which() == Device::LutDefinitions::LutCell::Equation::INIT_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutCell::Equation::Builder::getInitParam() {
  KJ_IREQUIRE((which() == Device::LutDefinitions::LutCell::Equation::INIT_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutCell::Equation::Builder::setInitParam( ::capnp::Text::Reader value) {
  _builder.setDataField<Device::LutDefinitions::LutCell::Equation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::LutDefinitions::LutCell::Equation::INIT_PARAM);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutCell::Equation::Builder::initInitParam(unsigned int size) {
  _builder.setDataField<Device::LutDefinitions::LutCell::Equation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::LutDefinitions::LutCell::Equation::INIT_PARAM);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutCell::Equation::Builder::adoptInitParam(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Device::LutDefinitions::LutCell::Equation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::LutDefinitions::LutCell::Equation::INIT_PARAM);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::LutDefinitions::LutCell::Equation::Builder::disownInitParam() {
  KJ_IREQUIRE((which() == Device::LutDefinitions::LutCell::Equation::INIT_PARAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutCell::Equation::Reader::isInvalid() const {
  return which() == Device::LutDefinitions::LutCell::Equation::INVALID;
}
inline bool Device::LutDefinitions::LutCell::Equation::Builder::isInvalid() {
  return which() == Device::LutDefinitions::LutCell::Equation::INVALID;
}
inline  ::capnp::Void Device::LutDefinitions::LutCell::Equation::Reader::getInvalid() const {
  KJ_IREQUIRE((which() == Device::LutDefinitions::LutCell::Equation::INVALID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Device::LutDefinitions::LutCell::Equation::Builder::getInvalid() {
  KJ_IREQUIRE((which() == Device::LutDefinitions::LutCell::Equation::INVALID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::LutDefinitions::LutCell::Equation::Builder::setInvalid( ::capnp::Void value) {
  _builder.setDataField<Device::LutDefinitions::LutCell::Equation::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Device::LutDefinitions::LutCell::Equation::INVALID);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::LutDefinitions::LutBel::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutBel::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::LutDefinitions::LutBel::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutBel::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutBel::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutBel::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutBel::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::LutDefinitions::LutBel::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutBel::Reader::hasInputPins() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutBel::Builder::hasInputPins() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Device::LutDefinitions::LutBel::Reader::getInputPins() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::LutDefinitions::LutBel::Builder::getInputPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutBel::Builder::setInputPins( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void Device::LutDefinitions::LutBel::Builder::setInputPins(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Device::LutDefinitions::LutBel::Builder::initInputPins(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutBel::Builder::adoptInputPins(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Device::LutDefinitions::LutBel::Builder::disownInputPins() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutBel::Reader::hasOutputPin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutBel::Builder::hasOutputPin() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::LutDefinitions::LutBel::Reader::getOutputPin() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutBel::Builder::getOutputPin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutBel::Builder::setOutputPin( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutBel::Builder::initOutputPin(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutBel::Builder::adoptOutputPin(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::LutDefinitions::LutBel::Builder::disownOutputPin() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int8_t Device::LutDefinitions::LutBel::Reader::getLowBit() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Device::LutDefinitions::LutBel::Builder::getLowBit() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::LutDefinitions::LutBel::Builder::setLowBit( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Device::LutDefinitions::LutBel::Reader::getHighBit() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Device::LutDefinitions::LutBel::Builder::getHighBit() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Device::LutDefinitions::LutBel::Builder::setHighBit( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t Device::LutDefinitions::LutElement::Reader::getWidth() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Device::LutDefinitions::LutElement::Builder::getWidth() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::LutDefinitions::LutElement::Builder::setWidth( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::LutDefinitions::LutElement::Reader::hasBels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutElement::Builder::hasBels() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Reader Device::LutDefinitions::LutElement::Reader::getBels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::LutElement::Builder::getBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutElement::Builder::setBels( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::LutElement::Builder::initBels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutElement::Builder::adoptBels(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>> Device::LutDefinitions::LutElement::Builder::disownBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutBel,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutElements::Reader::hasSite() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutElements::Builder::hasSite() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Device::LutDefinitions::LutElements::Reader::getSite() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutElements::Builder::getSite() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutElements::Builder::setSite( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Device::LutDefinitions::LutElements::Builder::initSite(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutElements::Builder::adoptSite(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Device::LutDefinitions::LutElements::Builder::disownSite() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::LutDefinitions::LutElements::Reader::hasLuts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Device::LutDefinitions::LutElements::Builder::hasLuts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Reader Device::LutDefinitions::LutElements::Reader::getLuts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::LutElements::Builder::getLuts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Device::LutDefinitions::LutElements::Builder::setLuts( ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>::Builder Device::LutDefinitions::LutElements::Builder::initLuts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Device::LutDefinitions::LutElements::Builder::adoptLuts(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>> Device::LutDefinitions::LutElements::Builder::disownLuts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::LutDefinitions::LutElement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::ParameterDefinition::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::ParameterDefinition::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterDefinition::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::DeviceResources::Device::ParameterFormat Device::ParameterDefinition::Reader::getFormat() const {
  return _reader.getDataField< ::DeviceResources::Device::ParameterFormat>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::DeviceResources::Device::ParameterFormat Device::ParameterDefinition::Builder::getFormat() {
  return _builder.getDataField< ::DeviceResources::Device::ParameterFormat>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Device::ParameterDefinition::Builder::setFormat( ::DeviceResources::Device::ParameterFormat value) {
  _builder.setDataField< ::DeviceResources::Device::ParameterFormat>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Device::ParameterDefinition::Reader::hasDefault() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterDefinition::Builder::hasDefault() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader Device::ParameterDefinition::Reader::getDefault() const {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder Device::ParameterDefinition::Builder::getDefault() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Pipeline Device::ParameterDefinition::Pipeline::getDefault() {
  return  ::LogicalNetlist::Netlist::PropertyMap::Entry::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Device::ParameterDefinition::Builder::setDefault( ::LogicalNetlist::Netlist::PropertyMap::Entry::Reader value) {
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::LogicalNetlist::Netlist::PropertyMap::Entry::Builder Device::ParameterDefinition::Builder::initDefault() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParameterDefinition::Builder::adoptDefault(
    ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry>&& value) {
  ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LogicalNetlist::Netlist::PropertyMap::Entry> Device::ParameterDefinition::Builder::disownDefault() {
  return ::capnp::_::PointerHelpers< ::LogicalNetlist::Netlist::PropertyMap::Entry>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Device::CellParameterDefinition::Reader::getCellType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Device::CellParameterDefinition::Builder::getCellType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Device::CellParameterDefinition::Builder::setCellType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Device::CellParameterDefinition::Reader::hasParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::CellParameterDefinition::Builder::hasParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Reader Device::CellParameterDefinition::Reader::getParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Builder Device::CellParameterDefinition::Builder::getParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::CellParameterDefinition::Builder::setParameters( ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>::Builder Device::CellParameterDefinition::Builder::initParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::CellParameterDefinition::Builder::adoptParameters(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>> Device::CellParameterDefinition::Builder::disownParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::ParameterDefinition,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Device::ParameterDefinitions::Reader::hasCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Device::ParameterDefinitions::Builder::hasCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Reader Device::ParameterDefinitions::Reader::getCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Builder Device::ParameterDefinitions::Builder::getCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Device::ParameterDefinitions::Builder::setCells( ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>::Builder Device::ParameterDefinitions::Builder::initCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Device::ParameterDefinitions::Builder::adoptCells(
    ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>> Device::ParameterDefinitions::Builder::disownCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::DeviceResources::Device::CellParameterDefinition,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

