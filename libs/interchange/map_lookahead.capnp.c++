// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: map_lookahead.capnp

#include "map_lookahead.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_f692c4a480a90f28 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     40,  15, 169, 128, 164, 196, 146, 246,
     20,   0,   0,   0,   1,   0,   1,   0,
     69, 228, 118,  19,  34,  66, 235, 207,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 112,  95, 108, 111, 111, 107,
     97, 104, 101,  97, 100,  46,  99,  97,
    112, 110, 112,  58,  86, 112, 114,  77,
     97, 112,  67, 111, 115, 116,  69, 110,
    116, 114, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 108,  97, 121,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 103, 101, 115, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f692c4a480a90f28 = b_f692c4a480a90f28.words;
#if !CAPNP_LITE
static const uint16_t m_f692c4a480a90f28[] = {1, 0};
static const uint16_t i_f692c4a480a90f28[] = {0, 1};
const ::capnp::_::RawSchema s_f692c4a480a90f28 = {
  0xf692c4a480a90f28, b_f692c4a480a90f28.words, 50, nullptr, m_f692c4a480a90f28,
  0, 2, i_f692c4a480a90f28, nullptr, nullptr, { &s_f692c4a480a90f28, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<46> b_d7cebf41a764a0a5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    165, 160, 100, 167,  65, 191, 206, 215,
     20,   0,   0,   0,   1,   0,   0,   0,
     69, 228, 118,  19,  34,  66, 235, 207,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 112,  95, 108, 111, 111, 107,
     97, 104, 101,  97, 100,  46,  99,  97,
    112, 110, 112,  58,  86, 112, 114,  77,
     97, 112,  76, 111, 111, 107,  97, 104,
    101,  97, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 115, 116,  77,  97, 112,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    120, 164,  96, 126, 134, 193,  75, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    120, 164,  96, 126, 134, 193,  75, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     40,  15, 169, 128, 164, 196, 146, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7cebf41a764a0a5 = b_d7cebf41a764a0a5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d7cebf41a764a0a5[] = {
  &s_ca4bc1867e60a478,
};
static const uint16_t m_d7cebf41a764a0a5[] = {0};
static const uint16_t i_d7cebf41a764a0a5[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_d7cebf41a764a0a5[] = {
  { 16777216,  ::Matrix< ::VprMapCostEntry>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_d7cebf41a764a0a5 = {
  0xd7cebf41a764a0a5, b_d7cebf41a764a0a5.words, 46, d_d7cebf41a764a0a5, m_d7cebf41a764a0a5,
  1, 1, i_d7cebf41a764a0a5, nullptr, nullptr, { &s_d7cebf41a764a0a5, nullptr, bd_d7cebf41a764a0a5, 0, sizeof(bd_d7cebf41a764a0a5) / sizeof(bd_d7cebf41a764a0a5[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<101> b_ca47d6391ddc4c06 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6,  76, 220,  29,  57, 214,  71, 202,
     20,   0,   0,   0,   1,   0,   0,   0,
     69, 228, 118,  19,  34,  66, 235, 207,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 112,  95, 108, 111, 111, 107,
     97, 104, 101,  97, 100,  46,  99,  97,
    112, 110, 112,  58,  86, 112, 114,  73,
    110, 116, 114,  97,  67, 108, 117, 115,
    116, 101, 114,  76, 111, 111, 107,  97,
    104, 101,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   0,   0,   0,   3,   0,   1,   0,
    176,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
    112, 104, 121, 115, 105,  99,  97, 108,
     84, 105, 108, 101,  78, 117, 109,  80,
    105, 110, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105, 110,  78, 117, 109,  83, 105,
    110, 107, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105, 110,  83, 105, 110, 107, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105, 110,  83, 105, 110, 107,  67,
    111, 115, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     40,  15, 169, 128, 164, 196, 146, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca47d6391ddc4c06 = b_ca47d6391ddc4c06.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca47d6391ddc4c06[] = {
  &s_f692c4a480a90f28,
};
static const uint16_t m_ca47d6391ddc4c06[] = {0, 1, 3, 2};
static const uint16_t i_ca47d6391ddc4c06[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_ca47d6391ddc4c06 = {
  0xca47d6391ddc4c06, b_ca47d6391ddc4c06.words, 101, d_ca47d6391ddc4c06, m_ca47d6391ddc4c06,
  1, 4, i_ca47d6391ddc4c06, nullptr, nullptr, { &s_ca47d6391ddc4c06, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// VprMapCostEntry
constexpr uint16_t VprMapCostEntry::_capnpPrivate::dataWordSize;
constexpr uint16_t VprMapCostEntry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VprMapCostEntry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VprMapCostEntry::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// VprMapLookahead
constexpr uint16_t VprMapLookahead::_capnpPrivate::dataWordSize;
constexpr uint16_t VprMapLookahead::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VprMapLookahead::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VprMapLookahead::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// VprIntraClusterLookahead
constexpr uint16_t VprIntraClusterLookahead::_capnpPrivate::dataWordSize;
constexpr uint16_t VprIntraClusterLookahead::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VprIntraClusterLookahead::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VprIntraClusterLookahead::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



