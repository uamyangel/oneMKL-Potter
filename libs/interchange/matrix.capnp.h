// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: matrix.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ca4bc1867e60a478);
CAPNP_DECLARE_SCHEMA(c802a7ca396b6297);

}  // namespace schemas
}  // namespace capnp


template <typename Value = ::capnp::AnyPointer>
struct Matrix {
  Matrix() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca4bc1867e60a478, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename Value>
struct Matrix<Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c802a7ca396b6297, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Value>
class Matrix<Value>::Reader {
public:
  typedef Matrix Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Value2 = ::capnp::AnyPointer>
  typename Matrix<Value2>::Reader asGeneric() {
    return typename Matrix<Value2>::Reader(_reader);
  }

  inline bool hasDims() const;
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader getDims() const;

  inline bool hasData() const;
  inline typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Value>
class Matrix<Value>::Builder {
public:
  typedef Matrix Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Value2 = ::capnp::AnyPointer>
  typename Matrix<Value2>::Builder asGeneric() {
    return typename Matrix<Value2>::Builder(_builder);
  }

  inline bool hasDims();
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder getDims();
  inline void setDims( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDims(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder initDims(unsigned int size);
  inline void adoptDims(::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> disownDims();

  inline bool hasData();
  inline typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Builder getData();
  inline void setData(typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Value>
class Matrix<Value>::Pipeline {
public:
  typedef Matrix Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Value>
class Matrix<Value>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Value2 = ::capnp::AnyPointer>
  typename Matrix<Value2>::Entry::Reader asMatrixGeneric() {
    return typename Matrix<Value2>::Entry::Reader(_reader);
  }

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<Value> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Value>
class Matrix<Value>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Value2 = ::capnp::AnyPointer>
  typename Matrix<Value2>::Entry::Builder asMatrixGeneric() {
    return typename Matrix<Value2>::Entry::Builder(_builder);
  }

  inline bool hasValue();
  inline  ::capnp::BuilderFor<Value> getValue();
  inline void setValue( ::capnp::ReaderFor<Value> value);
  inline  ::capnp::BuilderFor<Value> initValue();
  inline  ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Value>
class Matrix<Value>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Value> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Value>
inline bool Matrix<Value>::Reader::hasDims() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Value>
inline bool Matrix<Value>::Builder::hasDims() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Value>
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader Matrix<Value>::Reader::getDims() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Value>
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder Matrix<Value>::Builder::getDims() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Value>
inline void Matrix<Value>::Builder::setDims( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Value>
inline void Matrix<Value>::Builder::setDims(::kj::ArrayPtr<const  ::int64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Value>
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder Matrix<Value>::Builder::initDims(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Value>
inline void Matrix<Value>::Builder::adoptDims(
    ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Value>
inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> Matrix<Value>::Builder::disownDims() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Value>
inline bool Matrix<Value>::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Value>
inline bool Matrix<Value>::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Value>
inline typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Reader Matrix<Value>::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Value>
inline typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Matrix<Value>::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Value>
inline void Matrix<Value>::Builder::setData(typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename Value>
inline typename  ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Matrix<Value>::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename Value>
inline void Matrix<Value>::Builder::adoptData(
    ::capnp::Orphan< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Value>
inline ::capnp::Orphan< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>> Matrix<Value>::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::Matrix<Value>::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

template <typename Value>
inline bool Matrix<Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Value>
inline bool Matrix<Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Value>
inline  ::capnp::ReaderFor<Value> Matrix<Value>::Entry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<Value>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Value>
inline  ::capnp::BuilderFor<Value> Matrix<Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Value>
inline  ::capnp::PipelineFor<Value> Matrix<Value>::Entry::Pipeline::getValue() {
  return  ::capnp::PipelineFor<Value>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Value>
inline void Matrix<Value>::Entry::Builder::setValue( ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Value>
inline  ::capnp::BuilderFor<Value> Matrix<Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Value>
inline  ::capnp::BuilderFor<Value> Matrix<Value>::Entry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Value>
inline void Matrix<Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Value>
inline ::capnp::Orphan<Value> Matrix<Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

// Matrix<Value>::Entry
template <typename Value>
constexpr uint16_t Matrix<Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Value>
constexpr uint16_t Matrix<Value>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Value>
constexpr ::capnp::Kind Matrix<Value>::Entry::_capnpPrivate::kind;
template <typename Value>
constexpr ::capnp::_::RawSchema const* Matrix<Value>::Entry::_capnpPrivate::schema;
template <typename Value>
const ::capnp::_::RawBrandedSchema::Scope Matrix<Value>::Entry::_capnpPrivate::brandScopes[] = {
  { 0xca4bc1867e60a478, brandBindings + 0, 1, false},
};
template <typename Value>
const ::capnp::_::RawBrandedSchema::Binding Matrix<Value>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Value>
const ::capnp::_::RawBrandedSchema Matrix<Value>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_c802a7ca396b6297, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

// Matrix<Value>
template <typename Value>
constexpr uint16_t Matrix<Value>::_capnpPrivate::dataWordSize;
template <typename Value>
constexpr uint16_t Matrix<Value>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Value>
constexpr ::capnp::Kind Matrix<Value>::_capnpPrivate::kind;
template <typename Value>
constexpr ::capnp::_::RawSchema const* Matrix<Value>::_capnpPrivate::schema;
template <typename Value>
const ::capnp::_::RawBrandedSchema::Scope Matrix<Value>::_capnpPrivate::brandScopes[] = {
  { 0xca4bc1867e60a478, brandBindings + 0, 1, false},
};
template <typename Value>
const ::capnp::_::RawBrandedSchema::Binding Matrix<Value>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Value>
const ::capnp::_::RawBrandedSchema::Dependency Matrix<Value>::_capnpPrivate::brandDependencies[] = {
  { 16777217,  ::Matrix<Value>::Entry::_capnpPrivate::brand() },
};
template <typename Value>
const ::capnp::_::RawBrandedSchema Matrix<Value>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_ca4bc1867e60a478, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE


CAPNP_END_HEADER

