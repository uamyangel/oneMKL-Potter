// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: PhysicalNetlist.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "References.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(898b9b1cd371bc2c);
CAPNP_DECLARE_SCHEMA(e9ed764e2445caf6);
CAPNP_DECLARE_SCHEMA(c4e918712809f3d6);
CAPNP_DECLARE_SCHEMA(f802e332e61c3669);
CAPNP_DECLARE_SCHEMA(8ff6d7ce6725fc21);
CAPNP_DECLARE_SCHEMA(d448d243006d04b3);
CAPNP_DECLARE_SCHEMA(cae0d90415632179);
CAPNP_DECLARE_SCHEMA(bbedaf90ca934ac9);
CAPNP_DECLARE_SCHEMA(a0ac9ff06acacc09);
CAPNP_DECLARE_SCHEMA(8b1b89a570dca60d);
enum class PhysCellType_8b1b89a570dca60d: uint16_t {
  LOCKED,
  PORT,
  GND,
  VCC,
};
CAPNP_DECLARE_ENUM(PhysCellType, 8b1b89a570dca60d);
CAPNP_DECLARE_SCHEMA(d2de7409362f1d00);
CAPNP_DECLARE_SCHEMA(ab91cae6ebb5cfa8);
enum class NetType_ab91cae6ebb5cfa8: uint16_t {
  SIGNAL,
  GND,
  VCC,
};
CAPNP_DECLARE_ENUM(NetType, ab91cae6ebb5cfa8);
CAPNP_DECLARE_SCHEMA(e8d985dbd8b6b94f);
CAPNP_DECLARE_SCHEMA(b22d57c083519077);
CAPNP_DECLARE_SCHEMA(eac27974f7cf128a);
CAPNP_DECLARE_SCHEMA(8cd6aad2ae70a893);
CAPNP_DECLARE_SCHEMA(de4c91cd1982219e);
CAPNP_DECLARE_SCHEMA(f93c9a1db544006e);
CAPNP_DECLARE_SCHEMA(90b17aa5b84c66ef);
CAPNP_DECLARE_SCHEMA(c764f202646c3d04);
CAPNP_DECLARE_SCHEMA(db81c501a8f0f705);
CAPNP_DECLARE_SCHEMA(d7a01ed41a326ba3);

}  // namespace schemas
}  // namespace capnp

namespace PhysicalNetlist {

struct StringRef {
  StringRef() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(898b9b1cd371bc2c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct HashSet {
  HashSet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c4e918712809f3d6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist {
  PhysNetlist() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct PinMapping;
  struct MultiCellPinMapping;
  struct CellPlacement;
  struct PhysCell;
  typedef ::capnp::schemas::PhysCellType_8b1b89a570dca60d PhysCellType;

  struct PhysNet;
  typedef ::capnp::schemas::NetType_ab91cae6ebb5cfa8 NetType;

  struct RouteBranch;
  struct PhysBel;
  struct PhysBelPin;
  struct PhysSitePin;
  struct PhysPIP;
  struct PhysSitePIP;
  struct PhysNode;
  struct SiteInstance;
  struct Property;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ff6d7ce6725fc21, 0, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PinMapping {
  PinMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    MULTI,
    OTHER_CELL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d448d243006d04b3, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::MultiCellPinMapping {
  MultiCellPinMapping() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cae0d90415632179, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::CellPlacement {
  CellPlacement() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbedaf90ca934ac9, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysCell {
  PhysCell() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a0ac9ff06acacc09, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysNet {
  PhysNet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2de7409362f1d00, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::RouteBranch {
  RouteBranch() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct RouteSegment;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8d985dbd8b6b94f, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::RouteBranch::RouteSegment {
  RouteSegment() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BEL_PIN,
    SITE_PIN,
    PIP,
    SITE_P_I_P,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b22d57c083519077, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysBel {
  PhysBel() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eac27974f7cf128a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysBelPin {
  PhysBelPin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8cd6aad2ae70a893, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysSitePin {
  PhysSitePin() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de4c91cd1982219e, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysPIP {
  PhysPIP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NO_SITE,
    SITE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f93c9a1db544006e, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysSitePIP {
  PhysSitePIP() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    IS_INVERTING,
    INVERTS,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90b17aa5b84c66ef, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::PhysNode {
  PhysNode() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c764f202646c3d04, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::SiteInstance {
  SiteInstance() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db81c501a8f0f705, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PhysNetlist::Property {
  Property() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7a01ed41a326ba3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class StringRef::Reader {
public:
  typedef StringRef Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType() const;

  inline bool hasField() const;
  inline  ::capnp::Text::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StringRef::Builder {
public:
  typedef StringRef Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ReferenceType getType();
  inline void setType( ::ReferenceType value);

  inline bool hasField();
  inline  ::capnp::Text::Builder getField();
  inline void setField( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initField(unsigned int size);
  inline void adoptField(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StringRef::Pipeline {
public:
  typedef StringRef Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class HashSet::Reader {
public:
  typedef HashSet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::ImplementationType getType() const;

  inline bool getHide() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class HashSet::Builder {
public:
  typedef HashSet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::ImplementationType getType();
  inline void setType( ::ImplementationType value);

  inline bool getHide();
  inline void setHide(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class HashSet::Pipeline {
public:
  typedef HashSet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::Reader {
public:
  typedef PhysNetlist Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPart() const;
  inline  ::capnp::Text::Reader getPart() const;

  inline bool hasPlacements() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Reader getPlacements() const;

  inline bool hasPhysNets() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Reader getPhysNets() const;

  inline bool hasPhysCells() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Reader getPhysCells() const;

  inline bool hasStrList() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getStrList() const;

  inline bool hasSiteInsts() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Reader getSiteInsts() const;

  inline bool hasProperties() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Reader getProperties() const;

  inline bool hasNullNet() const;
  inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Reader getNullNet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::Builder {
public:
  typedef PhysNetlist Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPart();
  inline  ::capnp::Text::Builder getPart();
  inline void setPart( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPart(unsigned int size);
  inline void adoptPart(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPart();

  inline bool hasPlacements();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Builder getPlacements();
  inline void setPlacements( ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Builder initPlacements(unsigned int size);
  inline void adoptPlacements(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>> disownPlacements();

  inline bool hasPhysNets();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Builder getPhysNets();
  inline void setPhysNets( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Builder initPhysNets(unsigned int size);
  inline void adoptPhysNets(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>> disownPhysNets();

  inline bool hasPhysCells();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Builder getPhysCells();
  inline void setPhysCells( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Builder initPhysCells(unsigned int size);
  inline void adoptPhysCells(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>> disownPhysCells();

  inline bool hasStrList();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getStrList();
  inline void setStrList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setStrList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initStrList(unsigned int size);
  inline void adoptStrList(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownStrList();

  inline bool hasSiteInsts();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Builder getSiteInsts();
  inline void setSiteInsts( ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Builder initSiteInsts(unsigned int size);
  inline void adoptSiteInsts(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>> disownSiteInsts();

  inline bool hasProperties();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Builder getProperties();
  inline void setProperties( ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Builder initProperties(unsigned int size);
  inline void adoptProperties(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>> disownProperties();

  inline bool hasNullNet();
  inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Builder getNullNet();
  inline void setNullNet( ::PhysicalNetlist::PhysNetlist::PhysNet::Reader value);
  inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Builder initNullNet();
  inline void adoptNullNet(::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysNet>&& value);
  inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysNet> disownNullNet();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::Pipeline {
public:
  typedef PhysNetlist Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Pipeline getNullNet();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PinMapping::Reader {
public:
  typedef PinMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getCellPin() const;

  inline  ::uint32_t getBel() const;

  inline  ::uint32_t getBelPin() const;

  inline bool getIsFixed() const;

  inline bool isMulti() const;
  inline  ::capnp::Void getMulti() const;

  inline bool isOtherCell() const;
  inline bool hasOtherCell() const;
  inline  ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Reader getOtherCell() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PinMapping::Builder {
public:
  typedef PinMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getCellPin();
  inline void setCellPin( ::uint32_t value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline  ::uint32_t getBelPin();
  inline void setBelPin( ::uint32_t value);

  inline bool getIsFixed();
  inline void setIsFixed(bool value);

  inline bool isMulti();
  inline  ::capnp::Void getMulti();
  inline void setMulti( ::capnp::Void value = ::capnp::VOID);

  inline bool isOtherCell();
  inline bool hasOtherCell();
  inline  ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Builder getOtherCell();
  inline void setOtherCell( ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Reader value);
  inline  ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Builder initOtherCell();
  inline void adoptOtherCell(::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>&& value);
  inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping> disownOtherCell();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PinMapping::Pipeline {
public:
  typedef PinMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::MultiCellPinMapping::Reader {
public:
  typedef MultiCellPinMapping Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMultiCell() const;

  inline  ::uint32_t getMultiType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::MultiCellPinMapping::Builder {
public:
  typedef MultiCellPinMapping Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMultiCell();
  inline void setMultiCell( ::uint32_t value);

  inline  ::uint32_t getMultiType();
  inline void setMultiType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::MultiCellPinMapping::Pipeline {
public:
  typedef MultiCellPinMapping Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::CellPlacement::Reader {
public:
  typedef CellPlacement Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellName() const;

  inline  ::uint32_t getType() const;

  inline  ::uint32_t getSite() const;

  inline  ::uint32_t getBel() const;

  inline bool hasPinMap() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Reader getPinMap() const;

  inline bool hasOtherBels() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getOtherBels() const;

  inline bool getIsBelFixed() const;

  inline bool getIsSiteFixed() const;

  inline  ::uint32_t getAltSiteType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::CellPlacement::Builder {
public:
  typedef CellPlacement Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellName();
  inline void setCellName( ::uint32_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline bool hasPinMap();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Builder getPinMap();
  inline void setPinMap( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Builder initPinMap(unsigned int size);
  inline void adoptPinMap(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>> disownPinMap();

  inline bool hasOtherBels();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getOtherBels();
  inline void setOtherBels( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOtherBels(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initOtherBels(unsigned int size);
  inline void adoptOtherBels(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownOtherBels();

  inline bool getIsBelFixed();
  inline void setIsBelFixed(bool value);

  inline bool getIsSiteFixed();
  inline void setIsSiteFixed(bool value);

  inline  ::uint32_t getAltSiteType();
  inline void setAltSiteType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::CellPlacement::Pipeline {
public:
  typedef CellPlacement Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysCell::Reader {
public:
  typedef PhysCell Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellName() const;

  inline  ::PhysicalNetlist::PhysNetlist::PhysCellType getPhysType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysCell::Builder {
public:
  typedef PhysCell Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getCellName();
  inline void setCellName( ::uint32_t value);

  inline  ::PhysicalNetlist::PhysNetlist::PhysCellType getPhysType();
  inline void setPhysType( ::PhysicalNetlist::PhysNetlist::PhysCellType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysCell::Pipeline {
public:
  typedef PhysCell Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysNet::Reader {
public:
  typedef PhysNet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName() const;

  inline bool hasSources() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader getSources() const;

  inline bool hasStubs() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader getStubs() const;

  inline  ::PhysicalNetlist::PhysNetlist::NetType getType() const;

  inline bool hasStubNodes() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Reader getStubNodes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysNet::Builder {
public:
  typedef PhysNet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getName();
  inline void setName( ::uint32_t value);

  inline bool hasSources();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder getSources();
  inline void setSources( ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder initSources(unsigned int size);
  inline void adoptSources(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>> disownSources();

  inline bool hasStubs();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder getStubs();
  inline void setStubs( ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder initStubs(unsigned int size);
  inline void adoptStubs(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>> disownStubs();

  inline  ::PhysicalNetlist::PhysNetlist::NetType getType();
  inline void setType( ::PhysicalNetlist::PhysNetlist::NetType value);

  inline bool hasStubNodes();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Builder getStubNodes();
  inline void setStubNodes( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Builder initStubNodes(unsigned int size);
  inline void adoptStubNodes(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>> disownStubNodes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysNet::Pipeline {
public:
  typedef PhysNet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::RouteBranch::Reader {
public:
  typedef RouteBranch Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename RouteSegment::Reader getRouteSegment() const;

  inline bool hasBranches() const;
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader getBranches() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::RouteBranch::Builder {
public:
  typedef RouteBranch Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename RouteSegment::Builder getRouteSegment();
  inline typename RouteSegment::Builder initRouteSegment();

  inline bool hasBranches();
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder getBranches();
  inline void setBranches( ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder initBranches(unsigned int size);
  inline void adoptBranches(::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>> disownBranches();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::RouteBranch::Pipeline {
public:
  typedef RouteBranch Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename RouteSegment::Pipeline getRouteSegment();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::RouteBranch::RouteSegment::Reader {
public:
  typedef RouteSegment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isBelPin() const;
  inline bool hasBelPin() const;
  inline  ::PhysicalNetlist::PhysNetlist::PhysBelPin::Reader getBelPin() const;

  inline bool isSitePin() const;
  inline bool hasSitePin() const;
  inline  ::PhysicalNetlist::PhysNetlist::PhysSitePin::Reader getSitePin() const;

  inline bool isPip() const;
  inline bool hasPip() const;
  inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Reader getPip() const;

  inline bool isSitePIP() const;
  inline bool hasSitePIP() const;
  inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Reader getSitePIP() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::RouteBranch::RouteSegment::Builder {
public:
  typedef RouteSegment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isBelPin();
  inline bool hasBelPin();
  inline  ::PhysicalNetlist::PhysNetlist::PhysBelPin::Builder getBelPin();
  inline void setBelPin( ::PhysicalNetlist::PhysNetlist::PhysBelPin::Reader value);
  inline  ::PhysicalNetlist::PhysNetlist::PhysBelPin::Builder initBelPin();
  inline void adoptBelPin(::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysBelPin>&& value);
  inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysBelPin> disownBelPin();

  inline bool isSitePin();
  inline bool hasSitePin();
  inline  ::PhysicalNetlist::PhysNetlist::PhysSitePin::Builder getSitePin();
  inline void setSitePin( ::PhysicalNetlist::PhysNetlist::PhysSitePin::Reader value);
  inline  ::PhysicalNetlist::PhysNetlist::PhysSitePin::Builder initSitePin();
  inline void adoptSitePin(::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePin>&& value);
  inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePin> disownSitePin();

  inline bool isPip();
  inline bool hasPip();
  inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Builder getPip();
  inline void setPip( ::PhysicalNetlist::PhysNetlist::PhysPIP::Reader value);
  inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Builder initPip();
  inline void adoptPip(::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysPIP>&& value);
  inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysPIP> disownPip();

  inline bool isSitePIP();
  inline bool hasSitePIP();
  inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Builder getSitePIP();
  inline void setSitePIP( ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Reader value);
  inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Builder initSitePIP();
  inline void adoptSitePIP(::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>&& value);
  inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePIP> disownSitePIP();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::RouteBranch::RouteSegment::Pipeline {
public:
  typedef RouteSegment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysBel::Reader {
public:
  typedef PhysBel Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite() const;

  inline  ::uint32_t getBel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysBel::Builder {
public:
  typedef PhysBel Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysBel::Pipeline {
public:
  typedef PhysBel Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysBelPin::Reader {
public:
  typedef PhysBelPin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite() const;

  inline  ::uint32_t getBel() const;

  inline  ::uint32_t getPin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysBelPin::Builder {
public:
  typedef PhysBelPin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline  ::uint32_t getPin();
  inline void setPin( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysBelPin::Pipeline {
public:
  typedef PhysBelPin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysSitePin::Reader {
public:
  typedef PhysSitePin Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite() const;

  inline  ::uint32_t getPin() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysSitePin::Builder {
public:
  typedef PhysSitePin Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

  inline  ::uint32_t getPin();
  inline void setPin( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysSitePin::Pipeline {
public:
  typedef PhysSitePin Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysPIP::Reader {
public:
  typedef PhysPIP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getTile() const;

  inline  ::uint32_t getWire0() const;

  inline  ::uint32_t getWire1() const;

  inline bool getForward() const;

  inline bool getIsFixed() const;

  inline bool isNoSite() const;
  inline  ::capnp::Void getNoSite() const;

  inline bool isSite() const;
  inline  ::uint32_t getSite() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysPIP::Builder {
public:
  typedef PhysPIP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getTile();
  inline void setTile( ::uint32_t value);

  inline  ::uint32_t getWire0();
  inline void setWire0( ::uint32_t value);

  inline  ::uint32_t getWire1();
  inline void setWire1( ::uint32_t value);

  inline bool getForward();
  inline void setForward(bool value);

  inline bool getIsFixed();
  inline void setIsFixed(bool value);

  inline bool isNoSite();
  inline  ::capnp::Void getNoSite();
  inline void setNoSite( ::capnp::Void value = ::capnp::VOID);

  inline bool isSite();
  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysPIP::Pipeline {
public:
  typedef PhysPIP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysSitePIP::Reader {
public:
  typedef PhysSitePIP Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::uint32_t getSite() const;

  inline  ::uint32_t getBel() const;

  inline  ::uint32_t getPin() const;

  inline bool getIsFixed() const;

  inline bool isIsInverting() const;
  inline bool getIsInverting() const;

  inline bool isInverts() const;
  inline  ::capnp::Void getInverts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysSitePIP::Builder {
public:
  typedef PhysSitePIP Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

  inline  ::uint32_t getBel();
  inline void setBel( ::uint32_t value);

  inline  ::uint32_t getPin();
  inline void setPin( ::uint32_t value);

  inline bool getIsFixed();
  inline void setIsFixed(bool value);

  inline bool isIsInverting();
  inline bool getIsInverting();
  inline void setIsInverting(bool value);

  inline bool isInverts();
  inline  ::capnp::Void getInverts();
  inline void setInverts( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysSitePIP::Pipeline {
public:
  typedef PhysSitePIP Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::PhysNode::Reader {
public:
  typedef PhysNode Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTile() const;

  inline  ::uint32_t getWire() const;

  inline bool getIsFixed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::PhysNode::Builder {
public:
  typedef PhysNode Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getTile();
  inline void setTile( ::uint32_t value);

  inline  ::uint32_t getWire();
  inline void setWire( ::uint32_t value);

  inline bool getIsFixed();
  inline void setIsFixed(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::PhysNode::Pipeline {
public:
  typedef PhysNode Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::SiteInstance::Reader {
public:
  typedef SiteInstance Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite() const;

  inline  ::uint32_t getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::SiteInstance::Builder {
public:
  typedef SiteInstance Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSite();
  inline void setSite( ::uint32_t value);

  inline  ::uint32_t getType();
  inline void setType( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::SiteInstance::Pipeline {
public:
  typedef SiteInstance Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PhysNetlist::Property::Reader {
public:
  typedef Property Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getKey() const;

  inline  ::uint32_t getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PhysNetlist::Property::Builder {
public:
  typedef Property Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getKey();
  inline void setKey( ::uint32_t value);

  inline  ::uint32_t getValue();
  inline void setValue( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PhysNetlist::Property::Pipeline {
public:
  typedef Property Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::ReferenceType StringRef::Reader::getType() const {
  return _reader.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}

inline  ::ReferenceType StringRef::Builder::getType() {
  return _builder.getDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}
inline void StringRef::Builder::setType( ::ReferenceType value) {
  _builder.setDataField< ::ReferenceType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool StringRef::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StringRef::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StringRef::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_898b9b1cd371bc2c + 48, 7);
}
inline  ::capnp::Text::Builder StringRef::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_898b9b1cd371bc2c + 48, 7);
}
inline void StringRef::Builder::setField( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StringRef::Builder::initField(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StringRef::Builder::adoptField(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StringRef::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::ImplementationType HashSet::Reader::getType() const {
  return _reader.getDataField< ::ImplementationType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::ImplementationType HashSet::Builder::getType() {
  return _builder.getDataField< ::ImplementationType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void HashSet::Builder::setType( ::ImplementationType value) {
  _builder.setDataField< ::ImplementationType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool HashSet::Reader::getHide() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, true);
}

inline bool HashSet::Builder::getHide() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, true);
}
inline void HashSet::Builder::setHide(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, true);
}

inline bool PhysNetlist::Reader::hasPart() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasPart() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PhysNetlist::Reader::getPart() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PhysNetlist::Builder::getPart() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setPart( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PhysNetlist::Builder::initPart(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptPart(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PhysNetlist::Builder::disownPart() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasPlacements() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasPlacements() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::Reader::getPlacements() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::getPlacements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setPlacements( ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::initPlacements(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptPlacements(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>> PhysNetlist::Builder::disownPlacements() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::CellPlacement,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasPhysNets() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasPhysNets() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::Reader::getPhysNets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::getPhysNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setPhysNets( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::initPhysNets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptPhysNets(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>> PhysNetlist::Builder::disownPhysNets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNet,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasPhysCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasPhysCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::Reader::getPhysCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::getPhysCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setPhysCells( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::initPhysCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptPhysCells(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>> PhysNetlist::Builder::disownPhysCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysCell,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasStrList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasStrList() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader PhysNetlist::Reader::getStrList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder PhysNetlist::Builder::getStrList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setStrList( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void PhysNetlist::Builder::setStrList(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder PhysNetlist::Builder::initStrList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptStrList(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> PhysNetlist::Builder::disownStrList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasSiteInsts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasSiteInsts() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::Reader::getSiteInsts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::getSiteInsts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setSiteInsts( ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::initSiteInsts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptSiteInsts(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>> PhysNetlist::Builder::disownSiteInsts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::SiteInstance,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasProperties() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasProperties() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::Reader::getProperties() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::getProperties() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::setProperties( ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::Builder::initProperties(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::Builder::adoptProperties(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>> PhysNetlist::Builder::disownProperties() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::Property,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::Reader::hasNullNet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::Builder::hasNullNet() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Reader PhysNetlist::Reader::getNullNet() const {
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysNet>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Builder PhysNetlist::Builder::getNullNet() {
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysNet>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Pipeline PhysNetlist::Pipeline::getNullNet() {
  return  ::PhysicalNetlist::PhysNetlist::PhysNet::Pipeline(_typeless.getPointerField(7));
}
#endif  // !CAPNP_LITE
inline void PhysNetlist::Builder::setNullNet( ::PhysicalNetlist::PhysNetlist::PhysNet::Reader value) {
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysNet>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysNet::Builder PhysNetlist::Builder::initNullNet() {
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysNet>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void PhysNetlist::Builder::adoptNullNet(
    ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysNet>&& value) {
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysNet>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysNet> PhysNetlist::Builder::disownNullNet() {
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysNet>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::PhysicalNetlist::PhysNetlist::PinMapping::Which PhysNetlist::PinMapping::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::PhysicalNetlist::PhysNetlist::PinMapping::Which PhysNetlist::PinMapping::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PinMapping::Reader::getCellPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PinMapping::Builder::getCellPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PinMapping::Builder::setCellPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PinMapping::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PinMapping::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PinMapping::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PinMapping::Reader::getBelPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PinMapping::Builder::getBelPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PinMapping::Builder::setBelPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PinMapping::Reader::getIsFixed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::PinMapping::Builder::getIsFixed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PinMapping::Builder::setIsFixed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PinMapping::Reader::isMulti() const {
  return which() == PhysNetlist::PinMapping::MULTI;
}
inline bool PhysNetlist::PinMapping::Builder::isMulti() {
  return which() == PhysNetlist::PinMapping::MULTI;
}
inline  ::capnp::Void PhysNetlist::PinMapping::Reader::getMulti() const {
  KJ_IREQUIRE((which() == PhysNetlist::PinMapping::MULTI),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void PhysNetlist::PinMapping::Builder::getMulti() {
  KJ_IREQUIRE((which() == PhysNetlist::PinMapping::MULTI),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PinMapping::Builder::setMulti( ::capnp::Void value) {
  _builder.setDataField<PhysNetlist::PinMapping::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PinMapping::MULTI);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PinMapping::Reader::isOtherCell() const {
  return which() == PhysNetlist::PinMapping::OTHER_CELL;
}
inline bool PhysNetlist::PinMapping::Builder::isOtherCell() {
  return which() == PhysNetlist::PinMapping::OTHER_CELL;
}
inline bool PhysNetlist::PinMapping::Reader::hasOtherCell() const {
  if (which() != PhysNetlist::PinMapping::OTHER_CELL) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::PinMapping::Builder::hasOtherCell() {
  if (which() != PhysNetlist::PinMapping::OTHER_CELL) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Reader PhysNetlist::PinMapping::Reader::getOtherCell() const {
  KJ_IREQUIRE((which() == PhysNetlist::PinMapping::OTHER_CELL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Builder PhysNetlist::PinMapping::Builder::getOtherCell() {
  KJ_IREQUIRE((which() == PhysNetlist::PinMapping::OTHER_CELL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::PinMapping::Builder::setOtherCell( ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Reader value) {
  _builder.setDataField<PhysNetlist::PinMapping::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PinMapping::OTHER_CELL);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping::Builder PhysNetlist::PinMapping::Builder::initOtherCell() {
  _builder.setDataField<PhysNetlist::PinMapping::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PinMapping::OTHER_CELL);
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::PinMapping::Builder::adoptOtherCell(
    ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>&& value) {
  _builder.setDataField<PhysNetlist::PinMapping::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PinMapping::OTHER_CELL);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping> PhysNetlist::PinMapping::Builder::disownOtherCell() {
  KJ_IREQUIRE((which() == PhysNetlist::PinMapping::OTHER_CELL),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::MultiCellPinMapping>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t PhysNetlist::MultiCellPinMapping::Reader::getMultiCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::MultiCellPinMapping::Builder::getMultiCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::MultiCellPinMapping::Builder::setMultiCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::MultiCellPinMapping::Reader::getMultiType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::MultiCellPinMapping::Builder::getMultiType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::MultiCellPinMapping::Builder::setMultiType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Reader::getCellName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Builder::getCellName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setCellName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::CellPlacement::Reader::hasPinMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::CellPlacement::Builder::hasPinMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::CellPlacement::Reader::getPinMap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::CellPlacement::Builder::getPinMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::CellPlacement::Builder::setPinMap( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::CellPlacement::Builder::initPinMap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::CellPlacement::Builder::adoptPinMap(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>> PhysNetlist::CellPlacement::Builder::disownPinMap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PinMapping,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::CellPlacement::Reader::hasOtherBels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::CellPlacement::Builder::hasOtherBels() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader PhysNetlist::CellPlacement::Reader::getOtherBels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PhysNetlist::CellPlacement::Builder::getOtherBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PhysNetlist::CellPlacement::Builder::setOtherBels( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PhysNetlist::CellPlacement::Builder::setOtherBels(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PhysNetlist::CellPlacement::Builder::initOtherBels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::CellPlacement::Builder::adoptOtherBels(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> PhysNetlist::CellPlacement::Builder::disownOtherBels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::CellPlacement::Reader::getIsBelFixed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::CellPlacement::Builder::getIsBelFixed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setIsBelFixed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::CellPlacement::Reader::getIsSiteFixed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::CellPlacement::Builder::getIsSiteFixed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setIsSiteFixed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Reader::getAltSiteType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::CellPlacement::Builder::getAltSiteType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::CellPlacement::Builder::setAltSiteType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysCell::Reader::getCellName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysCell::Builder::getCellName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysCell::Builder::setCellName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::PhysicalNetlist::PhysNetlist::PhysCellType PhysNetlist::PhysCell::Reader::getPhysType() const {
  return _reader.getDataField< ::PhysicalNetlist::PhysNetlist::PhysCellType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::PhysicalNetlist::PhysNetlist::PhysCellType PhysNetlist::PhysCell::Builder::getPhysType() {
  return _builder.getDataField< ::PhysicalNetlist::PhysNetlist::PhysCellType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysCell::Builder::setPhysType( ::PhysicalNetlist::PhysNetlist::PhysCellType value) {
  _builder.setDataField< ::PhysicalNetlist::PhysNetlist::PhysCellType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysNet::Reader::getName() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysNet::Builder::getName() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysNet::Builder::setName( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysNet::Reader::hasSources() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::PhysNet::Builder::hasSources() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::PhysNet::Reader::getSources() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::PhysNet::Builder::getSources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::PhysNet::Builder::setSources( ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::PhysNet::Builder::initSources(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::PhysNet::Builder::adoptSources(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>> PhysNetlist::PhysNet::Builder::disownSources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::PhysNet::Reader::hasStubs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::PhysNet::Builder::hasStubs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::PhysNet::Reader::getStubs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::PhysNet::Builder::getStubs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PhysNetlist::PhysNet::Builder::setStubs( ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::PhysNet::Builder::initStubs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::PhysNet::Builder::adoptStubs(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>> PhysNetlist::PhysNet::Builder::disownStubs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::PhysicalNetlist::PhysNetlist::NetType PhysNetlist::PhysNet::Reader::getType() const {
  return _reader.getDataField< ::PhysicalNetlist::PhysNetlist::NetType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::PhysicalNetlist::PhysNetlist::NetType PhysNetlist::PhysNet::Builder::getType() {
  return _builder.getDataField< ::PhysicalNetlist::PhysNetlist::NetType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysNet::Builder::setType( ::PhysicalNetlist::PhysNetlist::NetType value) {
  _builder.setDataField< ::PhysicalNetlist::PhysNetlist::NetType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysNet::Reader::hasStubNodes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::PhysNet::Builder::hasStubNodes() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::PhysNet::Reader::getStubNodes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::PhysNet::Builder::getStubNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PhysNetlist::PhysNet::Builder::setStubNodes( ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::PhysNet::Builder::initStubNodes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::PhysNet::Builder::adoptStubNodes(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>> PhysNetlist::PhysNet::Builder::disownStubNodes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::PhysNode,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline typename PhysNetlist::RouteBranch::RouteSegment::Reader PhysNetlist::RouteBranch::Reader::getRouteSegment() const {
  return typename PhysNetlist::RouteBranch::RouteSegment::Reader(_reader);
}
inline typename PhysNetlist::RouteBranch::RouteSegment::Builder PhysNetlist::RouteBranch::Builder::getRouteSegment() {
  return typename PhysNetlist::RouteBranch::RouteSegment::Builder(_builder);
}
#if !CAPNP_LITE
inline typename PhysNetlist::RouteBranch::RouteSegment::Pipeline PhysNetlist::RouteBranch::Pipeline::getRouteSegment() {
  return typename PhysNetlist::RouteBranch::RouteSegment::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename PhysNetlist::RouteBranch::RouteSegment::Builder PhysNetlist::RouteBranch::Builder::initRouteSegment() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename PhysNetlist::RouteBranch::RouteSegment::Builder(_builder);
}
inline bool PhysNetlist::RouteBranch::Reader::hasBranches() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::RouteBranch::Builder::hasBranches() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader PhysNetlist::RouteBranch::Reader::getBranches() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::RouteBranch::Builder::getBranches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::Builder::setBranches( ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>::Builder PhysNetlist::RouteBranch::Builder::initBranches(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PhysNetlist::RouteBranch::Builder::adoptBranches(
    ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>> PhysNetlist::RouteBranch::Builder::disownBranches() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PhysicalNetlist::PhysNetlist::RouteBranch,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::PhysicalNetlist::PhysNetlist::RouteBranch::RouteSegment::Which PhysNetlist::RouteBranch::RouteSegment::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::PhysicalNetlist::PhysNetlist::RouteBranch::RouteSegment::Which PhysNetlist::RouteBranch::RouteSegment::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::isBelPin() const {
  return which() == PhysNetlist::RouteBranch::RouteSegment::BEL_PIN;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::isBelPin() {
  return which() == PhysNetlist::RouteBranch::RouteSegment::BEL_PIN;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::hasBelPin() const {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::BEL_PIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::hasBelPin() {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::BEL_PIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PhysicalNetlist::PhysNetlist::PhysBelPin::Reader PhysNetlist::RouteBranch::RouteSegment::Reader::getBelPin() const {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::BEL_PIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysBelPin>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PhysicalNetlist::PhysNetlist::PhysBelPin::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::getBelPin() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::BEL_PIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysBelPin>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::setBelPin( ::PhysicalNetlist::PhysNetlist::PhysBelPin::Reader value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::BEL_PIN);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysBelPin>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysBelPin::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::initBelPin() {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::BEL_PIN);
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysBelPin>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::adoptBelPin(
    ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysBelPin>&& value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::BEL_PIN);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysBelPin>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysBelPin> PhysNetlist::RouteBranch::RouteSegment::Builder::disownBelPin() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::BEL_PIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysBelPin>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::isSitePin() const {
  return which() == PhysNetlist::RouteBranch::RouteSegment::SITE_PIN;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::isSitePin() {
  return which() == PhysNetlist::RouteBranch::RouteSegment::SITE_PIN;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::hasSitePin() const {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::SITE_PIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::hasSitePin() {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::SITE_PIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePin::Reader PhysNetlist::RouteBranch::RouteSegment::Reader::getSitePin() const {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::SITE_PIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePin>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePin::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::getSitePin() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::SITE_PIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePin>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::setSitePin( ::PhysicalNetlist::PhysNetlist::PhysSitePin::Reader value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::SITE_PIN);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePin>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePin::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::initSitePin() {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::SITE_PIN);
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePin>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::adoptSitePin(
    ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePin>&& value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::SITE_PIN);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePin>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePin> PhysNetlist::RouteBranch::RouteSegment::Builder::disownSitePin() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::SITE_PIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePin>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::isPip() const {
  return which() == PhysNetlist::RouteBranch::RouteSegment::PIP;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::isPip() {
  return which() == PhysNetlist::RouteBranch::RouteSegment::PIP;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::hasPip() const {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::PIP) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::hasPip() {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::PIP) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Reader PhysNetlist::RouteBranch::RouteSegment::Reader::getPip() const {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::PIP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysPIP>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::getPip() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::PIP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysPIP>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::setPip( ::PhysicalNetlist::PhysNetlist::PhysPIP::Reader value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::PIP);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysPIP>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::initPip() {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::PIP);
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysPIP>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::adoptPip(
    ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysPIP>&& value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::PIP);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysPIP>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysPIP> PhysNetlist::RouteBranch::RouteSegment::Builder::disownPip() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::PIP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysPIP>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::isSitePIP() const {
  return which() == PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::isSitePIP() {
  return which() == PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P;
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Reader::hasSitePIP() const {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PhysNetlist::RouteBranch::RouteSegment::Builder::hasSitePIP() {
  if (which() != PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Reader PhysNetlist::RouteBranch::RouteSegment::Reader::getSitePIP() const {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::getSitePIP() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::setSitePIP( ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Reader value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Builder PhysNetlist::RouteBranch::RouteSegment::Builder::initSitePIP() {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P);
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PhysNetlist::RouteBranch::RouteSegment::Builder::adoptSitePIP(
    ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>&& value) {
  _builder.setDataField<PhysNetlist::RouteBranch::RouteSegment::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P);
  ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PhysicalNetlist::PhysNetlist::PhysSitePIP> PhysNetlist::RouteBranch::RouteSegment::Builder::disownSitePIP() {
  KJ_IREQUIRE((which() == PhysNetlist::RouteBranch::RouteSegment::SITE_P_I_P),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::PhysicalNetlist::PhysNetlist::PhysSitePIP>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t PhysNetlist::PhysBel::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysBel::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysBel::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysBel::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysBel::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysBel::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysBelPin::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysBelPin::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysBelPin::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysBelPin::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysBelPin::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysBelPin::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysBelPin::Reader::getPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysBelPin::Builder::getPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysBelPin::Builder::setPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysSitePin::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysSitePin::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePin::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysSitePin::Reader::getPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysSitePin::Builder::getPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePin::Builder::setPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Which PhysNetlist::PhysPIP::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysPIP::Which PhysNetlist::PhysPIP::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Reader::getTile() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Builder::getTile() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setTile( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Reader::getWire0() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Builder::getWire0() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setWire0( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Reader::getWire1() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Builder::getWire1() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setWire1( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysPIP::Reader::getForward() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::PhysPIP::Builder::getForward() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setForward(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysPIP::Reader::getIsFixed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::PhysPIP::Builder::getIsFixed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setIsFixed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysPIP::Reader::isNoSite() const {
  return which() == PhysNetlist::PhysPIP::NO_SITE;
}
inline bool PhysNetlist::PhysPIP::Builder::isNoSite() {
  return which() == PhysNetlist::PhysPIP::NO_SITE;
}
inline  ::capnp::Void PhysNetlist::PhysPIP::Reader::getNoSite() const {
  KJ_IREQUIRE((which() == PhysNetlist::PhysPIP::NO_SITE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void PhysNetlist::PhysPIP::Builder::getNoSite() {
  KJ_IREQUIRE((which() == PhysNetlist::PhysPIP::NO_SITE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setNoSite( ::capnp::Void value) {
  _builder.setDataField<PhysNetlist::PhysPIP::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PhysPIP::NO_SITE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysPIP::Reader::isSite() const {
  return which() == PhysNetlist::PhysPIP::SITE;
}
inline bool PhysNetlist::PhysPIP::Builder::isSite() {
  return which() == PhysNetlist::PhysPIP::SITE;
}
inline  ::uint32_t PhysNetlist::PhysPIP::Reader::getSite() const {
  KJ_IREQUIRE((which() == PhysNetlist::PhysPIP::SITE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysPIP::Builder::getSite() {
  KJ_IREQUIRE((which() == PhysNetlist::PhysPIP::SITE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysPIP::Builder::setSite( ::uint32_t value) {
  _builder.setDataField<PhysNetlist::PhysPIP::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PhysPIP::SITE);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Which PhysNetlist::PhysSitePIP::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::PhysicalNetlist::PhysNetlist::PhysSitePIP::Which PhysNetlist::PhysSitePIP::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysSitePIP::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysSitePIP::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePIP::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysSitePIP::Reader::getBel() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysSitePIP::Builder::getBel() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePIP::Builder::setBel( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysSitePIP::Reader::getPin() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysSitePIP::Builder::getPin() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePIP::Builder::setPin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysSitePIP::Reader::getIsFixed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::PhysSitePIP::Builder::getIsFixed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePIP::Builder::setIsFixed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysSitePIP::Reader::isIsInverting() const {
  return which() == PhysNetlist::PhysSitePIP::IS_INVERTING;
}
inline bool PhysNetlist::PhysSitePIP::Builder::isIsInverting() {
  return which() == PhysNetlist::PhysSitePIP::IS_INVERTING;
}
inline bool PhysNetlist::PhysSitePIP::Reader::getIsInverting() const {
  KJ_IREQUIRE((which() == PhysNetlist::PhysSitePIP::IS_INVERTING),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::PhysSitePIP::Builder::getIsInverting() {
  KJ_IREQUIRE((which() == PhysNetlist::PhysSitePIP::IS_INVERTING),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePIP::Builder::setIsInverting(bool value) {
  _builder.setDataField<PhysNetlist::PhysSitePIP::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PhysSitePIP::IS_INVERTING);
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysSitePIP::Reader::isInverts() const {
  return which() == PhysNetlist::PhysSitePIP::INVERTS;
}
inline bool PhysNetlist::PhysSitePIP::Builder::isInverts() {
  return which() == PhysNetlist::PhysSitePIP::INVERTS;
}
inline  ::capnp::Void PhysNetlist::PhysSitePIP::Reader::getInverts() const {
  KJ_IREQUIRE((which() == PhysNetlist::PhysSitePIP::INVERTS),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void PhysNetlist::PhysSitePIP::Builder::getInverts() {
  KJ_IREQUIRE((which() == PhysNetlist::PhysSitePIP::INVERTS),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysSitePIP::Builder::setInverts( ::capnp::Void value) {
  _builder.setDataField<PhysNetlist::PhysSitePIP::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PhysNetlist::PhysSitePIP::INVERTS);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysNode::Reader::getTile() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysNode::Builder::getTile() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysNode::Builder::setTile( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::PhysNode::Reader::getWire() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::PhysNode::Builder::getWire() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysNode::Builder::setWire( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PhysNetlist::PhysNode::Reader::getIsFixed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool PhysNetlist::PhysNode::Builder::getIsFixed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::PhysNode::Builder::setIsFixed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::SiteInstance::Reader::getSite() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::SiteInstance::Builder::getSite() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::SiteInstance::Builder::setSite( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::SiteInstance::Reader::getType() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::SiteInstance::Builder::getType() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::SiteInstance::Builder::setType( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::Property::Reader::getKey() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::Property::Builder::getKey() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::Property::Builder::setKey( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PhysNetlist::Property::Reader::getValue() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PhysNetlist::Property::Builder::getValue() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PhysNetlist::Property::Builder::setValue( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace

CAPNP_END_HEADER

