cmake_minimum_required(VERSION 3.17)

message(STATUS "CUHK FPGA ROUTE with oneMKL Optimization")
message(STATUS "project directory ${PROJECT_SOURCE_DIR}")

set(CMAKE_CXX_STANDARD 17)
# set(CMAKE_VERBOSE_MAKEFILE ON)

project(FPGA_ROUTE_ONEMKL)
set(PATH_SRC ${PROJECT_SOURCE_DIR}/src)
set(PATH_LIB ${PROJECT_SOURCE_DIR}/libs)

file(GLOB_RECURSE SRC_FILES ${PATH_SRC}/*.cpp)

add_subdirectory(${PATH_LIB}/capnproto)

# Find required libraries
find_package(ZLIB REQUIRED)
find_package(Boost COMPONENTS serialization REQUIRED)

# Find Intel oneMKL
# Method 1: Try to find MKL via pkg-config or standard paths
if(DEFINED ENV{MKLROOT})
    message(STATUS "Found MKLROOT: $ENV{MKLROOT}")
    set(MKL_ROOT $ENV{MKLROOT})

    # Set MKL include directories
    set(MKL_INCLUDE_DIRS "${MKL_ROOT}/include")

    # Set MKL library directories
    if(APPLE)
        set(MKL_LIB_DIR "${MKL_ROOT}/lib")
    else()
        set(MKL_LIB_DIR "${MKL_ROOT}/lib/intel64")
    endif()

    message(STATUS "MKL Include: ${MKL_INCLUDE_DIRS}")
    message(STATUS "MKL Library Dir: ${MKL_LIB_DIR}")

    # MKL libraries for C/C++ with GNU threading
    # Using LP64 interface (32-bit integers)
    set(MKL_LIBRARIES
        ${MKL_LIB_DIR}/libmkl_intel_lp64${CMAKE_SHARED_LIBRARY_SUFFIX}
        ${MKL_LIB_DIR}/libmkl_gnu_thread${CMAKE_SHARED_LIBRARY_SUFFIX}
        ${MKL_LIB_DIR}/libmkl_core${CMAKE_SHARED_LIBRARY_SUFFIX}
    )

    set(MKL_FOUND TRUE)
else()
    # Try to find MKL via CMake config
    find_package(MKL CONFIG)
    if(MKL_FOUND)
        message(STATUS "Found MKL via CMake config")
    else()
        message(WARNING "oneMKL not found. Please source oneAPI environment or set MKLROOT.")
        message(WARNING "Run: source /opt/intel/oneapi/setvars.sh")
        set(MKL_FOUND FALSE)
    endif()
endif()

add_executable(route ${SRC_FILES})

target_include_directories(route PRIVATE ${PATH_SRC})
target_include_directories(route PRIVATE ${PATH_LIB}/capnproto/c++/src/)
target_include_directories(route PRIVATE ${PATH_LIB}/interchange/)
target_include_directories(route PRIVATE ${PATH_LIB}/cxxopts/)
target_include_directories(route PRIVATE ${Boost_INCLUDE_DIRS})

# Link base libraries
target_link_libraries(route capnp)
target_link_libraries(route Boost::serialization)
target_link_libraries(route z)

# Link oneMKL if found
if(MKL_FOUND)
    if(DEFINED MKL_INCLUDE_DIRS)
        target_include_directories(route PRIVATE ${MKL_INCLUDE_DIRS})
        target_link_directories(route PRIVATE ${MKL_LIB_DIR})

        # Link MKL libraries
        target_link_libraries(route mkl_intel_lp64 mkl_gnu_thread mkl_core)

        # Link threading libraries
        find_package(Threads REQUIRED)
        target_link_libraries(route Threads::Threads)

        # Link math library
        target_link_libraries(route m dl)

        # Add compiler flags for OpenMP (required by MKL threading)
        target_compile_options(route PRIVATE -fopenmp)
        target_link_options(route PRIVATE -fopenmp)

        # Define preprocessor macro to enable oneMKL code
        target_compile_definitions(route PRIVATE USE_ONEMKL)

        message(STATUS "oneMKL optimization ENABLED")
    else()
        # Using MKL from CMake config
        target_link_libraries(route MKL::MKL)
        target_compile_definitions(route PRIVATE USE_ONEMKL)
        message(STATUS "oneMKL optimization ENABLED (via CMake config)")
    endif()
else()
    message(STATUS "Building WITHOUT oneMKL optimization")
endif()